import{ac as a,F as s,G as n,ad as e}from"./framework-f12b30cc.js";const p={},t=e(`<h1 id="七、单表访问方法" tabindex="-1"><a class="header-anchor" href="#七、单表访问方法" aria-hidden="true">#</a> 七、单表访问方法</h1><h2 id="访问方法" tabindex="-1"><a class="header-anchor" href="#访问方法" aria-hidden="true">#</a> 访问方法</h2><p>MySQL的大叔把查询的执行方式大致分 为下边两种：</p><ul><li>使用全表扫描进行查询</li></ul><p>这种执行方式很好理解，就是把表的每一行记录都扫一遍嘛，把符合搜索条件的记录加入到结果集就完了。 不管是啥查询都可以使用这种方式执行，当然，这种也是最笨的执行方式。</p><ul><li>使用索引进行查询</li></ul><p>因为直接使用全表扫描的方式执行查询要遍历好多记录，所以代价可能太大了。如果查询语句中的搜索条件 可以使用到某个索引，那直接使用索引来执行查询可能会加快查询执行的时间。使用索引来执行查询的方式 五花八门，又可以细分为许多种类：</p><ul><li>针对主键或唯一二级索引的等值查询</li><li>针对普通二级索引的等值查询</li><li>针对索引列的范围查询</li><li>直接扫描整个索引</li></ul><h2 id="const" tabindex="-1"><a class="header-anchor" href="#const" aria-hidden="true">#</a> const</h2><p>有的时候我们可以通过主键列来定位一条记录，比方说这个查询</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>SELECT * FROM single_table WHERE id = 1438;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>MySQL 会直接利用主键值在聚簇索引中定位对应的用户记录，就像这样：</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220917152902573.png" alt="image-20220917152902573" tabindex="0" loading="lazy"><figcaption>image-20220917152902573</figcaption></figure><p>类似的，我们根据唯一二级索引列来定位一条记录的速度也是贼快 的，比如下边这个查询：</p><p>SELECT * FROM single_table WHERE key2 = 3841</p><p>这个查询的执行过程的示意图就是这样</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220917152942957.png" alt="image-20220917152942957" tabindex="0" loading="lazy"><figcaption>image-20220917152942957</figcaption></figure><p>可以看到这个查询的执行分两步，第一步先从 idx_key2 对应的 B+ 树索引中根据 key2 列与常数的等值比较条件 定位到一条二级索引记录，然后再根据该记录的 id 值到聚簇索引中获取到完整的用户记录。</p><p>设计 MySQL 的大叔认为通过主键或者唯一二级索引列与常数的等值比较来定位一条记录是像坐火箭一样快的，所 以他们把这种通过主键或者<strong>唯一二级索引</strong>列来定位一条记录的访问方法定义为： const ，意思是常数级别的，代 价是可以忽略不计的。不过这种 const 访问方法只能在主键列或者唯一二级索引列和一个常数进行等值比较时才 有效，如果主键或者唯一二级索引是由多个列构成的话，索引中的每一个列都需要与常数进行等值比较，这个 const 访问方法才有效（这是因为只有该索引中全部列都采用等值比较才可以定位唯一的一条记录）。</p><p>对于<strong>唯一二级索引来</strong>说，查询该列为 NULL 值的情况比较特殊，比如这样：</p><p>SELECT * FROM single_table WHERE key2 IS NULL;</p><p>因为<strong>唯一二级索引</strong>列并不限制 NULL 值的数量，所以上述语句可能访问到多条记录，也就是说 上边这个语句不可 以使用 const 访问方法来执行（至于是什么访问方法我们下边马上说）。</p><h2 id="ref" tabindex="-1"><a class="header-anchor" href="#ref" aria-hidden="true">#</a> ref</h2><p>有时候我们对某个普通的二级索引列与常数进行等值比较，比如这样：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> single_table <span class="token keyword">WHERE</span> key1 <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>对于这个查询，我们当然可以选择全表扫描来逐一对比搜索条件是否满足要求，我们也可以先使用二级索引找到 对应记录的<code>id</code> 值，然后再回表到聚簇索引中查找完整的用户记录。由于普通二级索引并不限制索引列值的唯一 性，所以可能找到多条对应的记录，也就是说使用二级索引来执行查询的代价取决于等值匹配到的二级索引记录 条数。如果匹配的记录较少，则回表的代价还是比较低的，所以 MySQL 可能选择使用索引而不是全表扫描的方式 来执行查询。设计 MySQL 的大叔就把这种搜索条件为二级索引列与常数等值比较，采用二级索引来执行查询的访 问方法称为： ref 。我们看一下采用 ref 访问方法执行查询的图示：</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220917194905611.png" alt="image-20220917194905611" tabindex="0" loading="lazy"><figcaption>image-20220917194905611</figcaption></figure><ul><li>二级索引列值为 NULL 的情况</li></ul><p>不论是普通的二级索引，还是唯一二级索引，它们的索引列对包含 NULL 值的数量并不限制，所以我们采用 key IS NULL 这种形式的搜索条件最多只能使用 ref 的访问方法，而不是 const 的访问方法。</p><ul><li>对于某个包含多个索引列的二级索引来说，只要是最左边的连续索引列是与常数的等值比较就可能采用 ref 的访问方法，比方说下边这几个查询：</li></ul><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> single_table <span class="token keyword">WHERE</span> key_part1 <span class="token operator">=</span> <span class="token string">&#39;god like&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> single_table <span class="token keyword">WHERE</span> key_part1 <span class="token operator">=</span> <span class="token string">&#39;god like&#39;</span> <span class="token operator">AND</span> key_part2 <span class="token operator">=</span> <span class="token string">&#39;legendary&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> single_table <span class="token keyword">WHERE</span> key_part1 <span class="token operator">=</span> <span class="token string">&#39;god like&#39;</span> <span class="token operator">AND</span> key_part2 <span class="token operator">=</span> <span class="token string">&#39;legendary&#39;</span> <span class="token operator">AND</span> key_part3 <span class="token operator">=</span> <span class="token string">&#39;penta kill&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>但是如果最左边的连续索引列并不全部是等值比较的话，它的访问方法就不能称为 ref 了，比方说这样：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> single_table <span class="token keyword">WHERE</span> key_part1 <span class="token operator">=</span> <span class="token string">&#39;god like&#39;</span> <span class="token operator">AND</span> key_part2 <span class="token operator">&gt;</span> <span class="token string">&#39;legendary&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="ref-or-null" tabindex="-1"><a class="header-anchor" href="#ref-or-null" aria-hidden="true">#</a> ref_or_null</h2><p>有时候我们不仅想找出某个二级索引列的值等于某个常数的记录，还想把该列的值为 NULL 的记录也找出 来，就像下边这个查询：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> single_demo <span class="token keyword">WHERE</span> key1 <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span> <span class="token operator">OR</span> key1 <span class="token operator">IS</span> <span class="token boolean">NULL</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>当使用二级索引而不是全表扫描的方式执行该查询时，这种类型的查询使用的访问方法就称为 ref_or_null ，这个 ref_or_null 访问方法的执行过程如下：</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220917195507409.png" alt="image-20220917195507409" tabindex="0" loading="lazy"><figcaption>image-20220917195507409</figcaption></figure><p>可以看到，上边的查询相当于先分别从 idx_key1 索引对应的 B+ 树中找出 key1 IS NULL 和 key1 = &#39;abc&#39; 的两 个连续的记录范围，然后根据这些二级索引记录中的 id 值再回表查找完整的用户记录。</p><h2 id="range" tabindex="-1"><a class="header-anchor" href="#range" aria-hidden="true">#</a> range</h2><p>我们之前介绍的几种访问方法都是在对索引列与某一个常数进行等值比较的时候才可能使用到（ ref_or_null 比 较奇特，还计算了值为 NULL 的情况），但是有时候我们面对的搜索条件更复杂，比如下边这个查询：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> <span class="token operator">*</span> <span class="token keyword">FROM</span> single_table <span class="token keyword">WHERE</span> key2 <span class="token operator">IN</span> <span class="token punctuation">(</span><span class="token number">1438</span><span class="token punctuation">,</span> <span class="token number">6328</span><span class="token punctuation">)</span> <span class="token operator">OR</span> <span class="token punctuation">(</span>key2 <span class="token operator">&gt;=</span> <span class="token number">38</span> <span class="token operator">AND</span> key2 <span class="token operator">&lt;=</span> <span class="token number">79</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>我们当然还可以使用全表扫描的方式来执行这个查询，不过也可以使用 二级索引 + 回表 的方式执行，如果采 用 二级索引 + 回表 的方式来执行的话，那么此时的搜索条件就不只是要求索引列与常数的等值匹配了，而是索 引列需要匹配某个或某些范围的值，在本查询中 key2 列的值只要匹配下列3个范围中的任何一个就算是匹配成功 了：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>key2 的值是 1438
key2 的值是 6328
key2 的值在 38 和 79 之间。
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>设计 MySQL 的大叔把这种利用索引进行范围匹配的访问方法称之为： range 。</p><blockquote><p>此处所说的使用索引进行范围匹配中的 <code>索引</code> 可以是聚簇索引，也可以是二级索引。</p></blockquote><p>如果把这几个所谓的 key2 列的值需要满足的 范围 在数轴上体现出来的话，那应该是这个样子：</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220917195722426.png" alt="image-20220917195722426" tabindex="0" loading="lazy"><figcaption>image-20220917195722426</figcaption></figure><p>也就是从数学的角度看，每一个所谓的范围都是数轴上的一个 区间 ，3个范围也就对应着3个区间：</p><ul><li>范围1： key2 = 1438</li><li>范围2： key2 = 6328</li><li>范围3： key2 ∈ [38, 79] ，注意这里是闭区间。</li></ul><p>我们可以把那种索引列等值匹配的情况称之为 <code>单点区间 </code>，上边所说的 <code>范围1 </code>和<code>范围2</code>都可以被称为单点区间， 像<code>范围3 </code>这种的我们可以称为连续范围区间。</p><h2 id="index" tabindex="-1"><a class="header-anchor" href="#index" aria-hidden="true">#</a> index</h2><p>看下边这个查询：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SELECT</span> key_part1<span class="token punctuation">,</span> key_part2<span class="token punctuation">,</span> key_part3 <span class="token keyword">FROM</span> single_table <span class="token keyword">WHERE</span> key_part2 <span class="token operator">=</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>由于 key_part2 并不是联合索引 idx_key_part 最左索引列，所以我们无法使用 ref 或者 range 访问方法来执行 这个语句。但是这个查询符合下边这两个条件：</p><ul><li>它的查询列表只有3个列： key_part1 , key_part2 , key_part3 ，而索引 idx_key_part 又包含这三个列。</li><li>搜索条件中只有 key_part2 列。这个列也包含在索引 idx_key_part 中。</li></ul><p>也就是说我们可以直接通过<strong>遍历</strong> <code>idx_key_part</code> <strong>索引的叶子节点的记录来比较</strong> <code>key_part2 = &#39;abc&#39;</code>这个条件是否成立，把匹配成功的二级索引记录的 <code>key_part1 , key_part2 , key_part3</code> 列的值直接加到结果集中就行了。由 于二级索引记录比聚簇索记录小的多（聚簇索引记录要存储所有用户定义的列以及所谓的隐藏列，而二级索引记 录只需要存放索引列和主键），而且这个过程也不用进行回表操作，所以直接遍历二级索引比直接遍历聚簇索引 的成本要小很多，设计 MySQL 的大叔就把这种采用遍历二级索引记录的执行方式称之为：<code> index</code> 。</p><h2 id="all" tabindex="-1"><a class="header-anchor" href="#all" aria-hidden="true">#</a> all</h2><p>最直接的查询执行方式就是我们已经提了无数遍的全表扫描，对于 InnoDB 表来说也就是直接扫描聚簇索引，设 计 MySQL 的大叔把这种使用全表扫描执行查询的方式称之为： all</p>`,59),o=[t];function l(r,i){return s(),n("div",null,o)}const d=a(p,[["render",l],["__file","7.单表访问方法.html.vue"]]);export{d as default};
