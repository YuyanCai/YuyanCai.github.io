import{ac as p,F as o,G as c,D as n,R as s,M as t,ad as e,V as i}from"./framework-f12b30cc.js";const l={},u=e(`<h1 id="高级篇2" tabindex="-1"><a class="header-anchor" href="#高级篇2" aria-hidden="true">#</a> 高级篇2</h1><h2 id="商品首页" tabindex="-1"><a class="header-anchor" href="#商品首页" aria-hidden="true">#</a> 商品首页</h2><h2 id="显示商品首页三级分类" tabindex="-1"><a class="header-anchor" href="#显示商品首页三级分类" aria-hidden="true">#</a> 显示商品首页三级分类</h2><p>实现如下效果</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220918194337242.png" alt="image-20220918194337242" tabindex="0" loading="lazy"><figcaption>image-20220918194337242</figcaption></figure><p>前端页面显示这个三级分类菜单是通过请求<code>/index/catalog.json</code>来完成的，所以这里我们也写一个来从<code>数据库</code>中获取三级分类的菜单</p><blockquote><p>controller</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">&quot;/index/catalog.json&quot;</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@ResponseBody</span>
<span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Catelog2Vo</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">getCatalogJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Catelog2Vo</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> catalogJson <span class="token operator">=</span> categoryService<span class="token punctuation">.</span><span class="token function">getCatalogJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> catalogJson<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>impl</p></blockquote><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Catelog2Vo</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">getCatalogJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>

    <span class="token comment">//将数据库的多次查询变为一次,查询所有的分类</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryEntity</span><span class="token punctuation">&gt;</span></span> selectList <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>baseMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//1、查出所有分类</span>
    <span class="token comment">//1、1）查出所有一级分类,从所有的分类中查出一级分类</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryEntity</span><span class="token punctuation">&gt;</span></span> level1Categorys <span class="token operator">=</span> <span class="token function">getParent_cid</span><span class="token punctuation">(</span>selectList<span class="token punctuation">,</span> <span class="token number">0L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token comment">//封装数据</span>
    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Catelog2Vo</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> parentCid <span class="token operator">=</span> level1Categorys<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token comment">//Collectors.toMap意思是将集合转换为map，map的key和value要分别进行映射</span>
            <span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toMap</span><span class="token punctuation">(</span>
                    k <span class="token operator">-&gt;</span> k<span class="token punctuation">.</span><span class="token function">getCatId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
                    v <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
        <span class="token comment">//1、每一个的一级分类,查到这个一级分类的二级分类</span>
                        <span class="token comment">// 具体是怎么查的呢？</span>
                        <span class="token comment">// 其实就是拿一级分类集合中的所有元素，去查询id = 一级分类</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryEntity</span><span class="token punctuation">&gt;</span></span> categoryEntities <span class="token operator">=</span> <span class="token function">getParent_cid</span><span class="token punctuation">(</span>selectList<span class="token punctuation">,</span> v<span class="token punctuation">.</span><span class="token function">getCatId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">//2、封装上面的结果</span>
        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Catelog2Vo</span><span class="token punctuation">&gt;</span></span> catelog2Vos <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>categoryEntities <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            catelog2Vos <span class="token operator">=</span> categoryEntities<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>l2 <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                <span class="token class-name">Catelog2Vo</span> catelog2Vo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Catelog2Vo</span><span class="token punctuation">(</span>v<span class="token punctuation">.</span><span class="token function">getCatId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token keyword">null</span><span class="token punctuation">,</span> l2<span class="token punctuation">.</span><span class="token function">getCatId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l2<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token comment">//1、找当前二级分类的三级分类封装成vo</span>
                <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryEntity</span><span class="token punctuation">&gt;</span></span> level3Catelog <span class="token operator">=</span> <span class="token function">getParent_cid</span><span class="token punctuation">(</span>selectList<span class="token punctuation">,</span> l2<span class="token punctuation">.</span><span class="token function">getCatId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                <span class="token keyword">if</span> <span class="token punctuation">(</span>level3Catelog <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Catelog2Vo<span class="token punctuation">.</span>Category3Vo</span><span class="token punctuation">&gt;</span></span> category3Vos <span class="token operator">=</span> level3Catelog<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>l3 <span class="token operator">-&gt;</span> <span class="token punctuation">{</span>
                        <span class="token comment">//2、封装成指定格式</span>
                        <span class="token class-name">Catelog2Vo<span class="token punctuation">.</span>Category3Vo</span> category3Vo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Catelog2Vo<span class="token punctuation">.</span>Category3Vo</span><span class="token punctuation">(</span>l2<span class="token punctuation">.</span><span class="token function">getCatId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l3<span class="token punctuation">.</span><span class="token function">getCatId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l3<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

                        <span class="token keyword">return</span> category3Vo<span class="token punctuation">;</span>
                    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                    catelog2Vo<span class="token punctuation">.</span><span class="token function">setCatalog3List</span><span class="token punctuation">(</span>category3Vos<span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token punctuation">}</span>

                <span class="token keyword">return</span> catelog2Vo<span class="token punctuation">;</span>
            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>

        <span class="token keyword">return</span> catelog2Vos<span class="token punctuation">;</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

    <span class="token keyword">return</span> parentCid<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//获得父分类的cid(分类id)</span>
<span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryEntity</span><span class="token punctuation">&gt;</span></span> <span class="token function">getParent_cid</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryEntity</span><span class="token punctuation">&gt;</span></span> selectList<span class="token punctuation">,</span><span class="token class-name">Long</span> parentCid<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryEntity</span><span class="token punctuation">&gt;</span></span> categoryEntities <span class="token operator">=</span> selectList<span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
            <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>item <span class="token operator">-&gt;</span> item<span class="token punctuation">.</span><span class="token function">getParentCid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span>parentCid<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">collect</span><span class="token punctuation">(</span><span class="token class-name">Collectors</span><span class="token punctuation">.</span><span class="token function">toList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> categoryEntities<span class="token punctuation">;</span>
    <span class="token comment">// return this.baseMapper.selectList(</span>
    <span class="token comment">//         new QueryWrapper&lt;CategoryEntity&gt;().eq(&quot;parent_cid&quot;, parentCid));</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="debug" tabindex="-1"><a class="header-anchor" href="#debug" aria-hidden="true">#</a> Debug</h3><p>这一段看不懂可以Debug</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220919202115305.png" alt="image-20220919202115305" tabindex="0" loading="lazy"><figcaption>image-20220919202115305</figcaption></figure><h2 id="整合nginx" tabindex="-1"><a class="header-anchor" href="#整合nginx" aria-hidden="true">#</a> 整合Nginx</h2><h3 id="nginx搭建域名访问环境" tabindex="-1"><a class="header-anchor" href="#nginx搭建域名访问环境" aria-hidden="true">#</a> Nginx搭建域名访问环境</h3><p>流程如下：</p><ul><li>访问域名的时候，会<strong>先去本地的DNS服务器查找IP</strong></li><li>在本地的hosts文件写入域名映射规则</li><li>访问gulimall.com的时候去查找对应的ip我们就可以写成我们本地的ip</li></ul><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220919213702420.png" alt="image-20220919213702420" tabindex="0" loading="lazy"><figcaption>image-20220919213702420</figcaption></figure><h4 id="修改hosts文件" tabindex="-1"><a class="header-anchor" href="#修改hosts文件" aria-hidden="true">#</a> 修改hosts文件</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code># guli
192.168.1.8 mall.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这个IP呢就是虚拟机的IP，<strong>为什么是虚拟机的IP呢</strong>？</p><p>其实这里是模拟真实项目上线的情况，项目上线的话是全部发布到云服务器上，然后给IP绑定域名，这样所有的人都能访问我们的网站了。</p><p>这里的<strong>虚拟机其实就可以想象云服务器</strong>，那么这个域名呢就是我们买的用来绑定ip的。通过这个域名就可以访问我们的云服务器（虚拟机）了！</p><h4 id="nginx逻辑分析" tabindex="-1"><a class="header-anchor" href="#nginx逻辑分析" aria-hidden="true">#</a> Nginx逻辑分析</h4><p>云服务器里装的又有Nginx，Nginx又有默认的配置</p><p>也就是Nginx监听本机的80端口，如果访问本机的80端口，那么就会触发下面的配置</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220920095523081.png" alt="image-20220920095523081" tabindex="0" loading="lazy"><figcaption>image-20220920095523081</figcaption></figure><p>当然如果你的/usr/share/nginx/html下没有内容的话是不显示东西的。</p><h4 id="nginx配置文件详解" tabindex="-1"><a class="header-anchor" href="#nginx配置文件详解" aria-hidden="true">#</a> Nginx配置文件详解</h4><p>大致分布如下：</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220919220534569.png" alt="image-20220919220534569" tabindex="0" loading="lazy"><figcaption>image-20220919220534569</figcaption></figure><p>这个include什么意思呢？</p><blockquote><p>这个目的是为了把server块给分离开，不至于一个配置文件写的太大。正常情况下是server块写在http块下面的，现在Nginx这种配置方式相当于给他们分割开了</p></blockquote><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220919220719020.png" alt="image-20220919220719020" tabindex="0" loading="lazy"><figcaption>image-20220919220719020</figcaption></figure><p>可以看到conf.d文件里的配置都是server块相关的</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost conf<span class="token punctuation">]</span><span class="token comment"># vi nginx.conf </span>
<span class="token punctuation">[</span>root@localhost conf<span class="token punctuation">]</span><span class="token comment"># cd conf.d/</span>
<span class="token punctuation">[</span>root@localhost conf.d<span class="token punctuation">]</span><span class="token comment"># cat default.conf </span>
server <span class="token punctuation">{</span>
    listen       <span class="token number">80</span><span class="token punctuation">;</span>
    server_name  localhost<span class="token punctuation">;</span>

    <span class="token comment">#charset koi8-r;</span>
    <span class="token comment">#access_log  /var/log/nginx/log/host.access.log  main;</span>

    location / <span class="token punctuation">{</span>
        root   /usr/share/nginx/html<span class="token punctuation">;</span>
        index  index.html index.htm<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="nginx反向代理" tabindex="-1"><a class="header-anchor" href="#nginx反向代理" aria-hidden="true">#</a> Nginx反向代理</h4><blockquote><p>反向代理就是代理真实服务器，将所有请求都发到Nginx身上，由Nginx来转发给真实服务器。这个过程真实服务器的IP是隐藏的，Nginx的IP是暴露的！</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost conf<span class="token punctuation">]</span><span class="token comment"># pwd</span>
/mydata/nginx/conf


原配置文件不动！
<span class="token punctuation">[</span>root@localhost conf<span class="token punctuation">]</span><span class="token comment"># cat nginx.conf </span>

user  nginx<span class="token punctuation">;</span>
worker_processes  <span class="token number">1</span><span class="token punctuation">;</span>

error_log  /var/log/nginx/error.log warn<span class="token punctuation">;</span>
pid        /var/run/nginx.pid<span class="token punctuation">;</span>


events <span class="token punctuation">{</span>
    worker_connections  <span class="token number">1024</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


http <span class="token punctuation">{</span>
    include       /etc/nginx/mime.types<span class="token punctuation">;</span>
    default_type  application/octet-stream<span class="token punctuation">;</span>

    log_format  main  <span class="token string">&#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span>
                      <span class="token string">&#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span>
                      <span class="token string">&#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;</span><span class="token punctuation">;</span>

    access_log  /var/log/nginx/access.log  main<span class="token punctuation">;</span>

    sendfile        on<span class="token punctuation">;</span>
    <span class="token comment">#tcp_nopush     on;</span>

    keepalive_timeout  <span class="token number">65</span><span class="token punctuation">;</span>
    
    <span class="token comment">#gzip  on;</span>
    include /etc/nginx/conf.d/*.conf<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token punctuation">[</span>root@localhost conf.d<span class="token punctuation">]</span><span class="token comment"># pwd</span>
/mydata/nginx/conf/conf.d
<span class="token punctuation">[</span>root@localhost conf.d<span class="token punctuation">]</span><span class="token comment"># cat mall.conf </span>
server <span class="token punctuation">{</span>
    listen       <span class="token number">80</span><span class="token punctuation">;</span>
    server_name  mall.com<span class="token punctuation">;</span>
    
    location / <span class="token punctuation">{</span>
    	proxy_pass http://本机地址（不能为localhost或者127.0.0.1要选择其他虚拟机的网卡地址）<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>

    error_page   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  /50x.html<span class="token punctuation">;</span>
    location <span class="token operator">=</span> /50x.html <span class="token punctuation">{</span>
        root   /usr/share/nginx/html<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>浏览器输入域名到页面显示发生了什么？</p></blockquote><p>我专门写了一片文章来介绍，详细可以去这里看下</p>`,41),r={href:"https://blog.csdn.net/qq_45714272/article/details/126392539?spm=1001.2014.3001.5502",target:"_blank",rel:"noopener noreferrer"},d=n("p",null,"下面大概说一下流程：",-1),k={href:"http://xn--mall-pr9l020c.com",target:"_blank",rel:"noopener noreferrer"},m=n("li",null,"浏览器解析域名生成http请求",-1),v=n("li",null,"请求想要继续发生需要进行DNS解析，将域名解析成IP地址",-1),g=n("li",null,"之后就给传输层、网络层、网络接口层....",-1),b=e(`<h4 id="nginx负载均衡" tabindex="-1"><a class="header-anchor" href="#nginx负载均衡" aria-hidden="true">#</a> Nginx负载均衡</h4><blockquote><p>这里也可以分开写，在conf文件下的nginx.conf里写服务器地址</p><p>在conf.d文件下写server块</p></blockquote><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220919224959418.png" alt="image-20220919224959418" tabindex="0" loading="lazy"><figcaption>image-20220919224959418</figcaption></figure><blockquote><p>小细节</p></blockquote><p>Nginx代理给网关的时候，会丢失请求的host信息</p><p>我们要加上<code>proxy_set header Host $host</code></p><p>完整代码如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token punctuation">[</span>root@localhost conf<span class="token punctuation">]</span><span class="token comment"># pwd</span>
/mydata/nginx/conf
<span class="token punctuation">[</span>root@localhost conf<span class="token punctuation">]</span><span class="token comment"># cat nginx.conf </span>

user  nginx<span class="token punctuation">;</span>
worker_processes  <span class="token number">1</span><span class="token punctuation">;</span>

error_log  /var/log/nginx/error.log warn<span class="token punctuation">;</span>
pid        /var/run/nginx.pid<span class="token punctuation">;</span>


events <span class="token punctuation">{</span>
    worker_connections  <span class="token number">1024</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>


http <span class="token punctuation">{</span>
    include       /etc/nginx/mime.types<span class="token punctuation">;</span>
    default_type  application/octet-stream<span class="token punctuation">;</span>

    log_format  main  <span class="token string">&#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;</span>
                      <span class="token string">&#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;</span>
                      <span class="token string">&#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;</span><span class="token punctuation">;</span>

    access_log  /var/log/nginx/access.log  main<span class="token punctuation">;</span>

    sendfile        on<span class="token punctuation">;</span>
    <span class="token comment">#tcp_nopush     on;</span>

    keepalive_timeout  <span class="token number">65</span><span class="token punctuation">;</span>
    upstream mall<span class="token punctuation">{</span>
        server <span class="token number">192.168</span>.1.243:88<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    <span class="token comment">#gzip  on;</span>
    include /etc/nginx/conf.d/*.conf<span class="token punctuation">;</span>
<span class="token punctuation">}</span>


<span class="token punctuation">[</span>root@localhost conf.d<span class="token punctuation">]</span><span class="token comment"># pwd</span>
/mydata/nginx/conf/conf.d
<span class="token punctuation">[</span>root@localhost conf.d<span class="token punctuation">]</span><span class="token comment"># cat mall.conf </span>
server <span class="token punctuation">{</span>
    listen       <span class="token number">80</span><span class="token punctuation">;</span>
    server_name  mall.com<span class="token punctuation">;</span>
    
    location / <span class="token punctuation">{</span>
        proxy_set_header Host <span class="token variable">$host</span><span class="token punctuation">;</span>
    	proxy_pass http://mall<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    
    error_page   <span class="token number">500</span> <span class="token number">502</span> <span class="token number">503</span> <span class="token number">504</span>  /50x.html<span class="token punctuation">;</span>
    location <span class="token operator">=</span> /50x.html <span class="token punctuation">{</span>
        root   /usr/share/nginx/html<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>成功啦！！！</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220920095909479.png" alt="image-20220920095909479" tabindex="0" loading="lazy"><figcaption>image-20220920095909479</figcaption></figure><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220920092655216.png" alt="image-20220920092655216" tabindex="0" loading="lazy"><figcaption>image-20220920092655216</figcaption></figure><h3 id="nginx动静分离" tabindex="-1"><a class="header-anchor" href="#nginx动静分离" aria-hidden="true">#</a> Nginx动静分离</h3><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220918193624756.png" alt="image-20220918193624756" tabindex="0" loading="lazy"><figcaption>image-20220918193624756</figcaption></figure><p>也就是将所有静态资源放到Nginx上，当请求静态资源的时候由nginx来返回，当请求动态资源才交给tomcat服务器来处理！</p><h2 id="压力测试" tabindex="-1"><a class="header-anchor" href="#压力测试" aria-hidden="true">#</a> 压力测试</h2><p>没调整</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220920103434606.png" alt="image-20220920103434606" tabindex="0" loading="lazy"><figcaption>image-20220920103434606</figcaption></figure><p>跳过了，看不懂，学过JVM再去补习！</p><h2 id="缓存和分布式锁" tabindex="-1"><a class="header-anchor" href="#缓存和分布式锁" aria-hidden="true">#</a> 缓存和分布式锁</h2><h3 id="整合redis测试" tabindex="-1"><a class="header-anchor" href="#整合redis测试" aria-hidden="true">#</a> 整合Redis测试</h3><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Test</span>
<span class="token keyword">void</span> <span class="token function">testRedisTemplate</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">ValueOperations</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span><span class="token class-name">String</span><span class="token punctuation">&gt;</span></span> ops <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//保存数据</span>
    ops<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">,</span><span class="token string">&quot;world&quot;</span><span class="token operator">+</span> <span class="token constant">UUID</span><span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token comment">//查询数据</span>
    <span class="token class-name">String</span> hello <span class="token operator">=</span> ops<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;test&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>hello<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220921142633309.png" alt="image-20220921142633309" tabindex="0" loading="lazy"><figcaption>image-20220921142633309</figcaption></figure><h4 id="给业务中加入缓存" tabindex="-1"><a class="header-anchor" href="#给业务中加入缓存" aria-hidden="true">#</a> 给业务中加入缓存</h4><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220921143907330.png" alt="image-20220921143907330" tabindex="0" loading="lazy"><figcaption>image-20220921143907330</figcaption></figure><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Catelog2Vo</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">getCatalogJson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 1.从缓存中读取分类信息</span>
    <span class="token class-name">String</span> catalogJSON <span class="token operator">=</span> redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&quot;catalogJSON&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token class-name">StringUtils</span><span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span>catalogJSON<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token comment">// 2. 缓存中没有，查询数据库</span>
        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Catelog2Vo</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> catalogJsonFromDB <span class="token operator">=</span> <span class="token function">getCatalogJsonFromDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// 3. 查询到的数据存放到缓存中，将对象转成 JSON 存储</span>
        redisTemplate<span class="token punctuation">.</span><span class="token function">opsForValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&quot;catalogJSON&quot;</span><span class="token punctuation">,</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">toJSONString</span><span class="token punctuation">(</span>catalogJsonFromDB<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token keyword">return</span> catalogJsonFromDB<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
    <span class="token keyword">return</span> <span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>catalogJSON<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">TypeReference</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Map</span><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Catelog2Vo</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token comment">//之前的查询语句</span>
<span class="token keyword">public</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">String</span><span class="token punctuation">,</span> <span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Catelog2Vo</span><span class="token punctuation">&gt;</span><span class="token punctuation">&gt;</span></span> <span class="token function">getCatalogJsonFromDB</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="高并发下缓存失效问题" tabindex="-1"><a class="header-anchor" href="#高并发下缓存失效问题" aria-hidden="true">#</a> 高并发下缓存失效问题</h4><p>又是常见的八股文啦！</p><p><strong>缓存穿透</strong></p><p>查询一个不存在的key，也就是不会经过缓存，请求都发到数据库上了</p><p>如果有人一直发送不存在的key攻击我们的应用，那么就可能导致系统崩溃，业务终止！</p><p>解决方案就是缓存空结果，还要设置短的过期时间</p><p><strong>缓存雪崩</strong></p><p>短时间内设置的缓存全部失效了，导致请求一下全部打到了数据库上，可能导致数据库压力过大引起雪崩！</p><p>解决方案就是在原有的失效时间基础上加上随机值，比如1-10分钟随机，这样就避免了缓存在同一时间内失效，就很难引起集体失效的事件</p><p><strong>缓存击穿</strong></p><p>缓存雪崩是全部key在短时间内同时失效，缓存击穿是短时间内热点key同时失效，那么大量数据又打到数据库上了，数据库也可能发生故障！</p><p>解决方案就是加锁，大量并发只让一个人去查，其他人等待，查到之后呢释放锁并把数据加入缓存，直到其他人获得锁，就会有数据，这样就不会去查数据库了。当然得到锁之后呢还需要在去查下缓存中确定一次，如果没有才去查数据库。</p><h4 id="加锁解决缓存击穿问题" tabindex="-1"><a class="header-anchor" href="#加锁解决缓存击穿问题" aria-hidden="true">#</a> 加锁解决缓存击穿问题</h4><p>这里有个注意点是，<strong>查询完数据之后应该直接把数据加到缓存，而不是释放锁之后再加入缓存</strong>。</p><p>如果是释放锁之后在加进缓存的话，网络如果延迟的话，新的线程已经开始确认有没有缓存了，而上一次查询出的结果还没有加入缓存，这样就会导致查询两次数据库</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220921151340182.png" alt="image-20220921151340182" tabindex="0" loading="lazy"><figcaption>image-20220921151340182</figcaption></figure><h3 id="分布式锁" tabindex="-1"><a class="header-anchor" href="#分布式锁" aria-hidden="true">#</a> 分布式锁</h3><h4 id="什么是分布式锁" tabindex="-1"><a class="header-anchor" href="#什么是分布式锁" aria-hidden="true">#</a> 什么是分布式锁？</h4><blockquote><p>什么是分布式？</p></blockquote><p>分布式就是说你的数据和程序可以不在一台服务器上，把它们分散到多台服务器上，这样就能保证你的程序运行效率！</p><p>但是！任何事都不是绝对的，有好的一面就有坏的一面。效率保证了，那可靠性能不能得到保证呢？</p><p>在分布式的场景中，数据一致性问题一直就是一个比较重要的问题，基于CAP理论，我们要做出取舍，在很多场景下都需要<strong>牺牲一些强一致性来换取系统的HA特性</strong>，系统只需要保证<strong>最终一致</strong>即可！</p><blockquote><p>什么是强一致性？什么是最终一致？</p></blockquote><p>强一致性就是数据修改之后，需要实时同步到数据库。</p><p>最终一致性就是数据修改之后，可以过一段时间在同步，不强调实时。</p><blockquote><p>什么是分布式锁呢？</p></blockquote><p>在分布式的场景下，如果数据只有一份，此时需要利用锁的技术控制修改数据的进程数量。</p><p>常用的分布式锁有Redis、Memcache</p><h4 id="使用-redisson作为分布式锁" tabindex="-1"><a class="header-anchor" href="#使用-redisson作为分布式锁" aria-hidden="true">#</a> 使用 Redisson作为分布式锁</h4>`,54),h={href:"https://github.com/redisson/redisson/wiki",target:"_blank",rel:"noopener noreferrer"},f=e(`<ol><li>引入依赖</li></ol><div class="language-xml line-numbers-mode" data-ext="xml"><pre class="language-xml"><code> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">&gt;</span></span>org.redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">&gt;</span></span>redisson<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">&gt;</span></span>
   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">&gt;</span></span>3.11.1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>配置 redisson</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Configuration</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyRedissonConfig</span> <span class="token punctuation">{</span>
    <span class="token doc-comment comment">/**
     * 所有对 Redisson 的使用都是通过 RedissonClient
     *
     * <span class="token keyword">@return</span>
     * <span class="token keyword">@throws</span> <span class="token reference"><span class="token class-name">IOException</span></span>
     */</span>
    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>destroyMethod <span class="token operator">=</span> <span class="token string">&quot;shutdown&quot;</span><span class="token punctuation">)</span>
    <span class="token keyword">public</span> <span class="token class-name">RedissonClient</span> <span class="token function">redisson</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">IOException</span> <span class="token punctuation">{</span>
        <span class="token comment">// 1、创建配置</span>
        <span class="token class-name">Config</span> config <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// Redis url should start with redis:// or rediss://</span>
        config<span class="token punctuation">.</span><span class="token function">useSingleServer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setAddress</span><span class="token punctuation">(</span><span class="token string">&quot;redis://192.168.163.131:6379&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token comment">// 2、根据 Config 创建出 RedissonClient 实例</span>
        <span class="token keyword">return</span> <span class="token class-name">Redisson</span><span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>config<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="3"><li>使用</li></ol><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token comment">// 1. 获取一把锁</span>
<span class="token class-name">Rlock</span> lock <span class="token operator">=</span> redisson<span class="token punctuation">.</span><span class="token function">getLock</span><span class="token punctuation">(</span><span class="token string">&quot;my-lock&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 2. 加锁, 阻塞式等待</span>
lock<span class="token punctuation">.</span><span class="token function">lock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">try</span> <span class="token punctuation">{</span>
	<span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;加锁成功，执行业务...&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
<span class="token punctuation">}</span> <span class="token keyword">finally</span> <span class="token punctuation">{</span>
	<span class="token comment">// 3. 解锁 假设解锁代码没有运行，Redisson 会出现死锁吗？（不会）</span>
    lock<span class="token punctuation">.</span><span class="token function">unlock</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="springcache" tabindex="-1"><a class="header-anchor" href="#springcache" aria-hidden="true">#</a> SpringCache</h3><p>SpringCache通过更简单的方式给业务加缓存</p><h4 id="引入依赖" tabindex="-1"><a class="header-anchor" href="#引入依赖" aria-hidden="true">#</a> 引入依赖</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;dependency&gt;
  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;
  &lt;artifactId&gt;spring-boot-starter-cache&lt;/artifactId&gt;
&lt;/dependency&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="添加配置" tabindex="-1"><a class="header-anchor" href="#添加配置" aria-hidden="true">#</a> 添加配置</h4><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>spring.cache.type=redis

#spring.cache.cache-names=qq,毫秒为单位
spring.cache.redis.time-to-live=3600000

#如果指定了前缀就用我们指定的前缀，如果没有就默认使用缓存的名字作为前缀
#spring.cache.redis.key-prefix=CACHE_
spring.cache.redis.use-key-prefix=true

#是否缓存空值，防止缓存穿透
spring.cache.redis.cache-null-values=true
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="配置类" tabindex="-1"><a class="header-anchor" href="#配置类" aria-hidden="true">#</a> 配置类</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@EnableConfigurationProperties</span><span class="token punctuation">(</span><span class="token class-name">CacheProperties</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Configuration</span>
<span class="token annotation punctuation">@EnableCaching</span>
<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MyCacheConfig</span> <span class="token punctuation">{</span>

    <span class="token doc-comment comment">/**
     * 配置文件的配置没有用上
     * 1. 原来和配置文件绑定的配置类为：@ConfigurationProperties(prefix = &quot;spring.cache&quot;)
     *                                public class CacheProperties
     * <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">&gt;</span></span>
     * 2. 要让他生效，要加上 @EnableConfigurationProperties(CacheProperties.class)
     */</span>
    <span class="token annotation punctuation">@Bean</span>
    <span class="token keyword">public</span> <span class="token class-name">RedisCacheConfiguration</span> <span class="token function">redisCacheConfiguration</span><span class="token punctuation">(</span><span class="token class-name">CacheProperties</span> cacheProperties<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token class-name">RedisCacheConfiguration</span> config <span class="token operator">=</span> <span class="token class-name">RedisCacheConfiguration</span><span class="token punctuation">.</span><span class="token function">defaultCacheConfig</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">// config = config.entryTtl();</span>
        config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">serializeKeysWith</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializationContext<span class="token punctuation">.</span>SerializationPair</span><span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">StringRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">serializeValuesWith</span><span class="token punctuation">(</span><span class="token class-name">RedisSerializationContext<span class="token punctuation">.</span>SerializationPair</span><span class="token punctuation">.</span><span class="token function">fromSerializer</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">GenericJackson2JsonRedisSerializer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

        <span class="token class-name">CacheProperties<span class="token punctuation">.</span>Redis</span> redisProperties <span class="token operator">=</span> cacheProperties<span class="token punctuation">.</span><span class="token function">getRedis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token comment">//将配置文件中所有的配置都生效</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getTimeToLive</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">entryTtl</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getTimeToLive</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getKeyPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">prefixKeysWith</span><span class="token punctuation">(</span>redisProperties<span class="token punctuation">.</span><span class="token function">getKeyPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>redisProperties<span class="token punctuation">.</span><span class="token function">isCacheNullValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">disableCachingNullValues</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>redisProperties<span class="token punctuation">.</span><span class="token function">isUseKeyPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            config <span class="token operator">=</span> config<span class="token punctuation">.</span><span class="token function">disableKeyPrefix</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">return</span> config<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="常用注解解释" tabindex="-1"><a class="header-anchor" href="#常用注解解释" aria-hidden="true">#</a> 常用注解解释</h4><p>官网也能查到如下：</p><ul><li>@Cacheable ：触发将数据保存到缓存的操作；</li></ul><p>@Cacheable 代表当前方法的结果需要缓存，如果缓存中有，方法都不用调用，如果缓存中没有，会调用方法。最后将方法的结果放入缓存</p><ul><li>@CacheEvict : 触发将数据从缓存删除的操作；</li><li>@CachePut ：不影响方法执行更新缓存；</li><li>@Cacheing：组合以上多个操作；</li><li>@CacheConfig：在类级别共享缓存的相同配置；</li></ul><p>每一个需要缓存的数据我们都来指定要放到那个名字的缓存。【缓存的分区(按照业务类型分)】</p><blockquote><p>默认行为</p></blockquote><ol><li>如果缓存中有，方法不再调用</li><li>key是默认生成的:缓存的名字<code>::SimpleKey::[](自动生成key值)</code>（可以自定义）</li><li>缓存的value值，默认使用jdk序列化机制，将序列化的数据存到redis中(需要配置文件自定义)</li><li>默认时间是 -1：</li></ol><blockquote><p>自定义的操作</p></blockquote><ol><li>指定生成缓存的key：key属性指定，接收一个 SpEl</li><li>指定缓存的数据的存活时间:配置文档中修改存活时间 ttl</li><li>将数据保存为json格式: 自定义配置类 MyCacheManager</li></ol><h4 id="修改业务代码" tabindex="-1"><a class="header-anchor" href="#修改业务代码" aria-hidden="true">#</a> 修改业务代码</h4><div class="language-java line-numbers-mode" data-ext="java"><pre class="language-java"><code><span class="token annotation punctuation">@Cacheable</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">&quot;category&quot;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> key <span class="token operator">=</span> <span class="token string">&quot;#root.method.name&quot;</span><span class="token punctuation">,</span> sync <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span>
<span class="token annotation punctuation">@Override</span>
<span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryEntity</span><span class="token punctuation">&gt;</span></span> <span class="token function">getLevel1Categories</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;get Level 1 Categories........&quot;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">long</span> l <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryEntity</span><span class="token punctuation">&gt;</span></span> categoryEntities <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>baseMapper<span class="token punctuation">.</span><span class="token function">selectList</span><span class="token punctuation">(</span>
            <span class="token keyword">new</span> <span class="token class-name">QueryWrapper</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">CategoryEntity</span><span class="token punctuation">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">eq</span><span class="token punctuation">(</span><span class="token string">&quot;parent_cid&quot;</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">&quot;消耗时间：&quot;</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">return</span> categoryEntities<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="spring-cache的不足之处" tabindex="-1"><a class="header-anchor" href="#spring-cache的不足之处" aria-hidden="true">#</a> Spring-Cache的不足之处</h4><blockquote><p>读模式</p></blockquote><p><strong>缓存穿透</strong></p><p>查询一个不存在的key，也就是不会经过缓存，请求都发到数据库上了</p><p>如果有人一直发送不存在的key攻击我们的应用，那么就可能导致系统崩溃，业务终止！</p><p>解决方案就是缓存空结果，还要设置短的过期时间</p><p><strong>缓存雪崩</strong></p><p>短时间内设置的缓存全部失效了，导致请求一下全部打到了数据库上，可能导致数据库压力过大引起雪崩！</p><p>解决方案就是在原有的失效时间基础上加上随机值，比如1-10分钟随机，这样就避免了缓存在同一时间内失效，就很难引起集体失效的事件</p><p><strong>缓存击穿</strong></p><p>缓存雪崩是全部key在短时间内同时失效，缓存击穿是短时间内热点key同时失效，那么大量数据又打到数据库上了，数据库也可能发生故障！</p><blockquote><p>写模式：（缓存与数据库一致）</p></blockquote><p>读写加锁。</p><p>引入Canal,感知到MySQL的更新去更新Redis</p><p>读多写多，直接去数据库查询就行</p><blockquote><p>总结</p></blockquote><p>常规数据（读多写少，即时性，一致性要求不高的数据，完全可以使用Spring-Cache）：写模式(只要缓存的数据有过期时间就足够了)</p><h2 id="检索服务" tabindex="-1"><a class="header-anchor" href="#检索服务" aria-hidden="true">#</a> 检索服务</h2><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220921224154162.png" alt="image-20220921224154162" tabindex="0" loading="lazy"><figcaption>image-20220921224154162</figcaption></figure><p><strong>清理浏览器缓存</strong></p><h2 id="异步与线程池" tabindex="-1"><a class="header-anchor" href="#异步与线程池" aria-hidden="true">#</a> 异步与线程池</h2><p>社交登录</p><h2 id="商品详情" tabindex="-1"><a class="header-anchor" href="#商品详情" aria-hidden="true">#</a> 商品详情</h2><h2 id="认证服务" tabindex="-1"><a class="header-anchor" href="#认证服务" aria-hidden="true">#</a> 认证服务</h2><p>对于一个请求直接跳转到一个页面，什么都不做的话</p><p>我们可以用SpringMVC中的viewController，将请求和页面映射过来</p>`,52);function y(x,C){const a=i("ExternalLinkIcon");return o(),c("div",null,[u,n("p",null,[n("a",r,[s("https://blog.csdn.net/qq_45714272/article/details/126392539?spm=1001.2014.3001.5502"),t(a)])]),d,n("ul",null,[n("li",null,[n("a",k,[s("访问mall.com"),t(a)])]),m,v,g]),b,n("p",null,[s("官方文档："),n("a",h,[s("https://github.com/redisson/redisson/wiki"),t(a)])]),f])}const _=p(l,[["render",y],["__file","高级篇2.html.vue"]]);export{_ as default};
