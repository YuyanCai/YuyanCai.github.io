const l=JSON.parse('{"key":"v-accab544","path":"/Java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html","title":"设计模式","lang":"en-US","frontmatter":{"title":"设计模式","description":"一、设计模式总览 设计模式是在94年由4个人在一本书中提出来的概念 设计模式最重要的两点： 对接口编程而不是对实现编程; 优先使用对象组合而不是继承; 我们在编写一个功能的时候，提取出一个一个的功能，定义为接口，接口就是标准、规范。之后对接口进行实现，这就是面向接口编程。 面向接口编程真正的威力在于，当别的类需要引用这些功能的时候，我们直接引入接口，之...","head":[["meta",{"property":"og:url","content":"https://vuepress-theme-hope-docs-demo.netlify.app/Java/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F.html"}],["meta",{"property":"og:site_name","content":"小蔡coding"}],["meta",{"property":"og:title","content":"设计模式"}],["meta",{"property":"og:description","content":"一、设计模式总览 设计模式是在94年由4个人在一本书中提出来的概念 设计模式最重要的两点： 对接口编程而不是对实现编程; 优先使用对象组合而不是继承; 我们在编写一个功能的时候，提取出一个一个的功能，定义为接口，接口就是标准、规范。之后对接口进行实现，这就是面向接口编程。 面向接口编程真正的威力在于，当别的类需要引用这些功能的时候，我们直接引入接口，之..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:updated_time","content":"2022-12-31T12:07:23.000Z"}],["meta",{"property":"og:locale","content":"en-US"}],["meta",{"property":"article:modified_time","content":"2022-12-31T12:07:23.000Z"}]]},"headers":[{"level":2,"title":"一、设计模式总览","slug":"一、设计模式总览","link":"#一、设计模式总览","children":[{"level":3,"title":"设计模式的基石","slug":"设计模式的基石","link":"#设计模式的基石","children":[]},{"level":3,"title":"设计模式总览","slug":"设计模式总览","link":"#设计模式总览","children":[]},{"level":3,"title":"理解设计模式的三种分类","slug":"理解设计模式的三种分类","link":"#理解设计模式的三种分类","children":[]}]},{"level":2,"title":"二、UML类图","slug":"二、uml类图","link":"#二、uml类图","children":[{"level":3,"title":"类图中具体类、抽象、接口和包的表示法","slug":"类图中具体类、抽象、接口和包的表示法","link":"#类图中具体类、抽象、接口和包的表示法","children":[]},{"level":3,"title":"在类图中表示关系","slug":"在类图中表示关系","link":"#在类图中表示关系","children":[]}]},{"level":2,"title":"三、设计模式7大原则","slug":"三、设计模式7大原则","link":"#三、设计模式7大原则","children":[{"level":3,"title":"开闭原则（OCP）","slug":"开闭原则-ocp","link":"#开闭原则-ocp","children":[]},{"level":3,"title":"里氏替换原则（LSP）","slug":"里氏替换原则-lsp","link":"#里氏替换原则-lsp","children":[]},{"level":3,"title":"依赖倒置原则（DIP ）","slug":"依赖倒置原则-dip","link":"#依赖倒置原则-dip","children":[]},{"level":3,"title":"单一职责（SRP)","slug":"单一职责-srp","link":"#单一职责-srp","children":[]},{"level":3,"title":"接口隔离原则（ISP）","slug":"接口隔离原则-isp","link":"#接口隔离原则-isp","children":[]},{"level":3,"title":"迪米特法则（LOD）","slug":"迪米特法则-lod","link":"#迪米特法则-lod","children":[]},{"level":3,"title":"合成复用原则（CRP）","slug":"合成复用原则-crp","link":"#合成复用原则-crp","children":[]}]},{"level":2,"title":"四、创建型模式","slug":"四、创建型模式","link":"#四、创建型模式","children":[{"level":3,"title":"为什么使用创建型模式","slug":"为什么使用创建型模式","link":"#为什么使用创建型模式","children":[]},{"level":3,"title":"1.单例模式","slug":"_1-单例模式","link":"#_1-单例模式","children":[]},{"level":3,"title":"2.原型模式","slug":"_2-原型模式","link":"#_2-原型模式","children":[]},{"level":3,"title":"3.简单工厂","slug":"_3-简单工厂","link":"#_3-简单工厂","children":[]},{"level":3,"title":"4.工厂方法(Factory Method)","slug":"_4-工厂方法-factory-method","link":"#_4-工厂方法-factory-method","children":[]},{"level":3,"title":"5.抽象工厂(Abstract Factory)","slug":"_5-抽象工厂-abstract-factory","link":"#_5-抽象工厂-abstract-factory","children":[]},{"level":3,"title":"6.建造者","slug":"_6-建造者","link":"#_6-建造者","children":[]}]},{"level":2,"title":"五、结构型模式","slug":"五、结构型模式","link":"#五、结构型模式","children":[{"level":3,"title":"7.适配器","slug":"_7-适配器","link":"#_7-适配器","children":[]},{"level":3,"title":"8.装饰器","slug":"_8-装饰器","link":"#_8-装饰器","children":[]},{"level":3,"title":"9.代理模式","slug":"_9-代理模式","link":"#_9-代理模式","children":[]},{"level":3,"title":"10.外观模式","slug":"_10-外观模式","link":"#_10-外观模式","children":[]},{"level":3,"title":"11.组合模式","slug":"_11-组合模式","link":"#_11-组合模式","children":[]},{"level":3,"title":"12.享元模式","slug":"_12-享元模式","link":"#_12-享元模式","children":[]},{"level":3,"title":"13.桥接","slug":"_13-桥接","link":"#_13-桥接","children":[]}]},{"level":2,"title":"六、行为模式","slug":"六、行为模式","link":"#六、行为模式","children":[{"level":3,"title":"模板方法","slug":"模板方法","link":"#模板方法","children":[]},{"level":3,"title":"策略模式","slug":"策略模式","link":"#策略模式","children":[]},{"level":3,"title":"状态模式","slug":"状态模式","link":"#状态模式","children":[]},{"level":3,"title":"中介者模式","slug":"中介者模式","link":"#中介者模式","children":[]},{"level":3,"title":"观察者模式","slug":"观察者模式","link":"#观察者模式","children":[]},{"level":3,"title":"备忘录模式","slug":"备忘录模式","link":"#备忘录模式","children":[]},{"level":3,"title":"解释器模式","slug":"解释器模式","link":"#解释器模式","children":[]},{"level":3,"title":"命令模式","slug":"命令模式","link":"#命令模式","children":[]},{"level":3,"title":"迭代器模式","slug":"迭代器模式","link":"#迭代器模式","children":[]},{"level":3,"title":"访问者模式","slug":"访问者模式","link":"#访问者模式","children":[]},{"level":3,"title":"简单责任链模式","slug":"简单责任链模式","link":"#简单责任链模式","children":[]}]},{"level":2,"title":"七、参考文章","slug":"七、参考文章","link":"#七、参考文章","children":[]}],"git":{"createdTime":1672488443000,"updatedTime":1672488443000,"contributors":[{"name":"xiaocai","email":"mildcaq@163.com","commits":1}]},"readingTime":{"minutes":58.35,"words":17504},"filePathRelative":"Java/设计模式/设计模式.md","localizedDate":"December 31, 2022","autoDesc":true}');export{l as data};
