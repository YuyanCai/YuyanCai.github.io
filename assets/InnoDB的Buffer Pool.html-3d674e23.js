import{ac as s,F as l,G as i,D as o,R as e,M as a,ad as r,V as d}from"./framework-f12b30cc.js";const t={},f=r(`<h1 id="九、innodb的buffer-pool" tabindex="-1"><a class="header-anchor" href="#九、innodb的buffer-pool" aria-hidden="true">#</a> 九、InnoDB的Buffer Pool</h1><h2 id="缓存的重要性" tabindex="-1"><a class="header-anchor" href="#缓存的重要性" aria-hidden="true">#</a> 缓存的重要性</h2><p><strong>即使我们只需要访问一个页的一条记录，那也需要先把整个页的数据加载到内存中</strong>。将整个页加载到内存中后就可以进行 读写访问了，<strong>在进行完读写访问之后并不着急把该页对应的内存空间释放掉，而是将其 缓存 起来，这样将来有 请求再次访问该页面时，就可以省去磁盘 IO 的开销了。</strong></p><h2 id="innodb的buffer-pool" tabindex="-1"><a class="header-anchor" href="#innodb的buffer-pool" aria-hidden="true">#</a> InnoDB的Buffer Pool</h2><h3 id="buffer-pool" tabindex="-1"><a class="header-anchor" href="#buffer-pool" aria-hidden="true">#</a> Buffer Pool</h3><p>设计 InnoDB 的大叔为了缓存磁盘中的页，在 <strong>MySQL 服务器启动的时候就向操作系统申请了一片连续的内存</strong>，他 们给这片内存起了个名，叫做 <strong>Buffer Pool （中文名是 缓冲池 ）</strong>。那它有多大呢？这个其实看我们机器的配 置，如果你是土豪，你有 512G 内存，你分配个几百G作为 Buffer Pool 也可以啊，当然你要是没那么有钱，设 置小点也行呀～ 默认情况下 Buffer Pool 只有 128M 大小。当然如果你嫌弃这个 128M 太大或者太小，可以在启 动服务器的时候配置 <code>innodb_buffer_pool_size</code> 参数的值，它表示 Buffer Pool 的大小，就像这样：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token punctuation">[</span>server<span class="token punctuation">]</span>
innodb_buffer_pool_size <span class="token operator">=</span> <span class="token number">268435456</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>其中， <code>268435456</code> 的单位是字节，也就是我指定<code> Buffer Pool</code> 的大小为 256M 。需要注意的是，<code>Buffer Pool</code>也 不能太小，最小值为 5M (当小于该值时会自动设置成 5M )。</p><h2 id="buffer-pool内部组成" tabindex="-1"><a class="header-anchor" href="#buffer-pool内部组成" aria-hidden="true">#</a> Buffer Pool内部组成</h2><p><code>Buffer Pool </code><strong>中默认的缓存页大小和在磁盘上默认的页大小是一样的</strong>，都是 <code>16KB</code> 。为了更好的管理这些在 Buffer Pool 中的缓存页，设计 InnoDB 的大叔为每一个缓存页都创建了一些所谓的 控制信息 ，这些控制信息 包括该页所属的表空间编号、页号、缓存页在 Buffer Pool 中的地址、链表节点信息、一些锁信息以及 LSN 信息</p><p>每个缓存页对应的控制信息占用的内存大小是相同的，我们就把每个页对应的控制信息占用的一块内存称为一个 控制块 吧，<strong>控制块和缓存页是一一对应的，它们都被存放到 Buffer Pool 中，其中控制块被存放到 Buffer Pool 的前边，缓存页被存放到 Buffer Pool 后边</strong>，所以整个 Buffer Pool 对应的内存空间看起来就是这样的：</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220919093717787.png" alt="image-20220919093717787" tabindex="0" loading="lazy"><figcaption>image-20220919093717787</figcaption></figure><p>咦？控制块和缓存页之间的那个 碎片 是个什么玩意儿？你想想啊，每一个控制块都对应一个缓存页，那在分配 足够多的控制块和缓存页后，可能剩余的那点儿空间不够一对控制块和缓存页的大小，自然就用不到喽，这个用 不到的那点儿内存空间就被称为 碎片 了。当然，如果你把 Buffer Pool 的大小设置的刚刚好的话，也可能不会 产生 碎片 ～</p><blockquote><p>小贴士： 每个控制块大约占用缓存页大小的5%，在MySQL5.7.21这个版本中，每个控制块占用的大小是808字节。 而我们设置的innodb_buffer_pool_size并不包含这部分控制块占用的内存空间大小，也就是说InnoDB 在为Buffer Pool向操作系统申请连续的内存空间时，这片连续的内存空间一般会比innodb_buffer_poo l_size的值大5%左右。</p></blockquote><h3 id="free链表的管理" tabindex="-1"><a class="header-anchor" href="#free链表的管理" aria-hidden="true">#</a> free链表的管理</h3><p>我们最初启动 MySQL 服务器的时候，需要完成对 Buffer Pool 的初始化过程，就是先向操作系统申请 Buffer Pool 的内存空间，然后把它划分成若干对控制块和缓存页。但是此时并没有真实的磁盘页被缓存到 Buffer Pool 中（因为还没有用到），之后随着程序的运行，会不断的有磁盘上的页被缓存到 Buffer Pool 中。那么问 题来了，从磁盘上读取一个页到 Buffer Pool 中的时候该放到哪个缓存页的位置呢？或者说怎么区分 Buffer Pool 中哪些缓存页是空闲的，哪些已经被使用了呢？<strong>我们最好在某个地方记录一下Buffer Pool中哪些缓存页是可 用的</strong>，这个时候缓存页对应的 控制块 就派上大用场了，我们可以<strong>把所有空闲的缓存页对应的控制块作为一个节 点放到一个链表中</strong>，<code>这个链表也可以被称作 free链表 </code>（或者说空闲链表）。刚刚完成初始化的 Buffer Pool 中 所有的缓存页都是空闲的，所以每一个缓存页对应的控制块都会被加入到 free链表 中，假设该 Buffer Pool 中 可容纳的缓存页数量为 n ，那增加了 free链表 的效果图就是这样的：</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220919095844941.png" alt="image-20220919095844941" tabindex="0" loading="lazy"><figcaption>image-20220919095844941</figcaption></figure><p>从图中可以看出，我们为了管理好这个 <code>free</code>链表 ，特意为这个链表定义了一个 基节点 ，里边儿包含着链表的头 节点地址，尾节点地址，以及当前链表中节点的数量等信息。这里需要注意的是，链表的基节点占用的内存空间 并不包含在为 <code>Buffer Pool </code>申请的一大片连续内存空间之内，而是单独申请的一块内存空间。</p><p>有了这个<code> free链表</code> 之后事儿就好办了，每当需要从磁盘中加载一个页到 <code>Buffer Pool </code>中时，就从 free链表 中 取一个空闲的缓存页，并且把该缓存页对应的 控制块 的信息填上（就是该页所在的表空间、页号之类的信 息），然后把该缓存页对应的 free链表 节点从链表中移除，表示该缓存页已经被使用了～</p><h3 id="缓存页的哈希处理" tabindex="-1"><a class="header-anchor" href="#缓存页的哈希处理" aria-hidden="true">#</a> 缓存页的哈希处理</h3><p>我们前边说过，当我们需要访问某个页中的数据时，就会把该页从磁盘加载到 Buffer Pool 中，如果该页已经 在 Buffer Pool 中的话直接使用就可以了。那么问题也就来了，我们怎么知道该页在不在 Buffer Pool 中呢？难 不成需要依次遍历 Buffer Pool 中各个缓存页么？一个 Buffer Pool 中的缓存页这么多都遍历完岂不是要累死？</p><p>再回头想想，我们其实是根据 <code>表空间号 + 页号 </code>来定位一个页的，也就相当于 <code>表空间号 + 页号 </code>是一个<code> key</code> ， 缓存页 就是对应的 value ，怎么通过一个 key 来快速找着一个 value 呢？哈哈，那肯定是哈希表喽～</p><p>回头想想，我们其实是根据 表空间号 + 页号 来定位一个页的，也就相当于 表空间号 + 页号 是一个 key ， 缓存页 就是对应的 value ，怎么通过一个 key 来快速找着一个 value 呢？哈哈，那肯定是哈希表喽～</p><p>所以我们可以用 表空间号 + 页号 作为 key ， 缓存页 作为 value 创建一个哈希表，在需要访问某个页的数据 时，先从哈希表中根据 表空间号 + 页号 看看有没有对应的缓存页，如果有，直接使用该缓存页就好，如果没 有，那就从 free链表 中选一个空闲的缓存页，然后把磁盘中对应的页加载到该缓存页的位置。</p>`,24),c=o("strong",null,"散列表",-1),p=o("strong",null,"Hash table",-1),u=o("strong",null,"哈希表",-1),g={href:"https://zh.wikipedia.org/wiki/%E9%8D%B5",target:"_blank",rel:"noopener noreferrer"},h={href:"https://zh.wikipedia.org/wiki/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84",target:"_blank",rel:"noopener noreferrer"},B={href:"https://zh.wikipedia.org/wiki/%E6%98%A0%E5%B0%84",target:"_blank",rel:"noopener noreferrer"},b={href:"https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0",target:"_blank",rel:"noopener noreferrer"},P=o("strong",null,"散列表",-1),m=r(`<h3 id="flush链表的管理" tabindex="-1"><a class="header-anchor" href="#flush链表的管理" aria-hidden="true">#</a> flush链表的管理</h3><p>如果我们修改了 Buffer Pool 中某个缓存页的数据，那它就和磁盘上的页<strong>不一致</strong>了，这样的缓存页也被称为 脏 页 （英文名： dirty page ）。当然，最简单的做法就是每发生一次修改就<strong>立即同步</strong>到磁盘上对应的页上，但是 频繁的往磁盘中写数据会严重的影响程序的性能（毕竟磁盘慢的像乌龟一样）。所以每次修改缓存页后，我们并 不着急立即把修改同步到磁盘上，而是在未来的某个时间点进行同步</p><p>但是如果不立即同步到磁盘的话，那之后再同步的时候我们怎么知道 <code>Buffer Pool </code>中哪些页是<code> 脏页</code> ，哪些页从 来没被修改过呢？总不能把所有的缓存页都同步到磁盘上吧，假如 <code>Buffer Pool </code>被设置的很大，比方说<code> 300G</code> ， 那一次性同步这么多数据岂不是要慢死！所以，我们不得不再创建一个存储脏页的链表，凡是修改过的缓存页对 应的控制块都会作为一个节点加入到一个链表中，因为这个链表节点对应的缓存页都是需要被刷新到磁盘上的， 所以也叫<code> flush</code>链表 。链表的构造和<code> free链表</code> 差不多，假设某个时间点 <code>Buffer Pool </code>中的脏页数量为 n ，那么 对应的<code> flush链表</code> 就长这样：</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220919101458649.png" alt="image-20220919101458649" tabindex="0" loading="lazy"><figcaption>image-20220919101458649</figcaption></figure><h3 id="lru链表的管理" tabindex="-1"><a class="header-anchor" href="#lru链表的管理" aria-hidden="true">#</a> LRU链表的管理</h3><h4 id="缓存不够的窘境" tabindex="-1"><a class="header-anchor" href="#缓存不够的窘境" aria-hidden="true">#</a> 缓存不够的窘境</h4><p><code>Buffer Pool </code>对应的内存大小毕竟是有限的，如果需要缓存的页占用的内存大小超过了 Buffer Pool 大小，也就 是 free链表 中已经没有多余的空闲缓存页的时候岂不是很尴尬，发生了这样的事儿该咋办？当然是<strong>把某些旧的 缓存页从 Buffer Pool 中移除</strong>，然后再把新的页放进来喽～ 那么问题来了，<strong>移除哪些缓存页呢？</strong></p><p>为了回答这个问题，我们还需要回到我们设立 Buffer Pool 的初衷，我们就是想减少和磁盘的 IO 交互，最好每 次在访问某个页的时候它都已经被缓存到 Buffer Pool 中了。假设我们一共访问了 n 次页，那么被访问的页已经 在缓存中的次数除以 n 就是所谓的 缓存命中率 ，<strong>我们的期望就是让 缓存命中率 越高越好～</strong>那也就是说<strong>留下缓存命中率高的缓冲页！</strong></p><h4 id="简单的lru链表" tabindex="-1"><a class="header-anchor" href="#简单的lru链表" aria-hidden="true">#</a> 简单的LRU链表</h4><p>管理 Buffer Pool 的缓存页其实也是这个道理，当 Buffer Pool 中不再有空闲的缓存页时，就需要淘汰掉部分最 近很少使用的缓存页。不过，我们怎么知道哪些缓存页最近频繁使用，哪些最近很少使用呢？呵呵，神奇的链表 再一次派上了用场，我们可以再创建一个链表，由于<strong>这个链表是为了 按照最近最少使用 的原则去淘汰缓存页 的，所以这个链表可以被称为 LRU链表</strong> （LRU的英文全称：Least Recently Used，最近最少使用的）。当我们需要访问某个页时， 可以这样处理 LRU链表 ：</p><ul><li>如果该页不在 Buffer Pool 中，在把该页从磁盘加载到 Buffer Pool 中的缓存页时，就把该缓存页对应的 控制块 作为节点塞到链表的头部。</li><li>如果该页已经缓存在 Buffer Pool 中，则直接把该页对应的 控制块 移动到 LRU链表 的头部</li></ul><p>也就是说：<strong>只要我们使用到某个缓存页，就把该缓存页调整到 LRU链表 的头部，这样 LRU链表 尾部就是最近最少 使用的缓存页喽～</strong> 所以<strong>当 Buffer Pool 中的空闲缓存页使用完时，到 LRU链表 的尾部找些缓存页淘汰就OK啦</strong></p><h4 id="划分区域的lru链表" tabindex="-1"><a class="header-anchor" href="#划分区域的lru链表" aria-hidden="true">#</a> 划分区域的LRU链表</h4><p>上边的这个简单的 LRU链表 用了没多长时间就发现问题了，因为存在这两种比较尴尬的情况：</p><p><strong>情况一</strong>： InnoDB 提供了一个看起来比较贴心的服务—— 预读 （英文名： read ahead ）。所谓 预读 ，就 是 InnoDB 认为执行当前的请求可能之后会读取某些页面，就预先把它们加载到 Buffer Pool 中。根据触发 方式的不同， 预读 又可以细分为下边两种：</p><ul><li>线性预读</li></ul><p>设计 InnoDB 的大叔提供了一个系统变量 innodb_read_ahead_threshold ，如果顺序访问了某个区 （ extent ）的页面超过这个系统变量的值，就会触发一次 异步 读取下一个区中全部的页面到 Buffer Pool 的请求</p><ul><li>随机预读</li></ul><p>如果<code>Buffer Pool</code>中已经缓存了某个区的13个连续的页面，不论这些页面是不是顺序读取的，都会触发 一次 异步 读取本区中所有其的页面到 <code>Buffer Pool</code> 的请求</p><p><code>预读 </code>本来是个好事儿，如果预读到 Buffer Pool 中的页成功的被使用到，那就可以极大的提高语句执 行的效率。可是如果用不到呢？这些预读的页都会放到 LRU 链表的头部，但是如果此时 Buffer Pool 的 容量不太大而且很多预读的页面都没有用到的话，这就会导致处在 LRU链表 尾部的一些缓存页会很快的 被淘汰掉，也就是所谓的 劣币驱逐良币 ，<strong>会大大降低缓存命中率。</strong></p><p><strong>情况二</strong>：有的小伙伴可能会写一些需要扫描全表的查询语句（比如没有建立合适的索引或者压根儿没有 WHERE子句的查询）。</p><p>扫描全表意味着什么？意味着将访问到该表所在的所有页！假设这个表中记录非常多的话，那该表会占用特 别多的 <code>页 </code>，当需要访问这些页时，会把它们统统都加载到 Buffer Pool 中，这也就意味着吧唧一下， <code>Buffer Pool </code>中的所有页都被换了一次血，其他查询语句在执行时又得执行一次从磁盘加载到 Buffer Pool 的操作。而这种全表扫描的语句执行的频率也不高，每次执行都要把 Buffer Pool 中的缓存页换一次血，这 严重的影响到其他查询对 Buffer Pool 的使用，从而<strong>大大降低了缓存命中率</strong>。</p><p>总结一下上边说的可能降低 Buffer Pool 的两种情况：</p><ul><li><p><strong>加载到 Buffer Pool 中的页不一定被用到。</strong></p></li><li><p><strong>如果非常多的使用频率偏低的页被同时加载到 Buffer Pool 时，可能会把那些使用频率非常高的页从 Buffer Pool 中淘汰掉。</strong></p></li></ul><p>因为有这两种情况的存在，所以设计 InnoDB 的大叔把这个 LRU链表 按照一定比例分成两截，分别是：</p><ul><li>一部分存储使用频率非常高的缓存页，所以这一部分链表也叫做 <code>热数据 </code>，或者称 <code>young区域 </code>。</li><li>另一部分存储使用频率不是很高的缓存页，所以这一部分链表也叫做 <code>冷数据</code> ，或者称 <code>old区域 </code>。</li></ul><p>为了方便大家理解，我们把示意图做了简化，各位领会精神就好：</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220919103628419.png" alt="image-20220919103628419" tabindex="0" loading="lazy"><figcaption>image-20220919103628419</figcaption></figure><p><strong>我们是按照某个比例将LRU链表分成两半的，不是某些节点固定是young区域的，某 些节点固定是old区域的，随着程序的运行，某个节点所属的区域也可能发生变化</strong></p><p>有了这个被划分成 young 和 old 区域的 LRU 链表之后，设计 InnoDB 的大叔就可以针对我们上边提到的两种可能 降低缓存命中率的情况进行优化了：</p><ul><li>针对预读的页面可能不进行后续访情况的优化</li></ul><p>设计 InnoDB 的大叔规定，**当磁盘上的某个页面在初次加载到Buffer Pool中的某个缓存页时，该缓存页对应 的控制块会被放到old区域的头部。**这样针对预读到 Buffer Pool 却不进行后续访问的页面就会被逐渐从 old 区域逐出，而不会影响 young 区域中被使用比较频繁的缓存页</p><ul><li>针对全表扫描时，短时间内访问大量使用频率非常低的页面情况的优化</li></ul><p>在进行全表扫描时，虽然首次被加载到 Buffer Pool 的页被放到了 old 区域的头部，但是后续会被马上访问 到，每次进行访问的时候又会把该页放到 young 区域的头部，这样仍然会把那些使用频率比较高的页面给顶 下去。</p><p>以我们只需要规定，<strong>在对某个处在 old 区域的缓存页进行第一次访问时就在它对应的控制块中 记录下来这个访问时间，如果后续的访问时间与第一次访问的时间在某个时间间隔内，那么该页面就不会被 从old区域移动到young区域的头部，否则将它移动到young区域的头部</strong></p><p>上述的这个间隔时间是由系统变量 innodb_old_blocks_time 控制</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">SHOW</span> VARIABLES <span class="token operator">LIKE</span> <span class="token string">&#39;innodb_old_blocks_time&#39;</span><span class="token punctuation">;</span>
<span class="token operator">+</span><span class="token comment">------------------------+-------+</span>
<span class="token operator">|</span> Variable_name <span class="token operator">|</span> <span class="token keyword">Value</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------------------------+-------+</span>
<span class="token operator">|</span> innodb_old_blocks_time <span class="token operator">|</span> <span class="token number">1000</span> <span class="token operator">|</span>
<span class="token operator">+</span><span class="token comment">------------------------+-------+</span>
<span class="token number">1</span> <span class="token keyword">row</span> <span class="token operator">in</span> <span class="token keyword">set</span> <span class="token punctuation">(</span><span class="token number">0.01</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>综上所述，<strong>正是因为将 LRU 链表划分为 young 和 old 区域这两个部分，又添加了 innodb_old_blocks_time 这个 系统变量</strong>，才使得<code>预读机制</code>和<code>全表扫描</code>造成的缓存命中率降低的问题得到了遏制，因为用不到的预读页面以及全 表扫描的页面都只会被放到 old 区域，而不影响 young 区域中的缓存页。</p><h3 id="其他的一些链表" tabindex="-1"><a class="header-anchor" href="#其他的一些链表" aria-hidden="true">#</a> 其他的一些链表</h3><p>为了更好的管理 Buffer Pool 中的缓存页，除了我们上边提到的一些措施，设计 InnoDB 的大叔们还引进了其他 的一些 链表 ，比如<code> unzip LRU</code>链表 <strong>用于管理解压页</strong>，<code>zip clean链表</code>用于管理<strong>没有被解压的压缩页</strong>， <code>zip free数组 </code>中每一个元素都代表一个链表，它们组成所谓的 伙伴系统 来为压缩页提供内存空间等等，反正是为了 更好的管理这个 Buffer Pool 引入了各种链表或其他数据结构</p><h3 id="刷新脏页到磁盘" tabindex="-1"><a class="header-anchor" href="#刷新脏页到磁盘" aria-hidden="true">#</a> 刷新脏页到磁盘</h3><p>后台有专门的线程每隔一段时间负责把脏页刷新到磁盘，这样可以不影响用户线程处理正常的请求。主要有两种 刷新路径：</p><ul><li>从<code>LRU链表</code>的冷数据中刷新一部分页面到磁盘。</li></ul><p>后台线程会定时从<code>LRU链表</code>尾部开始扫描一些页面，扫描的页面数量可以通过系统变量 innodb_lru_scan_depth 来指定，如果从里边儿发现脏页，会把它们刷新到磁盘。这种刷新页面的方式被称 之为 BUF_FLUSH_LRU 。</p><ul><li>从 <code>flush链表</code> 中刷新一部分页面到磁盘。</li></ul><p>后台线程也会定时从<code>flush链表</code>中刷新一部分页面到磁盘，刷新的速率取决于当时系统是不是很繁忙。这种 刷新页面的方式被称之为 <code>BUF_FLUSH_LIST </code>。</p><p>有时候后台线程刷新脏页的进度比较慢，导致用户线程在准备加载一个磁盘页到 Buffer Pool 时没有可用的缓存 页，这时就会尝试看看 LRU链表 尾部有没有可以直接释放掉的未修改页面，如果没有的话会不得不将 LRU链表 尾 部的一个脏页同步刷新到磁盘（和磁盘交互是很慢的，这会降低处理用户请求的速度）。这种刷新单个页面到磁 盘中的刷新方式被称之为 <strong>BUF_FLUSH_SINGLE_PAGE 。</strong></p><h3 id="多个buffer-pool实例" tabindex="-1"><a class="header-anchor" href="#多个buffer-pool实例" aria-hidden="true">#</a> 多个Buffer Pool实例</h3><p>我们上边说过，<code> Buffer Pool</code> 本质是 <strong>InnoDB 向操作系统申请的一块连续的内存空间</strong>，在多线程环境下，访问 Buffer Pool 中的各种链表都需要加锁处理啥的，在 Buffer Pool 特别大而且多线程并发访问特别高的情况下， <strong>单一的 Buffer Pool 可能会影响请求的处理速度。所以在 Buffer Pool 特别大的时候，我们可以把它们拆分成若 干个小的 Buffer Pool ，每个 Buffer Pool 都称为一个 实例 ，它们都是独立的</strong>，独立的去申请内存空间，独立 的管理各种链表</p><p>所以在多线程并发访问时并不会相互影响，从而提高并发处理能力。我们可 以在服务器启动的时候通过设置 innodb_buffer_pool_instances 的值来修改 Buffer Pool 实例的个数，比方说 这样：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>[server]
innodb_buffer_pool_instances = 2
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>这样就表明我们要创建2个 Buffer Pool 实例，示意图就是这样：</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220919105802549.png" alt="image-20220919105802549" tabindex="0" loading="lazy"><figcaption>image-20220919105802549</figcaption></figure><h3 id="buffer-pool中存储的其它信息" tabindex="-1"><a class="header-anchor" href="#buffer-pool中存储的其它信息" aria-hidden="true">#</a> Buffer Pool中存储的其它信息</h3><p>Buffer Pool 的缓存页除了用来缓存磁盘上的页面以外，还可以存储锁信息、自适应哈希索引等信息，后面再说~</p><h3 id="查看buffer-pool的状态信息" tabindex="-1"><a class="header-anchor" href="#查看buffer-pool的状态信息" aria-hidden="true">#</a> 查看Buffer Pool的状态信息</h3><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> <span class="token keyword">ENGINE</span> <span class="token keyword">INNODB</span> <span class="token keyword">STATUS</span>\\G
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220919110711720.png" alt="image-20220919110711720" tabindex="0" loading="lazy"><figcaption>image-20220919110711720</figcaption></figure><ul><li><p>Pending writes LRU ：即将从 LRU 链表中刷新到磁盘中的页面数量。</p></li><li><p>Pending writes flush list ：即将从 flush 链表中刷新到磁盘中的页面数量。</p></li><li><p>Pending writes single page ：即将以单个页面的形式刷新到磁盘中的页面数量。</p></li><li><p>Pages made young ：代表 LRU 链表中曾经从 old 区域移动到 young 区域头部的节点数量。</p></li></ul><p>这里需要注意，一个节点每次只有从 old 区域移动到 young 区域头部时才会将 Pages made young 的值加 1，也就是说如果该节点本来就在 young 区域，由于它符合在 young 区域1/4后边的要求，下一次访问这个页 面时也会将它移动到 young 区域头部，但这个过程并不会导致 Pages made young 的值加1。</p><ul><li>not young ：在将 innodb_old_blocks_time 设置的值大于0时，首次访问或者后续访问某个处 在 old 区域的节点时由于不符合时间间隔的限制而不能将其移动到 young 区域头部时， Page made not young 的值会加1。</li></ul><p>...</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ol><li>磁盘太慢，用内存作为缓存很有必要！</li><li>BufferPool本质上是InnoDB向操作系统申请的一段连续的内存空间，可以通过Innodb_buffer_pool_size来调整它的大小</li><li>BufferPool向操作系统申请的连续内存由<strong>控制块和缓存页</strong>组成，每个控制块和缓冲页都是一一对应的，在填充足够多的控制块和缓存页的组合后，BufferPool剩余的空间可能不够填充一组控制块和缓存页，这部分空间不能被使用，也被称为<code>碎片</code></li><li>InnoDB使用了许多链表来管理BufferPool</li><li>free链表记录空闲的缓存页，将磁盘中的页加载到BufferPool时，会从free链表中寻找空闲的缓存页</li><li>为了快速定位某个页是否被加载到<code>BufferPool</code>,使用表空间+页号作为key，缓存页作为value建立哈希表</li><li>flush链表记录脏页，脏页并不是立即刷新，而是被加到flush链表中，待之后的某个时刻同步到磁盘上</li><li>LRU链表它是为了解决<strong>当缓存页用完的时候需要剔一些不常用的缓存数据页</strong>，留下缓存命中率高的缓存页！只要我们使用到某个缓存页，就把该缓存页调整到 LRU链表 的头部也就是LRU链表的young部分，这样 LRU链表 尾部也就是old部分就是最近最少使用的缓存页所以当 Buffer Pool 中的空闲缓存页使用完时，到 LRU链表 的尾部找些缓存页淘汰就OK啦</li><li>我们可以通过指定 innodb_buffer_pool_instances 来控制 Buffer Pool 实例的个数，每个 Buffer Pool 实 例中都有各自独立的链表，互不干扰。</li><li>可以用下边的命令查看 Buffer Pool 的状态信息：</li></ol><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code><span class="token keyword">SHOW</span> <span class="token keyword">ENGINE</span> <span class="token keyword">INNODB</span> <span class="token keyword">STATUS</span>\\G
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h1 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h1>`,66);function _(k,y){const n=d("ExternalLinkIcon");return l(),i("div",null,[f,o("blockquote",null,[o("p",null,[c,e("（"),p,e("，也叫"),u,e("），是根据"),o("a",g,[e("键"),a(n)]),e("（Key）而直接访问在内存储存位置的"),o("a",h,[e("数据结构"),a(n)]),e("。也就是说，它通过计算出一个键值的函数，将所需查询的数据"),o("a",B,[e("映射"),a(n)]),e("到表中一个位置来让人访问，这加快了查找速度。这个映射函数称做"),o("a",b,[e("散列函数"),a(n)]),e("，存放记录的数组称做"),P,e("。")])]),m])}const L=s(t,[["render",_],["__file","InnoDB的Buffer Pool.html.vue"]]);export{L as default};
