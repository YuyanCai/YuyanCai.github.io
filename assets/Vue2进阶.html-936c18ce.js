import{ac as i,F as p,G as o,D as a,R as n,M as e,ad as t,V as c}from"./framework-f12b30cc.js";const l={},r=t(`<h1 id="五、生命周期-数据共享" tabindex="-1"><a class="header-anchor" href="#五、生命周期-数据共享" aria-hidden="true">#</a> 五、生命周期&amp;数据共享</h1><h2 id="生命周期-生命周期函数" tabindex="-1"><a class="header-anchor" href="#生命周期-生命周期函数" aria-hidden="true">#</a> 生命周期 &amp; 生命周期函数</h2><p><code>生命周期</code>（Life Cycle）是指一个组件从<strong>创建 -&gt; 运行 -&gt; 销毁</strong>的整个阶段，<strong>强调的是一个<code>时间段</code>。</strong></p><p><code>生命周期函数</code>：是由 vue 框架提供的内置函数，会伴随着组件的生命周期，自动按次序执行。</p><p>注意：<strong>生命周期强调的是时间段，生命周期函数强调的是时间点。</strong></p><h2 id="组件生命周期函数的分类" tabindex="-1"><a class="header-anchor" href="#组件生命周期函数的分类" aria-hidden="true">#</a> 组件生命周期函数的分类</h2><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221118072616877.png" alt="image-20221118072616877" tabindex="0" loading="lazy"><figcaption>image-20221118072616877</figcaption></figure><h2 id="生命周期详解" tabindex="-1"><a class="header-anchor" href="#生命周期详解" aria-hidden="true">#</a> 生命周期详解</h2><h3 id="简洁版本" tabindex="-1"><a class="header-anchor" href="#简洁版本" aria-hidden="true">#</a> 简洁版本</h3><p><strong>回调函数</strong>是你留个处理方法给事件，事件发生了以后会自动执行你留下调处理方法</p><p><strong>钩子函数</strong>是好比找了个代理，监视事件是否发生，如果发生了这个代理就执行你的事件处理方法；在这个过程中，代理就是钩子函数</p><p>在某种意义上，回调函数做的处理过程跟钩子函数中要调用调方法一样 但是有一点： 钩子函数一般是由事件发生者提供的。直白了说，它留下一个钩子，这个钩子的作用就是钩住你的回调方法</p><blockquote><p>==钩子函数是在一个事件触发的时候，在系统级捕获到了他，然后做一些操作。==一段用以处理系统消息的程序，用以处理系统消息的程序，是说钩子函数是用于处理系统消息的</p></blockquote><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/11370083-f279314aef6741db.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h3 id="详细版本" tabindex="-1"><a class="header-anchor" href="#详细版本" aria-hidden="true">#</a> 详细版本</h3><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/lifecycle.png" alt="lifecycle" tabindex="0" loading="lazy"><figcaption>lifecycle</figcaption></figure><h3 id="最重要的三个阶段" tabindex="-1"><a class="header-anchor" href="#最重要的三个阶段" aria-hidden="true">#</a> 最重要的三个阶段</h3><ul><li><p>created</p><p><strong><code>组件的 porps/data/methods已创建好，都处于可用的状态。</code>但是组件的模板结构尚未生成！</strong></p></li><li><p>mounted</p><p><strong>已经把内存中的 HTML 结构，成功的渲染到了浏览器之中。<code>此时浏览器中己然包含了当前组件的 DOM 结构。</code></strong></p></li><li><p>update</p><p><strong>组件的最新数据,可以操作<code>最新的DOM</code>结构</strong></p></li></ul><h2 id="组件之间的关系" tabindex="-1"><a class="header-anchor" href="#组件之间的关系" aria-hidden="true">#</a> 组件之间的关系</h2><p>在项目开发中，组件之间的最常见的关系分为如下两种：</p><p>① 父子关系</p><p>② 兄弟关系</p><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221118083359316.png" alt="image-20221118083359316" tabindex="0" loading="lazy"><figcaption>image-20221118083359316</figcaption></figure><h3 id="父子组件之间的数据共享" tabindex="-1"><a class="header-anchor" href="#父子组件之间的数据共享" aria-hidden="true">#</a> 父子组件之间的数据共享</h3><p>父子组件之间的数据共享又分为：</p><p>① 父 -&gt; 子共享数据</p><p>② 子 -&gt; 父共享数据</p><h4 id="父组件向子组件共享数据" tabindex="-1"><a class="header-anchor" href="#父组件向子组件共享数据" aria-hidden="true">#</a> 父组件向子组件共享数据</h4><p>父组件向子组件共享数据需要使用自定义属性</p><p>如下:</p><blockquote><p>父组件</p></blockquote><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Vue logo<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./assets/logo.png<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>HelloWorld</span> <span class="token attr-name">msg</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>Welcome to Your Vue.js App<span class="token punctuation">&quot;</span></span><span class="token punctuation">/&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Left</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Left</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Right</span> <span class="token attr-name">:username</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>userinfo</span> <span class="token attr-name">:passwd</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>passwd</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Right</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">import</span> HelloWorld <span class="token keyword">from</span> <span class="token string">&#39;./components/HelloWorld.vue&#39;</span>
<span class="token keyword">import</span> Left <span class="token keyword">from</span> <span class="token string">&quot;@/components/Left&quot;</span><span class="token punctuation">;</span>
<span class="token keyword">import</span> Right <span class="token keyword">from</span> <span class="token string">&quot;@/components/Right&quot;</span><span class="token punctuation">;</span>

<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;App&#39;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    HelloWorld<span class="token punctuation">,</span>
    Left<span class="token punctuation">,</span>
    Right
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
  <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">userinfo</span><span class="token operator">:</span> <span class="token punctuation">{</span><span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;zs&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">age</span><span class="token operator">:</span> <span class="token number">12</span><span class="token punctuation">}</span><span class="token punctuation">,</span>
      <span class="token literal-property property">passwd</span><span class="token operator">:</span> <span class="token number">123</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
<span class="token selector">#app</span> <span class="token punctuation">{</span>
  <span class="token property">font-family</span><span class="token punctuation">:</span> Avenir<span class="token punctuation">,</span> Helvetica<span class="token punctuation">,</span> Arial<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span>
  <span class="token property">-webkit-font-smoothing</span><span class="token punctuation">:</span> antialiased<span class="token punctuation">;</span>
  <span class="token property">-moz-osx-font-smoothing</span><span class="token punctuation">:</span> grayscale<span class="token punctuation">;</span>
  <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>
  <span class="token property">color</span><span class="token punctuation">:</span> #2c3e50<span class="token punctuation">;</span>
  <span class="token property">margin-top</span><span class="token punctuation">:</span> 60px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>

<span class="token selector">.box</span> <span class="token punctuation">{</span>
  <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>子组件</p></blockquote><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>

  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>rightContainer<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>
      我是right
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>

    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>您的姓名是:{{username}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>您的密码是:{{passwd}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>


<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&quot;Right&quot;</span><span class="token punctuation">,</span>
  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;username&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;passwd&#39;</span><span class="token punctuation">]</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span> <span class="token attr-name">scoped</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
<span class="token selector">.rightContainer</span> <span class="token punctuation">{</span>
  <span class="token property">background-color</span><span class="token punctuation">:</span> aquamarine<span class="token punctuation">;</span>
  <span class="token property">flex</span><span class="token punctuation">:</span> 1<span class="token punctuation">;</span>
  <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="子组件向父组件共享数据" tabindex="-1"><a class="header-anchor" href="#子组件向父组件共享数据" aria-hidden="true">#</a> 子组件向父组件共享数据</h4><p><strong>子组件向父组件共享数据使用自定义事件。</strong></p><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221118101743108.png" alt="image-20221118101743108" tabindex="0" loading="lazy"><figcaption>image-20221118101743108</figcaption></figure><p>如下：</p><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221118102521747.png" alt="image-20221118102521747" tabindex="0" loading="lazy"><figcaption>image-20221118102521747</figcaption></figure><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221118102135369.png" alt="image-20221118102135369" tabindex="0" loading="lazy"><figcaption>image-20221118102135369</figcaption></figure><h3 id="兄弟组件之间的数据共享" tabindex="-1"><a class="header-anchor" href="#兄弟组件之间的数据共享" aria-hidden="true">#</a> 兄弟组件之间的数据共享</h3><p>在 vue2.x 中，兄弟组件之间数据共享的方案是 EventBus</p><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221118103529647.png" alt="image-20221118103529647" tabindex="0" loading="lazy"><figcaption>image-20221118103529647</figcaption></figure><blockquote><p>EventBus 的使用步骤</p></blockquote><ol><li>创建 eventBus.js 模块，并向外共享一个 Vue 的实例对象</li><li>在数据发送方，调用 bus.$emit(&#39;事件名称&#39;, 要发送的数据) 方法触发自定义事件</li><li>在数据接收方，调用 bus.$on(&#39;事件名称&#39;, 事件处理函数) 方法注册一个自定义事件</li></ol><h2 id="ref-引用" tabindex="-1"><a class="header-anchor" href="#ref-引用" aria-hidden="true">#</a> ref 引用</h2><p>ref 用来辅助开发者在不依赖于 jQuery 的情况下，获取 DOM 元素或组件的引用。</p><p>每个 vue 的组件实例上，都包含一个 $refs 对象，里面存储着对应的 DOM 元素或组件的引用。默认情况下，组件的 $refs 指向一个空对象。</p><h3 id="什么是-ref-引用" tabindex="-1"><a class="header-anchor" href="#什么是-ref-引用" aria-hidden="true">#</a> 什么是 ref 引用</h3><p>ref 用来辅助开发者在<strong>不依赖于 jQuery 的情况下</strong>，<strong>获取 DOM 元素或组件的引用。</strong></p><p>每个 vue 的组件实例上，都包含一个 <code>$refs</code> 对象，里面存储着对应的 DOM 元素或组件的引用。默认情况下，</p><p><strong>组件的 $refs 指向一个空对象。</strong></p><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221118114026831.png" alt="image-20221118114026831" tabindex="0" loading="lazy"><figcaption>image-20221118114026831</figcaption></figure><h3 id="使用-ref-引用-dom-元素" tabindex="-1"><a class="header-anchor" href="#使用-ref-引用-dom-元素" aria-hidden="true">#</a> 使用 ref 引用 DOM 元素</h3><p>如果想要使用 ref 引用页面上的 DOM 元素，则可以按照如下的方式进行操作：</p><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221118114121487.png" alt="image-20221118114121487" tabindex="0" loading="lazy"><figcaption>image-20221118114121487</figcaption></figure><h3 id="使用-ref-引用组件实例" tabindex="-1"><a class="header-anchor" href="#使用-ref-引用组件实例" aria-hidden="true">#</a> 使用 ref 引用组件实例</h3><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221118114137863.png" alt="image-20221118114137863" tabindex="0" loading="lazy"><figcaption>image-20221118114137863</figcaption></figure><h3 id="控制文本框和按钮的按需切换" tabindex="-1"><a class="header-anchor" href="#控制文本框和按钮的按需切换" aria-hidden="true">#</a> 控制文本框和按钮的按需切换</h3><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221118114709005.png" alt="image-20221118114709005" tabindex="0" loading="lazy"><figcaption>image-20221118114709005</figcaption></figure><blockquote><p>让文本框自动获得焦点</p></blockquote><p>当文本框展示出来之后，如果希望它立即获得焦点，则可以为其添加 ref 引用，并调用原生 DOM 对象的 .focus() 方法即可。示例代码如下：</p><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221118114802704.png" alt="image-20221118114802704" tabindex="0" loading="lazy"><figcaption>image-20221118114802704</figcaption></figure><h3 id="this-nexttick-cb-方法" tabindex="-1"><a class="header-anchor" href="#this-nexttick-cb-方法" aria-hidden="true">#</a> this.$nextTick(cb) 方法</h3><p>组件的 $nextTick(cb) 方法，会把 cb 回调推迟到下一个 DOM 更新周期之后执行。通俗的理解是：等组件的 DOM 更新完成之后，再执行 cb 回调函数。从而能保证 cb 回调函数可以操作到最新的 DOM 元素。</p><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221118143829921.png" alt="image-20221118143829921" tabindex="0" loading="lazy"><figcaption>image-20221118143829921</figcaption></figure><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221118143842473.png" alt="image-20221118143842473" tabindex="0" loading="lazy"><figcaption>image-20221118143842473</figcaption></figure><h2 id="数组中的方法" tabindex="-1"><a class="header-anchor" href="#数组中的方法" aria-hidden="true">#</a> 数组中的方法</h2><h3 id="some循环" tabindex="-1"><a class="header-anchor" href="#some循环" aria-hidden="true">#</a> some循环</h3><ul><li>简单来说some循环就是遇到终止条件可以停止继续寻找</li><li>foreach即使遇到终止条件也会继续寻找</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>en<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>Title<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;詹姆斯&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;科比&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;2届MVP得主库里&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;1.5&#39;</span><span class="token punctuation">]</span>

    arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;ok&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">===</span> <span class="token string">&#39;2届MVP得主库里&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;arr.some使用效果如下:&#39;</span><span class="token punctuation">)</span>

    arr<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;ok&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>item <span class="token operator">===</span> <span class="token string">&#39;2届MVP得主库里&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>
            <span class="token keyword">return</span> <span class="token boolean">true</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221118145828031.png" alt="image-20221118145828031" tabindex="0" loading="lazy"><figcaption>image-20221118145828031</figcaption></figure><h3 id="foreach循环" tabindex="-1"><a class="header-anchor" href="#foreach循环" aria-hidden="true">#</a> foreach循环</h3><p><strong>foreach就是循环每一项,some是循环到满足条件就停下来</strong></p><h3 id="every循环" tabindex="-1"><a class="header-anchor" href="#every循环" aria-hidden="true">#</a> every循环</h3><p><strong>判断数组中的数据是否被全选了使用every循环</strong></p><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221118150334089.png" alt="image-20221118150334089" tabindex="0" loading="lazy"><figcaption>image-20221118150334089</figcaption></figure><h3 id="reduce的基本用法" tabindex="-1"><a class="header-anchor" href="#reduce的基本用法" aria-hidden="true">#</a> reduce的基本用法</h3><blockquote><p>不用reduce计算总和</p></blockquote><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221118150529758.png" alt="image-20221118150529758" tabindex="0" loading="lazy"><figcaption>image-20221118150529758</figcaption></figure><blockquote><p>用reduce计算总和</p></blockquote><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221118150948771.png" alt="image-20221118150948771" tabindex="0" loading="lazy"><figcaption>image-20221118150948771</figcaption></figure><blockquote><p>reduce的简化写法</p></blockquote><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221118151333626.png" alt="image-20221118151333626" tabindex="0" loading="lazy"><figcaption>image-20221118151333626</figcaption></figure><h2 id="购物车案例" tabindex="-1"><a class="header-anchor" href="#购物车案例" aria-hidden="true">#</a> 购物车案例</h2><h3 id="导入-注册-使用组件" tabindex="-1"><a class="header-anchor" href="#导入-注册-使用组件" aria-hidden="true">#</a> 导入,注册,使用组件</h3><p>这里的组件是写好的,我们直接导入,注册,使用</p><blockquote><p>Tips:</p></blockquote><ul><li>导入的组件名称一般都给它设置为首字母大写.这样和普通标签能有一个区分</li></ul><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221119163139000.png" alt="image-20221119163139000" tabindex="0" loading="lazy"><figcaption>image-20221119163139000</figcaption></figure><h3 id="基于axios请求列表数据" tabindex="-1"><a class="header-anchor" href="#基于axios请求列表数据" aria-hidden="true">#</a> 基于axios请求列表数据</h3><blockquote><p>axios是对ajax的封装,向后端发送请求就用它</p><p>这里是先定义一个封装请求列表数据的方法,然后在vue的created的生命周期阶段调用</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token function">created</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initCartList</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token comment">//封装请求列表数据的方法</span>
  <span class="token keyword">async</span> <span class="token function">initCartList</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">//调用axios的get方法,请求列表数据</span>
    <span class="token keyword">const</span> <span class="token punctuation">{</span><span class="token literal-property property">data</span><span class="token operator">:</span> res<span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token keyword">await</span> axios<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;https://www.escook.cn/api/cart&#39;</span><span class="token punctuation">)</span>
    <span class="token comment">// 只要请求回来的数据,在页面渲染期间要用到,则必须转存到data里</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>list <span class="token operator">=</span> res<span class="token punctuation">.</span>list
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这里的await是用来<code>解构赋值</code>的它一般和async联合使用</p><blockquote><p>那么<code>解构赋值</code>是什么呢?</p></blockquote><p>就是前段通过axios向后端发送请求之后,后端返回的数据会先经过axios进行一次封装,不能直接拿到真实数据</p><p>如下:</p><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221119171748440-20221120201618310.png" alt="image-20221119171748440" tabindex="0" loading="lazy"><figcaption>image-20221119171748440</figcaption></figure><p>所以为了直接拿到真实数据,<strong>我们需要解构,从回复的数据中取出真实数据</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>{{data:res}}这是啥意思呢?
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><code>axios</code>返回的是一个<code>Promise</code>对象,在<strong>Promise对象中并不是服务器返回的结果,而是axios对服务器返回的结果又进行了一次封装</strong>,如下:</p><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221119172253294.png" alt="image-20221119172253294" tabindex="0" loading="lazy"><figcaption>image-20221119172253294</figcaption></figure><p><strong>通过<code>{{data:res}}</code>意思就是取出Promise对象中的data区域数据,并把名字<code>重命名为res</code></strong></p><h3 id="渲染goods组件" tabindex="-1"><a class="header-anchor" href="#渲染goods组件" aria-hidden="true">#</a> 渲染Goods组件</h3><blockquote><p>1.商品数据其实就是一个个Goods组件</p></blockquote><p>导入,注册,使用组件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>Goods<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Goods<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>2.给组件赋值,这里通过v-for来实现</p></blockquote><p>首先看看请求到的结果</p><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221120093440652.png" alt="image-20221120093440652" tabindex="0" loading="lazy"><figcaption>image-20221120093440652</figcaption></figure><p>list数组里不就是如下一个个的对象吗,然后赋值的时候通过对象.属性即可取得对应的值</p><p>这里的:key,:id,:title等都是为子组件的自定义属性,父组件向子组件传递数据就是通过自定义属性来进行传递的</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span>    这里为啥一直要写v<span class="token operator">-</span>bind呢因为在等号后面我们写的是js表达式<span class="token punctuation">,</span>如果不写v<span class="token operator">-</span>bind则相当于我们传给它了一个字符串<span class="token operator">!</span><span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>Goods
    v<span class="token operator">-</span><span class="token keyword">for</span><span class="token operator">=</span><span class="token string">&quot;item in list&quot;</span>
    <span class="token operator">:</span>key<span class="token operator">=</span><span class="token string">&quot;item.id&quot;</span>
    <span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">&quot;item.id&quot;</span>
    <span class="token operator">:</span>title<span class="token operator">=</span><span class="token string">&quot;item.goods_name&quot;</span>
    <span class="token operator">:</span>img<span class="token operator">=</span><span class="token string">&quot;item.goods_img&quot;</span>
    <span class="token operator">:</span>price<span class="token operator">=</span><span class="token string">&quot;item.goods_price&quot;</span>
    <span class="token operator">:</span>state<span class="token operator">=</span><span class="token string">&quot;item.goods_state &quot;</span>
<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>Goods<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>3.修改商品的勾选状态</p></blockquote><p>修改商品的勾选状态为<code>子组件向父组件</code><strong>共享数据</strong></p><p>通过自定义事件来实现</p><blockquote><p>3.1 在子组件中为复选框绑定自定义事件</p></blockquote><p>复选框状态每发生一次改变就会触发自定义事件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;checkbox&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;custom-control-input&quot;</span> <span class="token operator">:</span>id<span class="token operator">=</span><span class="token string">&quot;&#39;cb&#39; + id&quot;</span> <span class="token operator">:</span>checked<span class="token operator">=</span><span class="token string">&quot;state&quot;</span>
       @change<span class="token operator">=</span><span class="token string">&quot;stateChange&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>3.2 在子组件中自定义事件如下</p></blockquote><p>自定义时间名字为<code>state-change</code>,传递给父组件的数据为<code>id和value</code></p><ul><li>id表示当前商品</li><li>value表示最新的勾选状态</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token function">stateChange</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// console.log(e)</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>checked<span class="token punctuation">)</span>
    <span class="token keyword">const</span> newState <span class="token operator">=</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>checked
    <span class="token comment">// 触发自定义事件</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;state-change&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span><span class="token literal-property property">id</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token literal-property property">value</span><span class="token operator">:</span> newState<span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>3.3 父组件绑定自定义事件</p></blockquote><p>通过参数e来接受子组件传来的数据</p><p>通过some循环找到改变状态的子组件判断的条件是id,找到之后给组件的状态赋值为子组件传来的真实数据</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>Goods @state<span class="token operator">-</span>change<span class="token operator">=</span><span class="token string">&quot;getNewState&quot;</span><span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Goods<span class="token operator">&gt;</span>
<span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">getNewState</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">some</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>id <span class="token operator">===</span> e<span class="token punctuation">.</span>id<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          item<span class="token punctuation">.</span>goods_state <span class="token operator">=</span> e<span class="token punctuation">.</span>value
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="渲染footer组件" tabindex="-1"><a class="header-anchor" href="#渲染footer组件" aria-hidden="true">#</a> 渲染Footer组件</h3><blockquote><p>引入footer组件</p></blockquote><p>footer组件做二件事:</p><ul><li>全选</li><li>计算总价</li></ul><p>全选为<code>子组件向父组件</code><strong>共享数据</strong> =&gt; 自定义事件</p><p>计算总价为<code>父组件向子组件</code><strong>共享数据</strong> =&gt; 自定义属性</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>Footer
    <span class="token operator">:</span>is<span class="token operator">-</span>full<span class="token operator">=</span><span class="token string">&quot;fullState&quot;</span>
    @fullChange<span class="token operator">=</span><span class="token string">&quot;getFullState&quot;</span>
    <span class="token operator">:</span>total<span class="token operator">-</span>prices<span class="token operator">=</span><span class="token string">&quot;amt&quot;</span>
<span class="token operator">&gt;</span><span class="token operator">&lt;</span><span class="token operator">/</span>Footer<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>全选功能的实现</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">//子组件</span>
<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">&quot;checkbox&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;custom-control-input&quot;</span> id<span class="token operator">=</span><span class="token string">&quot;cbFull&quot;</span> <span class="token operator">:</span>checked<span class="token operator">=</span><span class="token string">&quot;isFull&quot;</span> @change<span class="token operator">=</span><span class="token string">&quot;fullChange&quot;</span><span class="token operator">/</span><span class="token operator">&gt;</span>

  <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token function">fullChange</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token comment">// console.log(e.target.checked)</span>
      <span class="token comment">// 触发自定义事件</span>
      <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">$emit</span><span class="token punctuation">(</span><span class="token string">&#39;fullChange&#39;</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>checked<span class="token punctuation">)</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span>


<span class="token comment">// 动态计算全选的状态是true还是false</span>
<span class="token function">fullState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>goods_state<span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
  
<span class="token comment">//父组件</span>
  <span class="token comment">// 动态计算全选的状态是true还是false</span>
  <span class="token function">fullState</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list<span class="token punctuation">.</span><span class="token function">every</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>goods_state<span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>计算总价功能的实现</p></blockquote><p>子组件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token literal-property property">isFull</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">type</span><span class="token operator">:</span> Boolean<span class="token punctuation">,</span>
      <span class="token keyword">default</span><span class="token operator">:</span> <span class="token boolean">true</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">totalPrices</span><span class="token operator">:</span> <span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span> Number<span class="token punctuation">,</span>
        <span class="token keyword">default</span><span class="token operator">:</span> <span class="token number">0</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>

<span class="token operator">&lt;</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>span<span class="token operator">&gt;</span>合计：<span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>span <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;total-price&quot;</span><span class="token operator">&gt;</span>￥<span class="token punctuation">{</span><span class="token punctuation">{</span> totalPrices<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>span<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 结算按钮 <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">&quot;button&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;btn btn-primary btn-settle&quot;</span><span class="token operator">&gt;</span>结算（<span class="token punctuation">{</span><span class="token punctuation">{</span> totalPrices<span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">}</span><span class="token punctuation">}</span>）<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>父组件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token comment">//总价格</span>
  <span class="token function">amt</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// 先filter过滤,在reduce累加</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list
        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>goods_state<span class="token punctuation">)</span>
        <span class="token comment">//只有一行的箭头函数,可以省略return和{}花括号</span>
        <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">total<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>
            <span class="token punctuation">(</span>total <span class="token operator">+=</span> item<span class="token punctuation">.</span>goods_price <span class="token operator">*</span> item<span class="token punctuation">.</span>goods_count<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>购买数量实现</p></blockquote><p>和计算总价实现一个思路</p><ul><li>从集合中过滤出选中的商品</li><li>取得选中商品的数量</li></ul><p>取得数量之后,还需要和子组件共享数据,所以就用自定义属性来传递数据</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
  <span class="token comment">//总数量</span>
  <span class="token function">totalQuantity</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>list
        <span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token parameter">item</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>goods_state<span class="token punctuation">)</span>
        <span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">total<span class="token punctuation">,</span> item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>total <span class="token operator">+=</span> item<span class="token punctuation">.</span>goods_count<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>子组件</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 结算按钮 <span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>button type<span class="token operator">=</span><span class="token string">&quot;button&quot;</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;btn btn-primary btn-settle&quot;</span><span class="token operator">&gt;</span>结算（<span class="token punctuation">{</span><span class="token punctuation">{</span> totalNum<span class="token punctuation">}</span><span class="token punctuation">}</span>）<span class="token operator">&lt;</span><span class="token operator">/</span>button<span class="token operator">&gt;</span>

  <span class="token literal-property property">props</span><span class="token operator">:</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">totalNum</span><span class="token operator">:</span><span class="token punctuation">{</span>
      <span class="token literal-property property">type</span><span class="token operator">:</span>Number<span class="token punctuation">,</span>
      <span class="token keyword">default</span><span class="token operator">:</span><span class="token number">0</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">,</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h1 id="六、动态组件-插槽-自定义指令-axios" tabindex="-1"><a class="header-anchor" href="#六、动态组件-插槽-自定义指令-axios" aria-hidden="true">#</a> 六、动态组件&amp;插槽&amp;自定义指令&amp;axios</h1><h2 id="动态组件" tabindex="-1"><a class="header-anchor" href="#动态组件" aria-hidden="true">#</a> 动态组件</h2><h3 id="什么是动态组件" tabindex="-1"><a class="header-anchor" href="#什么是动态组件" aria-hidden="true">#</a> 什么是动态组件</h3><p>动态组件指的是动态切换<strong>组件的显示与隐藏</strong></p><h3 id="如何实现动态组件渲染" tabindex="-1"><a class="header-anchor" href="#如何实现动态组件渲染" aria-hidden="true">#</a> 如何实现动态组件渲染</h3><p>vue 提供了一个内置的 组件，专门用来实现动态组件的渲染。示例代码如下：<img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221120194223304.png" alt="image-20221120194223304" loading="lazy"></p><h3 id="使用-keep-alive-保持状态" tabindex="-1"><a class="header-anchor" href="#使用-keep-alive-保持状态" aria-hidden="true">#</a> 使用 keep-alive 保持状态</h3><p>默认情况下，切换动态组件时无法保持组件的状态。此时可以使用 vue 内置的 组件保持动态组 件的状态。示例代码如下：</p><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221120194246584.png" alt="image-20221120194246584" tabindex="0" loading="lazy"><figcaption>image-20221120194246584</figcaption></figure><h3 id="keep-alive-对应的生命周期函数" tabindex="-1"><a class="header-anchor" href="#keep-alive-对应的生命周期函数" aria-hidden="true">#</a> keep-alive 对应的生命周期函数</h3><p>当组件<code>被缓存</code>时，会自动触发组件的 <code>deactivated</code> 生命周期函数。</p><p>当组件<code>被激活</code>时，会自动触发组件的 <code>activated </code>生命周期函数。</p><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221120194329705.png" alt="image-20221120194329705" tabindex="0" loading="lazy"><figcaption>image-20221120194329705</figcaption></figure><h3 id="keep-alive-的-include-属性" tabindex="-1"><a class="header-anchor" href="#keep-alive-的-include-属性" aria-hidden="true">#</a> keep-alive 的 include 属性</h3><p>include 属性用来指定：只有名称匹配的组件会被缓存。多个组件名之间使用英文的逗号分隔:</p><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221120194346399.png" alt="image-20221120194346399" tabindex="0" loading="lazy"><figcaption>image-20221120194346399</figcaption></figure><h2 id="插槽" tabindex="-1"><a class="header-anchor" href="#插槽" aria-hidden="true">#</a> 插槽</h2><p><code>插槽（Slot）</code>是 vue 为<code>组件的封装者</code>提供的能力。允许开发者在封装组件时，把不确定的、希望由用户指定的 部分定义为插槽。</p><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221120194532307.png" alt="image-20221120194532307" tabindex="0" loading="lazy"><figcaption>image-20221120194532307</figcaption></figure><p>可以把插槽认为是组件封装期间，为用户预留的内容的占位符。</p><h3 id="体验插槽的基础用法" tabindex="-1"><a class="header-anchor" href="#体验插槽的基础用法" aria-hidden="true">#</a> 体验插槽的基础用法</h3><p>在封装组件时，可以通过 元素定义插槽，从而为用户预留内容占位符。示例代码如下：</p><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221120194635365.png" alt="image-20221120194635365" tabindex="0" loading="lazy"><figcaption>image-20221120194635365</figcaption></figure><blockquote><p>vue 官方规定：每一个 slot 插槽，都要有一个 name 名称--； 如果省略了 slot 的 name 属性，则有一个默认名称叫做 default</p><p><strong><code>v-slot只能放在组件上和template上,放在其他上面会报错</code></strong></p></blockquote><p>默认情况下，在使用组件的时候，提供的内容都会被填充到名字为default 的插槽之中</p><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221120200200258.png" alt="image-20221120200200258" tabindex="0" loading="lazy"><figcaption>image-20221120200200258</figcaption></figure><h4 id="为具名插槽提供内容" tabindex="-1"><a class="header-anchor" href="#为具名插槽提供内容" aria-hidden="true">#</a> 为具名插槽提供内容</h4><p>在向具名插槽提供内容的时候，我们可以在一个<code> &lt;template&gt;(包裹作用)</code> 元素上使用 v-slot 指令，并以 v-slot 的参数的形式提供其名称。示例代码如下:</p><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221120200451005.png" alt="image-20221120200451005" tabindex="0" loading="lazy"><figcaption>image-20221120200451005</figcaption></figure><h4 id="具名插槽的简写形式" tabindex="-1"><a class="header-anchor" href="#具名插槽的简写形式" aria-hidden="true">#</a> 具名插槽的简写形式</h4><p>跟 v-on 和 v-bind 一样，v-slot 也有缩写，即把参数之前的所有内容 (v-slot:) 替换为字符 #。</p><p>例如 <code>v-slot:header </code>可以被重写为<code> #header：</code></p><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221120200547696.png" alt="image-20221120200547696" tabindex="0" loading="lazy"><figcaption>image-20221120200547696</figcaption></figure><h3 id="作用域插槽" tabindex="-1"><a class="header-anchor" href="#作用域插槽" aria-hidden="true">#</a> 作用域插槽</h3><p>在封装组件的过程中，可以为预留的插槽绑定 props 数据，这种带有 props 数据的 叫做作用 <code>域插槽</code>。</p><p>示例代码如下：</p><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221120201822789.png" alt="image-20221120201822789" tabindex="0" loading="lazy"><figcaption>image-20221120201822789</figcaption></figure><h4 id="使用作用域插槽" tabindex="-1"><a class="header-anchor" href="#使用作用域插槽" aria-hidden="true">#</a> 使用作用域插槽</h4><p>可以使用 v-slot: 的形式，接收作用域插槽对外提供的数据。示例代码如下：</p><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221120202402592.png" alt="image-20221120202402592" tabindex="0" loading="lazy"><figcaption>image-20221120202402592</figcaption></figure><blockquote><p>实例</p></blockquote><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221120203040876.png" alt="image-20221120203040876" tabindex="0" loading="lazy"><figcaption>image-20221120203040876</figcaption></figure><h4 id="解构插槽-prop" tabindex="-1"><a class="header-anchor" href="#解构插槽-prop" aria-hidden="true">#</a> 解构插槽 Prop</h4><p>作用域插槽对外提供的数据对象，可以使用解构赋值简化数据的接收过程。</p><p>示例代码如下：</p><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221120202640156.png" alt="image-20221120202640156" tabindex="0" loading="lazy"><figcaption>image-20221120202640156</figcaption></figure><blockquote><p>实例</p></blockquote><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221120203414937.png" alt="image-20221120203414937" tabindex="0" loading="lazy"><figcaption>image-20221120203414937</figcaption></figure><h2 id="自定义指令" tabindex="-1"><a class="header-anchor" href="#自定义指令" aria-hidden="true">#</a> 自定义指令</h2><h3 id="什么是自定义指令" tabindex="-1"><a class="header-anchor" href="#什么是自定义指令" aria-hidden="true">#</a> 什么是自定义指令</h3><p>vue 官方提供了 v-text、v-for、v-model、v-if 等常用的指令。除此之外 vue 还允许开发者自定义指令。</p><h3 id="自定义指令的分类" tabindex="-1"><a class="header-anchor" href="#自定义指令的分类" aria-hidden="true">#</a> 自定义指令的分类</h3><p>vue 中的自定义指令分为两类，分别是：</p><ul><li><p>私有自定义指令</p></li><li><p>全局自定义指令</p></li></ul><h3 id="私有自定义指令" tabindex="-1"><a class="header-anchor" href="#私有自定义指令" aria-hidden="true">#</a> 私有自定义指令</h3><p>在每个 vue 组件中，可以在 directives 节点下声明私有自定义指令。示例代码如下：</p><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221120204949304.png" alt="image-20221120204949304" tabindex="0" loading="lazy"><figcaption>image-20221120204949304</figcaption></figure><h3 id="使用自定义指令" tabindex="-1"><a class="header-anchor" href="#使用自定义指令" aria-hidden="true">#</a> 使用自定义指令</h3><p>在使用自定义指令时，需要加上 v- 前缀。示例代码如下</p><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221120204724614.png" alt="image-20221120204724614" tabindex="0" loading="lazy"><figcaption>image-20221120204724614</figcaption></figure><h3 id="为自定义指令动态绑定参数值" tabindex="-1"><a class="header-anchor" href="#为自定义指令动态绑定参数值" aria-hidden="true">#</a> 为自定义指令动态绑定参数值</h3><p>为自定义指令动态绑定参数值</p><p>在 template 结构中使用自定义指令时，可以通过等号（=）的方式，为当前指令动态绑定参数值：</p><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221120205114156.png" alt="image-20221120205114156" tabindex="0" loading="lazy"><figcaption>image-20221120205114156</figcaption></figure><h3 id="通过-binding-获取指令的参数值" tabindex="-1"><a class="header-anchor" href="#通过-binding-获取指令的参数值" aria-hidden="true">#</a> 通过 binding 获取指令的参数值</h3><p>在声明自定义指令时，可以通过形参中的第二个参数，来接收指令的参数值：</p><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221120205143256.png" alt="image-20221120205143256" tabindex="0" loading="lazy"><figcaption>image-20221120205143256</figcaption></figure><h3 id="update-函数" tabindex="-1"><a class="header-anchor" href="#update-函数" aria-hidden="true">#</a> update 函数</h3><p>bind 函数只调用 1 次：当指令第一次绑定到元素时调用，当 DOM 更新时 bind 函数不会被触发。 update 函 数会在每次 DOM 更新时被调用。示例代码如下：</p><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221120205222590.png" alt="image-20221120205222590" tabindex="0" loading="lazy"><figcaption>image-20221120205222590</figcaption></figure><h3 id="函数简写" tabindex="-1"><a class="header-anchor" href="#函数简写" aria-hidden="true">#</a> 函数简写</h3><p>如果 insert 和update 函数中的逻辑完全相同，则对象格式的自定义指令可以简写成函数格式：</p><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221120205243275.png" alt="image-20221120205243275" tabindex="0" loading="lazy"><figcaption>image-20221120205243275</figcaption></figure><h3 id="全局自定义指令" tabindex="-1"><a class="header-anchor" href="#全局自定义指令" aria-hidden="true">#</a> 全局自定义指令</h3><p>全局共享的自定义指令需要通过“Vue.directive()”进行声明</p><p>示例代码如下：</p><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221120205317529.png" alt="image-20221120205317529" tabindex="0" loading="lazy"><figcaption>image-20221120205317529</figcaption></figure><h2 id="把axios挂载到vue原型上" tabindex="-1"><a class="header-anchor" href="#把axios挂载到vue原型上" aria-hidden="true">#</a> 把axios挂载到vue原型上</h2><p><strong>缺点是无法对api接口实现复用!</strong></p><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/noteimage-20221202144907847.png" alt="image-20221202144907847" tabindex="0" loading="lazy"><figcaption>image-20221202144907847</figcaption></figure>`,228),u=a("p",null,[a("strong",null,[n("在其他组件上直接通过this."),a("span",{class:"katex"},[a("span",{class:"katex-mathml"},[a("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[a("semantics",null,[a("mrow",null,[a("mi",null,"h"),a("mi",null,"t"),a("mi",null,"t"),a("mi",null,"p"),a("mi",{mathvariant:"normal"},"."),a("mi",null,"g"),a("mi",null,"e"),a("mi",null,"t"),a("mtext",null,"或者"),a("mi",null,"t"),a("mi",null,"h"),a("mi",null,"i"),a("mi",null,"s"),a("mi",{mathvariant:"normal"},".")]),a("annotation",{encoding:"application/x-tex"},"http.get或者this.")])])]),a("span",{class:"katex-html","aria-hidden":"true"},[a("span",{class:"base"},[a("span",{class:"strut",style:{height:"0.8889em","vertical-align":"-0.1944em"}}),a("span",{class:"mord mathnormal"},"h"),a("span",{class:"mord mathnormal"},"ttp"),a("span",{class:"mord"},"."),a("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"g"),a("span",{class:"mord mathnormal"},"e"),a("span",{class:"mord mathnormal"},"t"),a("span",{class:"mord cjk_fallback"},"或者"),a("span",{class:"mord mathnormal"},"t"),a("span",{class:"mord mathnormal"},"hi"),a("span",{class:"mord mathnormal"},"s"),a("span",{class:"mord"},".")])])]),n("http.post来发请求就行了")])],-1),d=t('<h1 id="七、路由" tabindex="-1"><a class="header-anchor" href="#七、路由" aria-hidden="true">#</a> 七、路由</h1><h2 id="是什么" tabindex="-1"><a class="header-anchor" href="#是什么" aria-hidden="true">#</a> 是什么?</h2><p>一组对应关系,在 SPA 项目中，不同功能之间的切换，要依赖于前端路由来完成</p><h2 id="前端路由的工作方式" tabindex="-1"><a class="header-anchor" href="#前端路由的工作方式" aria-hidden="true">#</a> 前端路由的工作方式</h2><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221120215504662.png" alt="image-20221120215504662" tabindex="0" loading="lazy"><figcaption>image-20221120215504662</figcaption></figure><h2 id="实现简易的前端路由" tabindex="-1"><a class="header-anchor" href="#实现简易的前端路由" aria-hidden="true">#</a> 实现简易的前端路由</h2><blockquote><p>步骤1：通过 <code>&lt;component&gt;</code>标签，结合 <code>comName</code> 动态渲染组件。示例代码如下：</p></blockquote><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221120215552901.png" alt="image-20221120215552901" tabindex="0" loading="lazy"><figcaption>image-20221120215552901</figcaption></figure><blockquote><p>步骤2：在 App.vue 组件中，为 链接添加对应的 hash 值：</p></blockquote><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221120215736699.png" alt="image-20221120215736699" tabindex="0" loading="lazy"><figcaption>image-20221120215736699</figcaption></figure><blockquote><p>步骤3：在 created 生命周期函数中，监听浏览器地址栏中 hash 地址的变化，动态切换要展示的组件的名称：</p></blockquote><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221120215812178.png" alt="image-20221120215812178" tabindex="0" loading="lazy"><figcaption>image-20221120215812178</figcaption></figure><h2 id="vue-router-的基本用法" tabindex="-1"><a class="header-anchor" href="#vue-router-的基本用法" aria-hidden="true">#</a> vue-router 的基本用法</h2><p>vue-router 是 vue.js 官方给出的路由解决方案。它只能结合 vue 项目进行使用，能够轻松的管理 SPA 项目 中组件的切换。</p>',14),g={href:"https://router.vuejs.org/zh/",target:"_blank",rel:"noopener noreferrer"},m=t(`<h3 id="vue-router安装" tabindex="-1"><a class="header-anchor" href="#vue-router安装" aria-hidden="true">#</a> vue-router安装</h3><p>在 vue2 的项目中，安装 vue-router 的命令如下：</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>npm i vue - router@3.5.2 -S
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="创建路由模块" tabindex="-1"><a class="header-anchor" href="#创建路由模块" aria-hidden="true">#</a> 创建路由模块</h3><p>在 src 源代码目录下，新建 router/index.js 路由模块，并初始化如下的代码：</p><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221121093807714.png" alt="image-20221121093807714" tabindex="0" loading="lazy"><figcaption>image-20221121093807714</figcaption></figure><h3 id="导入并挂载路由模块" tabindex="-1"><a class="header-anchor" href="#导入并挂载路由模块" aria-hidden="true">#</a> 导入并挂载路由模块</h3><p>在 src/main.js 入口文件中，导入并挂载路由模块。示例代码如下：</p><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221121094045835.png" alt="image-20221121094045835" tabindex="0" loading="lazy"><figcaption>image-20221121094045835</figcaption></figure><h3 id="声明路由链接和占位符" tabindex="-1"><a class="header-anchor" href="#声明路由链接和占位符" aria-hidden="true">#</a> 声明路由链接和占位符</h3><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221121094102418.png" alt="image-20221121094102418" tabindex="0" loading="lazy"><figcaption>image-20221121094102418</figcaption></figure><h3 id="声明路由的匹配规则" tabindex="-1"><a class="header-anchor" href="#声明路由的匹配规则" aria-hidden="true">#</a> 声明路由的匹配规则</h3><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221121094227580.png" alt="image-20221121094227580" tabindex="0" loading="lazy"><figcaption>image-20221121094227580</figcaption></figure><h2 id="路由重定向" tabindex="-1"><a class="header-anchor" href="#路由重定向" aria-hidden="true">#</a> 路由重定向</h2><p><code>路由重定向</code>指的是：用户在访问地址 A 的时候，强制用户跳转到地址 C ，从而展示特定的组件页面。 通过路由规则的 <code>redirect</code> 属性，指定一个新的路由地址，可以很方便地设置路由的重定向：</p><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221121094327986.png" alt="image-20221121094327986" tabindex="0" loading="lazy"><figcaption>image-20221121094327986</figcaption></figure><h3 id="嵌套路由" tabindex="-1"><a class="header-anchor" href="#嵌套路由" aria-hidden="true">#</a> 嵌套路由</h3><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221121094346744.png" alt="image-20221121094346744" tabindex="0" loading="lazy"><figcaption>image-20221121094346744</figcaption></figure><h3 id="声明子路由链接和子路由占位符" tabindex="-1"><a class="header-anchor" href="#声明子路由链接和子路由占位符" aria-hidden="true">#</a> 声明子路由链接和子路由占位符</h3><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221121094440465.png" alt="image-20221121094440465" tabindex="0" loading="lazy"><figcaption>image-20221121094440465</figcaption></figure><h3 id="通过-children-属性声明子路由规则" tabindex="-1"><a class="header-anchor" href="#通过-children-属性声明子路由规则" aria-hidden="true">#</a> 通过 children 属性声明子路由规则</h3><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221121094457351.png" alt="image-20221121094457351" tabindex="0" loading="lazy"><figcaption>image-20221121094457351</figcaption></figure><h2 id="动态路由匹配" tabindex="-1"><a class="header-anchor" href="#动态路由匹配" aria-hidden="true">#</a> 动态路由匹配</h2><p>动态路由指的是：把 Hash 地址中可变的部分定义为参数项，从而提高路由规则的复用性。 在 vue-router 中使用英文的冒号（:）来定义路由的参数项。示例代码如下：</p><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221121094619335.png" alt="image-20221121094619335" tabindex="0" loading="lazy"><figcaption>image-20221121094619335</figcaption></figure><h3 id="route-params-参数对象" tabindex="-1"><a class="header-anchor" href="#route-params-参数对象" aria-hidden="true">#</a> $route.params 参数对象</h3><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221121094644113.png" alt="image-20221121094644113" tabindex="0" loading="lazy"><figcaption>image-20221121094644113</figcaption></figure><h3 id="使用-props-接收路由参数" tabindex="-1"><a class="header-anchor" href="#使用-props-接收路由参数" aria-hidden="true">#</a> 使用 props 接收路由参数</h3><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221121094656134.png" alt="image-20221121094656134" tabindex="0" loading="lazy"><figcaption>image-20221121094656134</figcaption></figure><h3 id="声明式导航-编程式导航" tabindex="-1"><a class="header-anchor" href="#声明式导航-编程式导航" aria-hidden="true">#</a> 声明式导航 &amp; 编程式导航</h3><h4 id="vue-router-中的编程式导航-api" tabindex="-1"><a class="header-anchor" href="#vue-router-中的编程式导航-api" aria-hidden="true">#</a> vue-router 中的编程式导航 API</h4><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221121095018303.png" alt="image-20221121095018303" tabindex="0" loading="lazy"><figcaption>image-20221121095018303</figcaption></figure><h4 id="router-push" tabindex="-1"><a class="header-anchor" href="#router-push" aria-hidden="true">#</a> $router.push</h4><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221121095038559.png" alt="image-20221121095038559" tabindex="0" loading="lazy"><figcaption>image-20221121095038559</figcaption></figure><h4 id="router-replace" tabindex="-1"><a class="header-anchor" href="#router-replace" aria-hidden="true">#</a> $router.replace</h4><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221121095059840.png" alt="image-20221121095059840" tabindex="0" loading="lazy"><figcaption>image-20221121095059840</figcaption></figure><h4 id="router-go" tabindex="-1"><a class="header-anchor" href="#router-go" aria-hidden="true">#</a> $router.go</h4><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221121095112629.png" alt="image-20221121095112629" tabindex="0" loading="lazy"><figcaption>image-20221121095112629</figcaption></figure><h4 id="router-go-的简化用法" tabindex="-1"><a class="header-anchor" href="#router-go-的简化用法" aria-hidden="true">#</a> $router.go 的简化用法</h4><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221121095123592.png" alt="image-20221121095123592" tabindex="0" loading="lazy"><figcaption>image-20221121095123592</figcaption></figure><h3 id="导航守卫" tabindex="-1"><a class="header-anchor" href="#导航守卫" aria-hidden="true">#</a> 导航守卫</h3><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221121095140954.png" alt="image-20221121095140954" tabindex="0" loading="lazy"><figcaption>image-20221121095140954</figcaption></figure><h4 id="全局前置守卫" tabindex="-1"><a class="header-anchor" href="#全局前置守卫" aria-hidden="true">#</a> 全局前置守卫</h4><blockquote><p>什么是回调函数?</p><p><strong><code>回调函数是一个参数,将这个函数作为参数传到另一个函数里面</code></strong>,当那个函数执行完之后,在执行传进去这个函数,这个过程就叫回调!</p><p>白话文:主函数的事先干完,回头在调用传进来的那个函数.</p></blockquote><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221121095154479.png" alt="image-20221121095154479" tabindex="0" loading="lazy"><figcaption>image-20221121095154479</figcaption></figure><h4 id="守卫方法的-3-个形参" tabindex="-1"><a class="header-anchor" href="#守卫方法的-3-个形参" aria-hidden="true">#</a> 守卫方法的 3 个形参</h4><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221121095204691.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h4 id="next-函数的-3-种调用方式" tabindex="-1"><a class="header-anchor" href="#next-函数的-3-种调用方式" aria-hidden="true">#</a> next 函数的 3 种调用方式</h4><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221121095226022.png" alt="image-20221121095226022" tabindex="0" loading="lazy"><figcaption>image-20221121095226022</figcaption></figure><h4 id="控制后台主页的访问权限" tabindex="-1"><a class="header-anchor" href="#控制后台主页的访问权限" aria-hidden="true">#</a> 控制后台主页的访问权限</h4><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221121095241472.png" alt="image-20221121095241472" tabindex="0" loading="lazy"><figcaption>image-20221121095241472</figcaption></figure><h2 id="url种的-是什么意思" tabindex="-1"><a class="header-anchor" href="#url种的-是什么意思" aria-hidden="true">#</a> URL种的#是什么意思?</h2><blockquote><p>#代表网页中的一个位置。</p></blockquote>`,53),k={href:"http://www.example.com/index.html#print%E5%B0%B1%E4%BB%A3%E8%A1%A8%E7%BD%91%E9%A1%B5index.html%E7%9A%84print%E4%BD%8D%E7%BD%AE%E3%80%82%E6%B5%8F%E8%A7%88%E5%99%A8%E8%AF%BB%E5%8F%96%E8%BF%99%E4%B8%AAURL%E5%90%8E%EF%BC%8C%E4%BC%9A%E8%87%AA%E5%8A%A8%E5%B0%86print%E4%BD%8D%E7%BD%AE%E6%BB%9A%E5%8A%A8%E8%87%B3%E5%8F%AF%E8%A7%86%E5%8C%BA%E5%9F%9F%E3%80%82",target:"_blank",rel:"noopener noreferrer"},h=a("p",null,"在VUE中，路由的实现方式有两种，其中一种就是通过#标识符进行页面内导航从而实现路由切换。",-1),b=a("figure",null,[a("img",{src:"https://raw.githubusercontent.com/YuyanCai/imagebed/main/noteimage-20221202172317471.png",alt:"image-20221202172317471",tabindex:"0",loading:"lazy"}),a("figcaption",null,"image-20221202172317471")],-1),v=a("h3",{id:"http请求不包括",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#http请求不包括","aria-hidden":"true"},"#"),n(" HTTP请求不包括#")],-1),f={href:"https://blog.csdn.net/zlingyun/article/details/83536589#print",target:"_blank",rel:"noopener noreferrer"},x=t(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>GET /index.html HTTP/1.1

Host: www.example.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="后的字符" tabindex="-1"><a class="header-anchor" href="#后的字符" aria-hidden="true">#</a> #后的字符</h3>`,2),y={href:"https://blog.csdn.net/zlingyun/article/details/83536589#fff",target:"_blank",rel:"noopener noreferrer"},w=t(`<div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>GET /?color= HTTP/1.1
 
Host: www.example.com
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="改变-不触发网页重载" tabindex="-1"><a class="header-anchor" href="#改变-不触发网页重载" aria-hidden="true">#</a> 改变#不触发网页重载</h3>`,2),q={href:"http://www.example.com/index.html#location1%E6%94%B9%E6%88%90http://www.example.com/index.html#location2%EF%BC%8C%E6%B5%8F%E8%A7%88%E5%99%A8%E4%B8%8D%E4%BC%9A%E9%87%8D%E6%96%B0%E5%90%91%E6%9C%8D%E5%8A%A1%E5%99%A8%E8%AF%B7%E6%B1%82index.html%E3%80%82",target:"_blank",rel:"noopener noreferrer"},C=t('<p>说明同第一个，例如单页面应用SPA一样，路由的切换，不会重新加载页面，只是切换位置，或者切换组件；第二种应用就是在单个页面里面通过name和id切换当前显示的位置。</p><h3 id="改变-会改变浏览器的访问历史" tabindex="-1"><a class="header-anchor" href="#改变-会改变浏览器的访问历史" aria-hidden="true">#</a> 改变#会改变浏览器的访问历史</h3><p>每一次改变#后的部分，都会在浏览器的访问历史中增加一个记录，使用&quot;后退&quot;按钮，就可以回到上一个位置。这对于ajax应用程序特别有用，可以用不同的#值，表示不同的访问状态，然后向用户给出可以访问某个状态的链接。值得注意的是，上述规则对IE 6和IE 7不成立，它们不会因为#的改变而增加历史记录。</p><p>说明：通过#的切换，是算在浏览器的访问历史中的，前进和后退都是生效的。</p><h2 id="说明" tabindex="-1"><a class="header-anchor" href="#说明" aria-hidden="true">#</a> ？说明</h2><h3 id="连接作用" tabindex="-1"><a class="header-anchor" href="#连接作用" aria-hidden="true">#</a> <strong>连接作用</strong></h3><p>通过？来带参数，连接域名和参数，经常会用到。</p>',7),_={href:"http://www.xxx.com/Show.asp?id=77&nameid=2905210001&page=1",target:"_blank",rel:"noopener noreferrer"},z=a("h3",{id:"清除缓存",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#清除缓存","aria-hidden":"true"},"#"),n(" 清除缓存")],-1),Y={href:"http://www.xxxxx.com/index.html",target:"_blank",rel:"noopener noreferrer"},E={href:"http://www.xxxxx.com/index.html?test123123",target:"_blank",rel:"noopener noreferrer"},j=a("p",null,"两个url打开的页面一样，但是后面这个有问号，说明不调用缓存的内容，而认为是一个新地址，重新读取。",-1),A=a("p",null,"因为在做http请求的时候，如果浏览器检测到你的地址完全没变，会从缓存里读取先前请求过的数据，不再发送请求。有些时候是页面资源的加载，有些时候是API的get请求，都有可能。加上这个，会让浏览器认为这是一个新的地址，从而保证重新获取资源。",-1),B=a("h2",{id:"说明-1",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#说明-1","aria-hidden":"true"},"#"),n(" &说明")],-1),D=a("p",null,"不同参数的间隔符",-1),F={href:"http://www.xxx.com/Show.asp?id=77&nameid=2905210001&page=1",target:"_blank",rel:"noopener noreferrer"};function M(P,S){const s=c("ExternalLinkIcon");return p(),o("div",null,[r,u,d,a("p",null,[n("vue-router 的官方文档地址："),a("a",g,[n("https://router.vuejs.org/zh/"),e(s)])]),m,a("p",null,[n("比如，"),a("a",k,[n("http://www.example.com/index.html#print就代表网页index.html的print位置。浏览器读取这个URL后，会自动将print位置滚动至可视区域。"),e(s)])]),h,b,v,a("p",null,[n("#是用来指导浏览器动作的，对服务器端完全无用。所以，HTTP请求中不包括#。 比如，访问下面的网址，"),a("a",f,[n("http://www.example.com/index.html#print"),e(s)]),n("，浏览器实际发出的请求是这样的：")]),x,a("p",null,[n("在第一个#后面出现的任何字符，都会被浏览器解读为位置标识符。这意味着，这些字符都不会被发送到服务器端。 比如，下面URL的原意是指定一个颜色值："),a("a",y,[n("http://www.example.com/?color=#fff"),e(s)]),n("，但是，浏览器实际发出的请求是：")]),w,a("p",null,[n("单单改变#后的部分，浏览器只会滚动到相应位置，不会重新加载网页。 比如，从"),a("a",q,[n("http://www.example.com/index.html#location1改成http://www.example.com/index.html#location2，浏览器不会重新向服务器请求index.html。"),e(s)])]),C,a("p",null,[a("a",_,[n("http://www.xxx.com/Show.asp?id=77&nameid=2905210001&page=1"),e(s)])]),z,a("p",null,[a("a",Y,[n("http://www.xxxxx.com/index.html"),e(s)])]),a("p",null,[a("a",E,[n("http://www.xxxxx.com/index.html?test123123"),e(s)])]),j,A,B,D,a("p",null,[a("a",F,[n("http://www.xxx.com/Show.asp?id=77&nameid=2905210001&page=1"),e(s)])])])}const L=i(l,[["render",M],["__file","Vue2进阶.html.vue"]]);export{L as default};
