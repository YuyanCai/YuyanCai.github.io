import{ac as e,F as o,G as n,ad as i}from"./framework-f12b30cc.js";const t={},a=i('<h1 id="六、innodb的表空间" tabindex="-1"><a class="header-anchor" href="#六、innodb的表空间" aria-hidden="true">#</a> 六、InnoDB的表空间</h1><p><code>表空间 </code>是一个抽象的概念，对于系统表空间来说，对应着文件系统中一个或多个 实际文件；对于每个独立表空间来说，对应着文件系统中一个名为 <code>名.ibd </code>的实际文件。大家可以把表空间想 象成被切分为许许多多个<code>页</code>的池子，当我们想为某个表插入一条记录的时候，就从池子中捞出一个对应的页来 把数据写进去。</p><h2 id="回忆一些旧知识" tabindex="-1"><a class="header-anchor" href="#回忆一些旧知识" aria-hidden="true">#</a> 回忆一些旧知识</h2><h3 id="页面类型" tabindex="-1"><a class="header-anchor" href="#页面类型" aria-hidden="true">#</a> 页面类型</h3><p><strong>InnoDB是以页为单位管理存储空间的</strong>，我们的聚簇索引（也就是完整的表数据）和其他的二级索引 都是以<code>B+</code>树的形式保存到表空间的，而<code> B+</code> 树的节点就是数据页。我们前边说过，这个数据页的类型名其实 是：<code>FIL_PAGE_INDEX</code>，除了这种存放索引数据的页面类型之外，InnoDB也为了不同的目的设计了若干种不同类 型的页面</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220911203246593.png" alt="image-20220911203246593" tabindex="0" loading="lazy"><figcaption>image-20220911203246593</figcaption></figure><p>因为页面类型前边都有个 FIL_PAGE 或者 FIL_PAGE_TYPE 的前缀，为简便起见我们后边唠叨页面类型的时候就把 这些前缀省略掉了，比方说 FIL_PAGE_TYPE_ALLOCATED 类型称为 ALLOCATED 类型， FIL_PAGE_INDEX 类型称为 INDEX 类型。</p><h3 id="页面通用部分" tabindex="-1"><a class="header-anchor" href="#页面通用部分" aria-hidden="true">#</a> 页面通用部分</h3><p>我们前边说过数据页，也就是 <code>INDEX </code>类型的页由7个部分组成，其中的两个部分是所有类型的页面都通用的。当</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220911203438692.png" alt="image-20220911203438692" tabindex="0" loading="lazy"><figcaption>image-20220911203438692</figcaption></figure><p>从上图中可以看出，任何类型的页都会包含这两个部分：</p><ul><li>File Header ：记录页面的一些通用信息</li><li>File Trailer ：校验页是否完整，<strong>保证从内存到磁盘刷新时内容的一致性。</strong></li></ul><p>File Header各组成部分如下：</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220906170444968.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="独立表空间结构" tabindex="-1"><a class="header-anchor" href="#独立表空间结构" aria-hidden="true">#</a> 独立表空间结构</h2><h3 id="区-extent-的概念" tabindex="-1"><a class="header-anchor" href="#区-extent-的概念" aria-hidden="true">#</a> 区（extent）的概念</h3><p>表空间中的页实在是太多了，为了更好的管理这些页面，设计 InnoDB 的大叔们提出了 区 （英文名： extent ） 的概念。对于16KB的页来说，连续的64个页就是一个 区 ，也就是说一个区默认占用1MB空间大小。不论是系统 表空间还是独立表空间，都可以看成是由若干个区组成的，每256个区被划分成一组。画个图表示就是这样：</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220912095948198.png" alt="image-20220912095948198" tabindex="0" loading="lazy"><figcaption>image-20220912095948198</figcaption></figure><p>其中 extent 0 ~ extent 255 这256个区算是第一个组， extent 256 ~ extent 511 这256个区算是第二个 组， extent 512 ~ extent 767 这256个区算是第三个组（上图中并未画全第三个组全部的区，请自行脑补）， 依此类推可以划分更多的组。这些组的头几个页面的类型都是类似的，就像这样：</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220912100043038.png" alt="image-20220912100043038" tabindex="0" loading="lazy"><figcaption>image-20220912100043038</figcaption></figure><p>从上图中我们能得到如下信息：</p><ul><li><strong>第一个组最开始的3个页面的类型是固定的</strong>，也就是说 extent 0 这个区最开始的3个页面的类型是固定的， 分别是： <ul><li><code>FSP_HDR </code>类型：这个类型的页面是用来登记整个表空间的一些整体属性以及本组所有的 区 ，也就是extent 0 ~ extent 255 这256个区的属性，稍后详细唠叨。需要注意的一点是，整个表空间只有一个 FSP_HDR 类型的页面。</li><li><code>IBUF_BITMAP </code>类型：这个类型的页面是存储本组所有的区的所有页面关于 INSERT BUFFER 的信息。当然，你现在不用知道啥是个 INSERT BUFFER ，后边会详细说到你吐。</li><li><code>INODE </code>类型：这个类型的页面存储了许多称为 INODE 的数据结构，还是那句话，现在你不需要知道啥是个 INODE ，后边儿会说到你吐。</li></ul></li><li><strong>其余各组最开始的2个页面的类型是固定的</strong>，也就是说<code>extent 256</code>、 <code>extent 512 </code>这些区最开始的2个页面 的类型是固定的，分别是： <ul><li><code>XDES </code>类型：全称是 extent descriptor ，用来登记本组256个区的属性，也就是说对于在 extent 256区中的该类型页面存储的就是 extent 256 ~ extent 511 这些区的属性，对于在 extent 512 区中的该类型页面存储的就是 extent 512 ~ extent 767 这些区的属性。上边介绍的 FSP_HDR 类型的页面其实和 XDES 类型的页面的作用类似，只不过 FSP_HDR 类型的页面还会额外存储一些表空间的属性。</li><li><code>IBUF_BITMAP </code>类型：上边介绍过了。</li></ul></li></ul><p>总结：<strong>表空间被划分为许多连续的 区 ，每个区默认由64个页组成，每256个区划分为一组，每个组的最开始的几个页面类型是固定的就好了</strong></p><h3 id="段-segment-的概念" tabindex="-1"><a class="header-anchor" href="#段-segment-的概念" aria-hidden="true">#</a> 段（segment）的概念</h3><p>为啥好端端的提出一个 <code>区 （ extent ）</code>的概念呢？我们以前分析问题的套路都是这样的：表中的记录存储到页里 边儿，然后页作为节点组成 <code>B+</code> 树，这个<code>B+</code>树就是索引，然后吧啦吧啦一堆聚簇索引和二级索引的区别。这套路 也没啥不妥的呀～</p><p>是的，如果我们表中数据量很少的话，比如说你的表中只有几十条、几百条数据的话，的确用不到 区 的概念， 因为简单的几个页就能把对应的数据存储起来，但是你架不住表里的记录越来越多呀。</p><p>？？啥？？表里的记录多了又怎样？ B+ 树的每一层中的页都会形成一个双向链表呀， File Header 中的 FIL_PAGE_PREV 和 FIL_PAGE_NEXT 字段不就是为了形成双向链表设置的么？</p><p>是的是的，您说的都对，从理论上说，不引入 区 的概念只使用 页 的概念对存储引擎的运行并没啥影响，但是我 们来考虑一下下边这个场景：</p><ul><li>我们每向表中插入一条记录，本质上就是向该表的聚簇索引以及所有二级索引代表的 B+ 树的节点中插入数 据。而 B+ 树的每一层中的页都会形成一个双向链表，如果是以<code>页</code>为单位来分配存储空间的话，<strong>双向链表相 邻的两个页之间的物理位置可能离得非常远</strong>。我们介绍 B+ 树索引的适用场景的时候特别提到范围查询只需 要定位到最左边的记录和最右边的记录，然后沿着双向链表一直扫描就可以了，而如果链表中相邻的两个页 物理位置离得非常远，就是所谓的<code>随机I/O</code>。再一次强调，磁盘的速度和内存的速度差了好几个数量级，<code>随 机I/O</code>是非常慢的，所以我们应该尽量让链表中相邻的页的物理位置也相邻，这样进行范围查询的时候才可 以使用所谓的<code> 顺序I/O</code> 。</li></ul><p>所以，所以，所以才引入了<code>区 （ extent ）</code>的概念，一个区就是在物理位置上连续的64个页。在表中数据量大 的时候，为某个索引分配空间的时候就不再按照页为单位分配了，而是按照 区 为单位分配，甚至在表中的数据 十分非常特别多的时候，可以一次性分配多个连续的区。虽然可能造成一点点空间的浪费（数据不足填充满整个 区），但是从性能角度看，可以消除很多的<code>随机 I/O</code> ，功大于过嘛！</p><p>事情到这里就结束了么？太天真了，我们提到的范围查询，其实是对 B+ 树叶子节点中的记录进行顺序扫描，而 如果不区分叶子节点和非叶子节点，统统把节点代表的页面放到申请到的区中的话，进行范围扫描的效果就大打 折扣了。所以设计 InnoDB 的大叔们对 B+ 树的叶子节点和非叶子节点进行了区别对待，也就是说叶子节点有自己 独有的 区 ，非叶子节点也有自己独有的 区 。<strong>存放叶子节点的区的集合</strong>就算是一个<code> 段 （ segment ）</code>，<strong>存放非叶 子节点的区的集合</strong>也算是一个 <code>段</code> 。也就是说<strong>一个索引会生成2个段，一个叶子节点段，一个非叶子节点段。</strong></p><p>默认情况下一个使用 InnoDB 存储引擎的表只有一个聚簇索引，一个索引会生成2个段，而段是以区为单位申请存 储空间的，一个区默认占用1M存储空间，所以默认情况下一个只存了几条记录的小表也需要2M的存储空间么？ 以后每次添加一个索引都要多申请2M的存储空间么？这对于存储记录比较少的表简直是天大的浪费。现在的问题是我们前面介绍的区都是很<code>纯粹</code>的，也就是一个区被整个分配给某一个段，或者说区中的所有页面都是为了存储同一个段的数据而存在 的，即使段的数据填不满区中所有的页面，那余下的页面也不能挪作他用。现在为了考虑以完整的区为单位分配 给某个段对于数据量较小的表太浪费存储空间的这种情况，设计 InnoDB 的大叔们提出了一个<code>碎片（fragment） 区</code>的概念，也就是在一个碎片区中，并不是所有的页都是为了存储同一个段的数据而存在的，而是碎片区中的页 可以用于不同的目的，比如有些页用于段A，有些页用于段B，有些页甚至哪个段都不属于。碎片区直属于表空 间，并不属于任何一个段。所以此后为某个段分配存储空间的策略是这样的：</p><ul><li>在刚开始向表中插入数据的时候，段是从某个碎片区以单个页面为单位来分配存储空间的。</li><li>当某个段已经占用了32个碎片区页面之后，就会以完整的区为单位来分配存储空间。</li></ul><p>所以现在<code>段不能仅定义为是某些区的集合</code>，更精确的应该是**某些零散的页面以及一些完整的区的集合。**除了索引 的叶子节点段和非叶子节点段之外， <code>InnoDB </code>中还有为存储一些特殊的数据而定义的段，比如回滚段，当然我们 现在并不关心别的类型的段，现在只需要知道段是一些零散的页面以及一些完整的区的集合就好了。</p><h3 id="区的分类" tabindex="-1"><a class="header-anchor" href="#区的分类" aria-hidden="true">#</a> 区的分类</h3><p>表空间的是由若干个区组成的，这些区大体上可以分为4种类型:</p><ul><li>空闲的区：现在还没有用到这个区中的任何页面。</li><li>有剩余空间的碎片区：表示碎片区中还有可用的页面。</li><li>没有剩余空间的碎片区：表示碎片区中的所有页面都被使用，没有空闲页面。</li><li>附属于某个段的区。每一个索引都可以分为叶子节点段和非叶子节点段，除此之外InnoDB还会另外定义一些 特殊作用的段，在这些段中的数据量很大时将使用区来作为基本的分配单位。</li></ul><p>这4种类型的区也可以被称为区的4种状态（ State ），设计 InnoDB 的大叔们为这4种状态的区定义了特定的名 词儿：</p><p>状态名 含义 FREE 空闲的区 FREE_FRAG 有剩余空间的碎片区 FULL_FRAG 没有剩余空间的碎片区 FSEG 附属于某个段的区</p><p>需要再次强调一遍的是，处于 FREE 、 FREE_FRAG 以及 FULL_FRAG 这三种状态的区都是独立的，算是直属于表空 间；而处于 FSEG 状态的区是附属于某个段的。</p><blockquote><p>如果把表空间比作是一个集团军，段就相当于师，区就相当于团。一般的团都是隶属于某个师的，就像 是处于<code>FSEG</code>的区全都隶属于某个段，而处于<code>FREE</code>、<code>FREE_FRAG</code>以及<code>FULL_FRAG</code>这三种状态的区却 直接隶属于表空间，就像独立团直接听命于军部一样。</p></blockquote><p>为了方便管理这些区，设计 InnoDB 的大叔设计了一个称为 XDES Entry 的结构（全称就是Extent Descriptor Entry），每一个区都对应着一个 XDES Entry 结构，这个结构记录了对应的区的一些属性。我们先看图来对这个 结构有个大致的了解：</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220914103010518.png" alt="image-20220914103010518" tabindex="0" loading="lazy"><figcaption>image-20220914103010518</figcaption></figure><h1 id="" tabindex="-1"><a class="header-anchor" href="#" aria-hidden="true">#</a></h1>',44),d=[a];function c(r,l){return o(),n("div",null,d)}const g=e(t,[["render",c],["__file","6.InnoDB表空间.html.vue"]]);export{g as default};
