import{ac as n,F as a,G as s,ad as p}from"./framework-f12b30cc.js";const e={},t=p(`<h1 id="二、盛放记录的大盒子-innodb数据页结构" tabindex="-1"><a class="header-anchor" href="#二、盛放记录的大盒子-innodb数据页结构" aria-hidden="true">#</a> 二、盛放记录的大盒子-InnoDB数据页结构</h1><h2 id="不同类型的页简介" tabindex="-1"><a class="header-anchor" href="#不同类型的页简介" aria-hidden="true">#</a> 不同类型的页简介</h2><p>前边我们简单提了一下 页 的概念，它是 InnoDB 管理存储空间的基本单位，一个页的大小一般是 16KB 。 InnoDB 为了不同的目的而设计了许多种不同类型的 页 ，比如存放表空间头部信息的页，存放 Insert Buffer 信息的页，存放 INODE 信息的页，存放 undo 日志信息的页等等等等。我们聚焦的是那些 存放我们表中记录的那种类型的页，官方称这种存放记录的页为索引（ INDEX ）页，鉴于我们还没有了解过索引 是个什么东西，而这些表中的记录就是我们日常口中所称的 数据 ，所以目前还是叫这种存放记录的页为 数据页 吧。</p><h2 id="数据页结构的快速浏览" tabindex="-1"><a class="header-anchor" href="#数据页结构的快速浏览" aria-hidden="true">#</a> 数据页结构的快速浏览</h2><p>数据页代表的这块 16KB 大小的存储空间可以被划分为多个部分，不同部分有不同的功能，各个部分如图所示：</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220824203051546.png" alt="image-20220824203051546" tabindex="0" loading="lazy"><figcaption>image-20220824203051546</figcaption></figure><p>从图中可以看出，一个 InnoDB 数据页的存储空间大致被划分成了 7 个部分，有的部分占用的字节数是确定的， 有的部分占用的字节数是不确定的。下边我们用表格的方式来大致描述一下这7个部分都存储一些啥内容（快速 的瞅一眼就行了，后边会详细唠叨的）：</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220824203125400.png" alt="image-20220824203125400" tabindex="0" loading="lazy"><figcaption>image-20220824203125400</figcaption></figure><h2 id="记录在页中的存储" tabindex="-1"><a class="header-anchor" href="#记录在页中的存储" aria-hidden="true">#</a> 记录在页中的存储</h2><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220824211740106.png" alt="image-20220824211740106" tabindex="0" loading="lazy"><figcaption>image-20220824211740106</figcaption></figure><h3 id="记录头信息的秘密" tabindex="-1"><a class="header-anchor" href="#记录头信息的秘密" aria-hidden="true">#</a> 记录头信息的秘密</h3><p>我们先创建一个表：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">CREATE</span> <span class="token keyword">TABLE</span> page_demo<span class="token punctuation">(</span>
 <span class="token operator">-</span><span class="token operator">&gt;</span> c1 <span class="token keyword">INT</span><span class="token punctuation">,</span>
 <span class="token operator">-</span><span class="token operator">&gt;</span> c2 <span class="token keyword">INT</span><span class="token punctuation">,</span>
 <span class="token operator">-</span><span class="token operator">&gt;</span> c3 <span class="token keyword">VARCHAR</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
 <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token keyword">PRIMARY</span> <span class="token keyword">KEY</span> <span class="token punctuation">(</span>c1<span class="token punctuation">)</span>
 <span class="token operator">-</span><span class="token operator">&gt;</span> <span class="token punctuation">)</span> <span class="token keyword">CHARSET</span><span class="token operator">=</span>ascii ROW_FORMAT<span class="token operator">=</span>Compact<span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">0</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.03</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个新创建的 page_demo 表有3个列，其中 c1 和 c2 列是用来存储整数的， c3 列是用来存储字符串的。需要注 意的是，我们把 c1 列指定为主键，所以在具体的行格式中InnoDB就没必要为我们去创建那个所谓的 row_id 隐 藏列了。而且我们为这个表指定了 ascii 字符集以及 Compact 的行格式。所以这个表中记录的行格式示意图就是 这样的：</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220904153815836.png" alt="image-20220904153815836" tabindex="0" loading="lazy"><figcaption>image-20220904153815836</figcaption></figure><p>简化后如下：</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220904160915879.png" alt="image-20220904160915879" tabindex="0" loading="lazy"><figcaption>image-20220904160915879</figcaption></figure><p>下边我们试着向 page_demo 表中插入几条记录：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> page_demo <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token string">&#39;aaaa&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&#39;bbbb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">300</span><span class="token punctuation">,</span> <span class="token string">&#39;cccc&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">400</span><span class="token punctuation">,</span> <span class="token string">&#39;dddd&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">4</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
Records: <span class="token number">4</span> Duplicates: <span class="token number">0</span> <span class="token keyword">Warnings</span>: <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>为了方便大家分析这些记录在 页 的 User Records 部分中是怎么表示的，我把记录中头信息和实际的列数据都用 十进制表示出来了（其实是一堆二进制位），所以这些记录的示意图就是：</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220904160942858.png" alt="image-20220904160942858" tabindex="0" loading="lazy"><figcaption>image-20220904160942858</figcaption></figure><p>看这个图的时候需要注意一下，各条记录在<code>User Records</code>中存储的时候并没有空隙，这里只是为了大家观看方 便才把每条记录单独画在一行中。我们对照着这个图来看看记录头信息中的各个属性是啥意思：</p><ul><li>delete_mask</li></ul><p>这个属性标记着当前记录是否被删除，占用1个二进制位，值为 0 的时候代表记录并没有被删除，为 1 的时 候代表记录被删除掉了。</p><p>啥？<strong>被删除的记录还在 页 中么？是的</strong>，摆在台面上的和背地里做的可能大相径庭，<strong>你以为它删除了，可它 还在真实的磁盘上</strong>[摊手]（忽然想起冠希～）。</p><p>这些被删除的记录之所以不立即从磁盘上移除，是因为移除 它们之后把其他的记录在磁盘上重新排列需要性能消耗，所以只是打一个删除标记而已，所有被删除掉的记 录都会组成一个所谓的 垃圾链表 ，在这个链表中的记录占用的空间称之为所谓的 可重用空间 ，之后如果有 新记录插入到表中的话，可能把这些被删除的记录占用的存储空间覆盖掉。</p><ul><li>min_rec_mask</li></ul><p>B+树的每层非叶子节点中的最小记录都会添加该标记，什么是个 B+ 树？什么是个非叶子节点？好吧，等会 再聊这个问题。反正我们自己插入的四条记录的 min_rec_mask 值都是 0 ，意味着它们都不是 B+ 树的非叶 子节点中的最小记录。</p><ul><li>heap_no</li></ul><p>这个属性表示当前记录在本 页 中的位置，从图中可以看出来，我们插入的4条记录在本 页 中的位置分别 是： 2 、 3 、 4 、 5 。</p><p>其中0和1分别为<code>伪记录</code>和<code>虚拟记录</code>。这两个伪记录一个代表<code>最小记录</code>，一个代表<code>最大记录</code></p><p>是的，记录也可以比大小，对于一条完整的记录来说，比较的记录大小就是比较主键的大小。比如我们插入的4行记录的主键值分别是：1，2，3，4这也就意外着这四条记录的大小从到大依次递增</p><blockquote><p>对于一条完整的记录来说，比较记录的大小就相当于比的是主键的大小。</p></blockquote><p>但是不管我们向 页 中插入了多少自己的记录，设计 InnoDB 的大叔们都规定他们定义的两条伪记录分别为最 小记录与最大记录。这两条记录的构造十分简单，都是由5字节大小的 记录头信息 和8字节大小的一个固定 的部分组成的，如图所示</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220906161007510.png" alt="image-20220906161007510" tabindex="0" loading="lazy"><figcaption>image-20220906161007510</figcaption></figure><p>由于这两条记录不是我们自己定义的记录，所以它们并不存放在 页 的 User Records 部分，他们被单独放在 一个称为 Infimum + Supremum 的部分，如图所示：</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220906161025673.png" alt="image-20220906161025673" tabindex="0" loading="lazy"><figcaption>image-20220906161025673</figcaption></figure><p>从图中我们可以看出来，最小记录和最大记录的 heap_no 值分别是 0 和 1 ，也就是说它们的位置最靠前。</p><ul><li>record_type</li></ul><p>这个属性表示当前记录的类型，一共有4种类型的记录， 0 表示普通记录， 1 表示B+树非叶节点记录， 2 表 示最小记录， 3 表示最大记录。从图中我们也可以看出来，我们自己插入的记录就是普通记录，它们的 record_type 值都是 0 ，而最小记录和最大记录的 record_type 值分别为 2 和 3 。 至于 record_type 为 1 的情况，我们之后在说索引的时候会重点强调的。</p><ul><li>next_record</li></ul><p>这玩意儿非常重要，它表示<strong>从当前记录的真实数据到下一条记录的真实数据的地址偏移量</strong>。比方说第一条记 录的 next_record 值为 32 ，意味着从第一条记录的真实数据的地址处向后找 32 个字节便是下一条记录的 真实数据。如果你熟悉数据结构的话，就立即明白了，这其实是个 链表 ，可以通过一条记录找到它的下一 条记录。但是需要注意注意再注意的一点是， 下一条记录 <strong>指得并不是按照我们插入顺序的下一条记录，而 是按照主键值由小到大的顺序的下一条记录。而且规定 Infimum记录（也就是最小记录） 的下一条记录就是 本页中主键值最小的用户记录，而本页中主键值最大的用户记录的下一条记录就是 Supremum记录（也就 是最大记录）</strong> ，为了更形象的表示一下这个 next_record 起到的作用，我们用箭头来替代一下 next_record 中的地址偏移量：</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220906161246136.png" alt="image-20220906161246136" tabindex="0" loading="lazy"><figcaption>image-20220906161246136</figcaption></figure><p>从图中可以看出来，<strong>我们的记录按照主键从小到大的顺序形成了一个单链表</strong>。 最大记录 的 next_record 的 值为 0 ，这也就是说最大记录是没有 下一条记录 了，它是这个单链表中的最后一个节点。如果从中删除掉 一条记录，这个链表也是会跟着变化的，比如我们把第2条记录删掉：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code> mysql&gt; DELETE FROM page_demo WHERE c1 = 2;
 Query OK, 1 row affected (0.02 sec)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>删掉第2条记录后的示意图就是：</strong><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220906161413007.png" alt="image-20220906161413007" loading="lazy"></p><p>从图中可以看出来，删除第2条记录前后主要发生了这些变化：</p><ul><li>第2条记录并没有从存储空间中移除，而是把该条记录的 delete_mask 值设置为 1 。</li><li>第2条记录的 next_record 值变为了0，意味着该记录没有下一条记录了。</li><li>第1条记录的 next_record 指向了第3条记录。</li><li>还有一点你可能忽略了，就是 最大记录 的 n_owned 值从 5 变成了 4 ，关于这一点的变化我们稍后会详 细说明的。</li></ul><p>所以，<strong>不论我们怎么对页中的记录做增删改操作，InnoDB始终会维护一条记录的单链表，链表中的各个</strong><strong>节点是按照主键值由小到大的顺序连接起来的。</strong></p><p>再来看一个有意思的事情，因为主键值为 2 的记录被我们删掉了，但是存储空间却没有回收，如果我们再次把这 条记录插入到表中，会发生什么事呢？</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> page_demo <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">&#39;bbbb&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token keyword">row</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div><p>我们看一下记录的存储情况：</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220906161705253.png" alt="image-20220906161705253" tabindex="0" loading="lazy"><figcaption>image-20220906161705253</figcaption></figure><p>从图中可以看到， InnoDB 并没有因为新记录的插入而为它申请新的存储空间，而是直接复用了原来被删除记录 的存储空间。</p><blockquote><p>小贴士： 当数据页中存在多条被删除掉的记录时，这些记录的next_record属性将会把这些被删除掉的记录组成 一个垃圾链表，以备之后重用这部分存储空间。</p></blockquote><h2 id="page-directory-页目录" tabindex="-1"><a class="header-anchor" href="#page-directory-页目录" aria-hidden="true">#</a> Page Directory（页目录）</h2><p>现在我们了解了记录在页中按照主键值由小到大顺序串联成一个单链表，那如果我们想根据主键值查找页中的某 条记录该咋办呢？比如说这样的查询语句：</p><p>SELECT * FROM page_demo WHERE c1 = 3;</p><p>**最笨的办法：**从 Infimum 记录（最小记录）开始，沿着链表一直往后找，总有一天会找到（或者找不到[摊 手]），在找的时候还能投机取巧，因为链表中各个记录的值是按照从小到大顺序排列的，所以当链表的某个节点 代表的记录的主键值大于你想要查找的主键值时，你就可以停止查找了，因为该节点后边的节点的主键值依次递增。</p><p>但是设计InnoDB的是什么人物？它们会用这么笨的方法吗？当然不会，它们采用一个类似目录的结构，它们的制作过程是这样的：</p><ol><li><strong>将所有正常的记录（包括最大和最小记录，不包括标记为已删除的记录）划分为几个组</strong></li><li>每个组的最后一条记录（也就是组内最大的记录）的头信息中的n_owned属性表示该记录拥有多少条记录，也就是该组内共有几条记录</li><li><strong>将每个组的最后一条记录的地址偏移量单独提取出来按顺序存储到靠近 页 的尾部的地方，这个地方就是所 谓的 Page Directory ，也就是 页目录 （此时应该返回头看看页面各个部分的图）</strong>。页面目录中的这些<code>地址 偏移量</code>被称为 <code>槽</code>（英文名： Slot ），所以这个<code>页面目录</code>就是<code>由 槽 组成</code>的。</li></ol><p>比方说现在的 page_demo 表中正常的记录共有6条， InnoDB 会把它们分成两组，第一组中只有一个最小记录， 第二组中是剩余的5条记录，看下边的示意图：</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220908155903047.png" alt="image-20220908155903047" tabindex="0" loading="lazy"><figcaption>image-20220908155903047</figcaption></figure><p>从这个图中我们需要注意这么几点：</p><ul><li><p>现在 页目录 部分中有两个槽，也就意味着我们的记录被分成了两个组， 槽1 中的值是 112 ，代表最大记录的地址偏移量（就是从页面的0字节开始数，数112个字节）； 槽0 中的值是 99 ，代表最小记录的地址偏移量。</p></li><li><p>注意最小和最大记录的头信息中的 n_owned 属性</p><ul><li>最小记录的 n_owned 值为 1 ，这就代表着以最小记录结尾的这个分组中只有 1 条记录，也就是最小记录 本身。</li><li>最大记录的 n_owned 值为 5 ，这就代表着以最大记录结尾的这个分组中只有 5 条记录，包括最大记录本 身还有我们自己插入的 4 条记录。</li></ul></li></ul><p>99 和 112 这样的地址偏移量很不直观，我们用箭头指向的方式替代数字，这样更易于我们理解，所以修改后的 示意图就是这样：</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220908160516578.png" alt="image-20220908160516578" tabindex="0" loading="lazy"><figcaption>image-20220908160516578</figcaption></figure><p>单纯从逻辑上看一下这些记录和页目录的关系：</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220908160545055.png" alt="image-20220908160545055" tabindex="0" loading="lazy"><figcaption>image-20220908160545055</figcaption></figure><p>为什么最小记录的 n_owned 值为1，而最大记录的 n_owned 值为 5 呢，这里头有什么猫腻 么？</p><p>是的，设计 InnoDB 的大叔们对每个分组中的记录条数是有规定的：<strong>对于最小记录所在的分组只能有 1 条记录， 最大记录所在的分组拥有的记录条数只能在 1~8 条之间，剩下的分组中记录的条数范围只能在是 4~8 条之间。 所以分组是按照下边的步骤进行的:</strong></p><ul><li>初始情况下一个数据页里只有最小记录和最大记录两条记录，它们分属于两个分组。</li><li>之后每插入一条记录，都会从 页目录 中找到主键值比本记录的主键值大并且差值最小的槽，然后把该槽对应的记录的 n_owned 值加1，表示本组内又添加了一条记录，直到该组中的记录数等于8个。</li><li>在一个组中的记录数等于8个后再插入一条记录时，会将组中的记录拆分成两个组，一个组中4条记录，另一 个5条记录。这个过程会在 页目录 中新增一个 槽 来记录这个新增分组中最大的那条记录的偏移量。</li></ul><p>由于现在 page_demo 表中的记录太少，无法演示添加了 页目录 之后加快查找速度的过程，所以再往 page_demo 表中添加一些记录：</p><div class="language-sql line-numbers-mode" data-ext="sql"><pre class="language-sql"><code>mysql<span class="token operator">&gt;</span> <span class="token keyword">INSERT</span> <span class="token keyword">INTO</span> page_demo <span class="token keyword">VALUES</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token string">&#39;eeee&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">600</span><span class="token punctuation">,</span> <span class="token string">&#39;ffff&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">700</span><span class="token punctuation">,</span> <span class="token string">&#39;gggg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span>
<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">800</span><span class="token punctuation">,</span> <span class="token string">&#39;hhhh&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">900</span><span class="token punctuation">,</span> <span class="token string">&#39;iiii&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1000</span><span class="token punctuation">,</span> <span class="token string">&#39;jjjj&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">1100</span><span class="token punctuation">,</span> <span class="token string">&#39;kkkk&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">1200</span><span class="token punctuation">,</span> <span class="token string">&#39;l
lll&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">1300</span><span class="token punctuation">,</span> <span class="token string">&#39;mmmm&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">1400</span><span class="token punctuation">,</span> <span class="token string">&#39;nnnn&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">1500</span><span class="token punctuation">,</span> <span class="token string">&#39;oooo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">1600</span><span class="token punctuation">,</span> <span class="token string">&#39;pppp&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
Query OK<span class="token punctuation">,</span> <span class="token number">12</span> <span class="token keyword">rows</span> affected <span class="token punctuation">(</span><span class="token number">0.00</span> sec<span class="token punctuation">)</span>
Records: <span class="token number">12</span> Duplicates: <span class="token number">0</span> <span class="token keyword">Warnings</span>: <span class="token number">0</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>我们在添加了12条记录，现在页里边就一共有18条记录了（包括最小和最大记录），这些记录 被分成了5个组，如图所示：</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220906164939638.png" alt="image-20220906164939638" tabindex="0" loading="lazy"><figcaption>image-20220906164939638</figcaption></figure><p>现在看怎么从这个 页目 录 中查找记录。因为各个槽代表的记录的主键值都是从小到大排序的，所以我们可以使用所谓的 二分法 来进行 快速查找。4个槽的编号分别是： 0 、 1 、 2 、 3 、 4 ，所以初始情况下最低的槽就是 low=0 ，最高的槽就是 high=4 。比方说我们想找主键值为 6 的记录，过程是这样的：</p><ol><li>计算中间槽的位置： (0+4)/2=2 ，所以查看 槽2 对应记录的主键值为 8 ，又因为 8 &gt; 6 ，所以设置 high=2 ， low 保持不变。</li><li>重新计算中间槽的位置： (0+2)/2=1 ，所以查看 槽1 对应的主键值为 4 ，又因为 4 &lt; 6 ，所以设置 low=1 ， high 保持不变。</li><li>因为 high - low 的值为1，所以确定主键值为 5 的记录在 槽2 对应的组中。此刻我们需要找到 槽2 中主键 值最小的那条记录，然后沿着单向链表遍历 槽2 中的记录。但是我们前边又说过，每个槽对应的记录都是该 组中主键值最大的记录，这里 槽2 对应的记录是主键值为 8 的记录，怎么定位一个组中最小的记录呢？别忘 了各个槽都是挨着的，我们可以很轻易的拿到 槽1 对应的记录（主键值为 4 ），该条记录的下一条记录就 是 槽2 中主键值最小的记录，该记录的主键值为 5 。所以我们可以从这条主键值为 5 的记录出发，遍历 槽 2 中的各条记录，直到找到主键值为 6 的那条记录即可。由于一个组中包含的记录条数只能是1~8条，所以 遍历一个组中的记录的代价是很小的。</li></ol><p>所以在一个数据页中查找指定主键值的记录的过程分为两步：</p><ol><li><strong>通过二分法确定该记录所在的槽，并找到该槽中主键值最小的那条记录。</strong></li><li><strong>通过记录的<code>next_record</code>属性遍历该槽所在的组中的各个记录。</strong></li></ol><h2 id="page-header-页面头部" tabindex="-1"><a class="header-anchor" href="#page-header-页面头部" aria-hidden="true">#</a> Page Header（页面头部）</h2><p>设计 InnoDB 的大叔们为了能得到一个数据页中存储的记录的状态信息，比如本页中已经存储了多少条记录，第 一条记录的地址是什么，页目录中存储了多少个槽等等，特意在页中定义了一个叫 Page Header 的部分，它是 页 结构的第二部分，这个部分占用固定的 56 个字节，专门存储各种状态信息，具体各个字节都是干嘛的看下</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220906165757271.png" alt="image-20220906165757271" tabindex="0" loading="lazy"><figcaption>image-20220906165757271</figcaption></figure><p><strong>PAGE_DIRECTION 和 PAGE_N_DIRECTION 的意思：</strong></p><ul><li>PAGE_DIRECTION</li></ul><p>假如新插入的一条记录的主键值比上一条记录的主键值大，我们说这条记录的插入方向是右边，反之则是左 边。用来表示最后一条记录插入方向的状态就是 PAGE_DIRECTION 。</p><ul><li>PAGE_N_DIRECTION</li></ul><p>假设连续几次插入新记录的方向都是一致的， InnoDB 会把沿着同一个方向插入记录的条数记下来，这个条 数就用 PAGE_N_DIRECTION 这个状态表示。当然，如果最后一条记录的插入方向改变了的话，这个状态的值 会被清零重新统计。</p><blockquote><p>作者给了我一碗鸡汤，我又干劲十足</p><p>大意是坚持做自己喜欢的事儿，你在做的时候可能并不能搞清楚这些事 儿对自己之后的人生有啥影响，但当你一路走来回头看时，一切都是那么清晰，就像是命中注定的一 样</p></blockquote><h2 id="file-header-文件头部" tabindex="-1"><a class="header-anchor" href="#file-header-文件头部" aria-hidden="true">#</a> File Header（文件头部）</h2><p>上边唠叨的 <code>Page Header</code> 是专门针对<code>数据页</code>记录的各种状态信息，比方说页里头有多少个记录了呀，有多少个 槽了呀。我们现在描述的 <code>File Header</code> 针对<code>各种类型的页</code>都通用，也就是说不同类型的页都会以 File Header\`作 为第一个组成部分，它描述了一些针对各种页都通用的一些信息，比方说这个页的编号是多少，它的上一个页、 下一个页是谁啦吧啦吧啦～ 这个部分占用固定的 38 个字节，是由下边这些内容组成的：</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220906170444968.png" alt="image-20220906170444968" tabindex="0" loading="lazy"><figcaption>image-20220906170444968</figcaption></figure><p>对照着这个表格，我们看几个目前比较重要的部分：</p><ul><li>FIL_PAGE_SPACE_OR_CHKSUM</li></ul><p>这个代表<code>当前页面的校验和</code>（checksum）。<code>啥是个校验和？</code><strong>就是对于一个很长很长的字节串来说，我们会通过某种算法来计算一个比较短的值来代表这个很长的字节串，这个比较短的值就称为 校验和 。</strong></p><p>这样在比较两个很长的字节串之前先比较这两个长字节串的校验和，如果校验和都不一样两个长字节串肯定是不同的，所以省去了直接比较两个比较长的字节串的时间损耗。</p><ul><li>FIL_PAGE_OFFSET</li></ul><p>每一个 页 都有一个单独的页号，就跟你的身份证号码一样， InnoDB 通过页号来可以唯一定位一个 页 。</p><ul><li>FIL_PAGE_TYPE</li></ul><p>这个代表当前 页 的类型，我们前边说过， InnoDB 为了不同的目的而把页分为不同的类型，我们上边介绍的 其实都是存储记录的 数据页 ，其实还有很多别的类型的页</p><p><strong>我们存放记录的数据页的类型其实是 FIL_PAGE_INDEX ，也就是所谓的 索引页</strong> 。至于啥是个索引，且听下回 分解～</p><ul><li>FIL_PAGE_PREV 和 FIL_PAGE_NEXT</li></ul><p>我们前边强调过， InnoDB 都是以页为单位存放数据的，有时候我们存放某种类型的数据占用的空间非常大 （比方说一张表中可以有成千上万条记录）， InnoDB 可能不可以一次性为这么多数据分配一个非常大的存 储空间，如果分散到多个不连续的页中存储的话需要把这些页关联起来， FIL_PAGE_PREV 和 FIL_PAGE_NEXT 就分别代表本页的上一个和下一个页的页号。这样通过建立一个双向链表把许许多多的页就都串联起来了， 而无需这些页在物理上真正连着。需要注意的是，并不是所有类型的页都有上一个和下一个页的属性，不过 我们本集中唠叨的 数据页 （也就是类型为 FIL_PAGE_INDEX 的页）是有这两个属性的，所以所有的数据页其 实是一个双链表，就像这样：</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220906171054722.png" alt="image-20220906171054722" tabindex="0" loading="lazy"><figcaption>image-20220906171054722</figcaption></figure><h2 id="file-trailer" tabindex="-1"><a class="header-anchor" href="#file-trailer" aria-hidden="true">#</a> File Trailer</h2><p>我们知道<code> InnoDB 存储引擎会把数据存储到磁盘上</code>，但是磁盘速度太慢，需要以<code>页</code>为单位<code>把数据加载到内存中处理</code>，如果该页中的数据在内存中被修改了，那么在修改后的某个时间需要把数据同步到磁盘中。但是在<code>同步了一半的时候中断电了</code>咋办，这不是莫名尴尬么？为了<code>检测一个页是否完整</code>（也就是在同步的时候有没有发生只同步一半的尴尬情况），设计 InnoDB 的大叔们在<code>每个页的尾部都加了一个 File Trailer 部分</code>，这个部分由 8 个字节组成，可以分成2个小部分：</p><ul><li>前4个字节代表页的校验和</li></ul><p>这个部分是和 File Header 中的校验和相对应的。**每当一个页面在内存中修改了，在同步之前就要把它的校验和算出来，因为<code>File Header</code>在页面的前边，所以校验和会被首先同步到磁盘，当完全写完时，校验和也会被写到页的尾部，如果完全同步成功，则页的首部和尾部的校验和应该是一致的。**如果写了一半儿断电了，那么在 File Header 中的校验和就代表着已经修改过的页，而在 File Trialer 中的校验和代表着原先的页，二者不同则意味着同步中间出了错。</p><ul><li>后4个字节代表页面被最后修改时对应的日志序列位置（LSN）</li></ul><p>这个部分也是为了校验页的完整性的，只不过我们目前还没说 LSN 是个什么意思，所以大家可以先不用管这个属性。</p><p><strong>这个 File Trailer 与 File Header 类似，都是所有类型的页通用的。</strong></p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结" aria-hidden="true">#</a> 总结</h2><ol><li><p>InnoDB为了不同的目的而设计了不同类型的页，我们把用于存放记录的页叫做 <strong>数据页</strong> 。</p></li><li><p>一个数据页可以被大致划分为7个部分，分别是</p></li></ol><ul><li><p>File Header ，表示页的一些通用信息，占固定的38字节。</p></li><li><p>Page Header ，表示数据页专有的一些信息，占固定的56个字节。</p></li><li><p>Infimum + Supremum ，两个虚拟的伪记录，分别表示页中的最小和最大记录，占固定的 26 个字节。</p></li><li><p>User Records ：真实存储我们插入的记录的部分，大小不固定。</p></li><li><p>Free Space ：页中尚未使用的部分，大小不确定。</p></li><li><p>Page Directory ：页中的某些记录相对位置，也就是各个槽在页面中的地址偏移量，大小不固定，插入的记录越多，这个部分占用的空间越多。</p></li><li><p>File Trailer ：用于检验页是否完整的部分，占用固定的8个字节。</p></li></ul><ol start="3"><li><p>每个记录的头信息中都有一个 next_record 属性，从而使页中的所有记录串联成一个 单链表 。</p></li><li><p>InnoDB 会为把页中的记录划分为若干个组，每个组的最后一个记录的地址偏移量作为一个 槽 ，存放在Page Directory 中，所以在一个页中根据主键查找记录是非常快的，分为两步：</p></li></ol><ul><li><p>通过二分法确定该记录所在的槽。</p></li><li><p>通过记录的next_record属性遍历该槽所在的组中的各个记录。</p></li></ul><ol start="5"><li><p>每个数据页的 File Header 部分都有上一个和下一个页的编号，所以所有的数据页会组成一个 双链表 。</p></li><li><p>为保证从内存中同步到磁盘的页的完整性，在页的首部和尾部都会存储页中数据的校验和和页面最后修改时对应的 LSN 值，如果首部和尾部的校验和和 LSN 值校验不成功的话，就说明同步过程出现了问题。</p></li></ol>`,117),o=[t];function i(c,l){return a(),s("div",null,o)}const u=n(e,[["render",i],["__file","2.InnoDB数据页结构.html.vue"]]);export{u as default};
