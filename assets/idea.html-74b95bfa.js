import{ac as d,F as c,G as l,D as a,R as e,M as n,ad as i,V as r}from"./framework-f12b30cc.js";const o={},p=i(`<h1 id="开发常用" tabindex="-1"><a class="header-anchor" href="#开发常用" aria-hidden="true">#</a> 开发常用</h1><h2 id="mac基础操作" tabindex="-1"><a class="header-anchor" href="#mac基础操作" aria-hidden="true">#</a> Mac基础操作</h2><blockquote><p>剪切文件</p></blockquote><p>command + c 复制</p><p>command + option + v剪切</p><blockquote><p>关闭程序</p></blockquote><p>command + q</p><blockquote><p>关闭当前页面</p></blockquote><p>浏览器（command + w）</p><p>程序最小化（command + w）</p><h3 id="mac安装软件的-已损坏-无法打开" tabindex="-1"><a class="header-anchor" href="#mac安装软件的-已损坏-无法打开" aria-hidden="true">#</a> Mac安装软件的“已损坏，无法打开</h3><p>在终端粘贴复制输入命令（注意最后有一个空格）：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo xattr -r -d com.apple.quarantine 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>然后打开 **“访达”（Finder）**进入 <strong>“应用程序”</strong> 目录，找到该软件图标，将图标拖到刚才的终端窗口里面，会得到如下组合(如图所示)：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo xattr -r -d com.apple.quarantine /Applications/WebStrom.app
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><blockquote><p>homebrew安装指定版本node</p></blockquote><ol><li>如果之前使用<code>brew install node</code>安装过node,需要先执行<code>brew unlink node</code>来&#39;解绑&#39;node</li><li>查找可用的node版本 <code>brew search node</code></li><li>安装你需要的版本, 比如 <code>brew install node@8</code></li><li>然后 <code>brew link node@8</code>, 这一步可能会报错, 按照提示执行命令就ok了, 比如我最后执行的是<code>brew link --overwrite --force node@8</code></li><li><code>node -v</code> 不出意外, 就安装好了你想要的node版本</li></ol><blockquote><p>mac快捷键</p></blockquote><ul><li><strong>Command-Z</strong>：撤销上一个命令。随后您可以按 Shift-Command-Z 来重做，从而反向执行撤销命令。在某些 App 中，您可以撤销和重做多个命令。</li></ul><h3 id="mac删除被锁定的应用" tabindex="-1"><a class="header-anchor" href="#mac删除被锁定的应用" aria-hidden="true">#</a> mac删除被锁定的应用</h3><p>sudo /usr/bin/chflags -R noschg /Applications/Karabiner-EventViewer.app</p><p>sudo rm -rf Karabiner-EventViewer.app</p><blockquote><p>PD破解</p></blockquote>`,23),h={href:"https://qiujunya.com/article/2022/9/12/248.html",target:"_blank",rel:"noopener noreferrer"},u=i(`<h3 id="mac查看隐藏文件" tabindex="-1"><a class="header-anchor" href="#mac查看隐藏文件" aria-hidden="true">#</a> mac查看隐藏文件</h3><p>Cmd + Shift +句点 (.)</p><h3 id="mac在根目录创建软连接" tabindex="-1"><a class="header-anchor" href="#mac在根目录创建软连接" aria-hidden="true">#</a> mac在根目录创建软连接</h3><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>sudo vi /etc/synthetic.conf

在文件中添加类似下面的
data /Users/your_name/data 
home /Users/your_name/home 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>重启电脑</p><h3 id="mac的netstat和lsof使用" tabindex="-1"><a class="header-anchor" href="#mac的netstat和lsof使用" aria-hidden="true">#</a> Mac的netstat和lsof使用</h3><p>使用netstat命令，用来显示各种网络信息，比如网络连接、端口号、协议、状态、进程ID等信息；</p><p>使用lsof命令，用来显示当前系统打开文件的信息，因为包括端口和网络状态在linux和mac中都属于文件，所以系统也为它们分配了文件描述法fd</p><p><strong>在Linux上面使用的方法通常为：netstat -nltp，参数含义为：查询TCP协议写Listen的信息</strong></p><p>-a (all)显示所有选项，默认不显示LISTEN相关 -t (tcp)仅显示tcp相关选项 -u (udp)仅显示udp相关选项 -n 拒绝显示别名，能显示数字的全部转化成数字。 -l 仅列出有在 Listen (监听) 的服務状态</p><p>-p 显示建立相关链接的程序名 -r 显示路由信息，路由表 -e 显示扩展信息，例如uid等 -s 按各个协议进行统计 -c 每隔一个固定时间，执行该netstat命令</p><p><strong>但是在Mac上执行该命令，会报错误：</strong></p><p>netstat: option requires an argument -- p Usage: netstat [-AaLlnW] [-f address_family | -p protocol] netstat [-gilns] [-f address_family] netstat -i | -I interface [-w wait] [-abdgRtS] netstat -s [-s] [-f address_family | -p protocol] [-w wait] netstat -i | -I interface -s [-f address_family | -p protocol] netstat -m [-m] netstat -r [-Aaln] [-f address_family] netstat -rs [-s]</p><h3 id="mac上使用" tabindex="-1"><a class="header-anchor" href="#mac上使用" aria-hidden="true">#</a> Mac上使用</h3><p><strong>在Mac上正确使用的方法是：即-f需要加上地址族，-p需要加上协议TCP或者UDP等</strong></p><p>a)如果需要查询inet，netstat -anvf inet</p><p>b）如果需要查询TCP， netstat -anvp tcp</p><p>c）如果需要查询UDP，netstat -anvp udp</p><h3 id="lsof用法" tabindex="-1"><a class="header-anchor" href="#lsof用法" aria-hidden="true">#</a> lsof用法</h3><p>lsof输出各列的信息的意义如下：</p><p>command、pid、user 用来标识进程的名称、ID、拥有者</p><p>fd文件描述符file description，应用程序通过文件描述符来识别该文件</p><p>type、size、name，文件类型、大小、文件的确切名称</p><p>device 磁盘的名称，</p><p>node 索引节点，该文件在磁盘上的标识</p><p><strong>lsof -i:8080 查看8080端口的使用情况</strong></p><p>lsof -i4TCP:8080， 查看8080端口的TCP情况</p><h4 id="mac上开启多个终端" tabindex="-1"><a class="header-anchor" href="#mac上开启多个终端" aria-hidden="true">#</a> Mac上开启多个终端</h4><p>command+n</p><h4 id="mac上开启一个窗口多个终端选项" tabindex="-1"><a class="header-anchor" href="#mac上开启一个窗口多个终端选项" aria-hidden="true">#</a> MAc上开启一个窗口多个终端选项</h4><p>command+t</p><h2 id="mac上docker相关操作" tabindex="-1"><a class="header-anchor" href="#mac上docker相关操作" aria-hidden="true">#</a> Mac上docker相关操作</h2><h3 id="安装redis" tabindex="-1"><a class="header-anchor" href="#安装redis" aria-hidden="true">#</a> 安装Redis</h3><h4 id="直接启动版" tabindex="-1"><a class="header-anchor" href="#直接启动版" aria-hidden="true">#</a> 直接启动版</h4><p>不带密码可以直接去掉后面的--requirepass参数</p><p><strong>测试环境</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">6379</span>:6379 <span class="token parameter variable">--name</span> redis <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /mydata/redis/data:/data <span class="token punctuation">\\</span>
<span class="token parameter variable">-d</span> redis:7 redis-server <span class="token parameter variable">--appendonly</span> <span class="token function">yes</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>参数说明：</p></blockquote><ul><li>appendonly yes #开启AOF模式（Redis可以实现数据的持久化存储，即将数据保存到磁盘上）</li><li>-d redis 表示后台启动redis</li></ul><blockquote><p>测试</p></blockquote><p>docker exec -it redis redis-cli</p><p><strong>生产环境</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">6379</span>:6379 <span class="token parameter variable">--name</span> redis <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /mydata/redis/data:/data <span class="token punctuation">\\</span>
<span class="token parameter variable">-d</span> redis:7 redis-server <span class="token parameter variable">--appendonly</span> <span class="token function">yes</span> <span class="token parameter variable">--requirepass</span> <span class="token string">&quot;Baidu12#$&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="配置文件版" tabindex="-1"><a class="header-anchor" href="#配置文件版" aria-hidden="true">#</a> 配置文件版</h4><p>前提是下好配置文件在本地，并配置好了</p>`,45),m={href:"http://download.redis.io/redis-stable/redis.conf",target:"_blank",rel:"noopener noreferrer"},b=i(`<div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /mydata/redis
<span class="token function">wget</span> http://download.redis.io/redis-stable/redis.conf
<span class="token function">vi</span> redis.conf

<span class="token builtin class-name">bind</span> <span class="token number">127.0</span>.0.1  //127.0.0.1 限制只能本机访问 将其改为0.0.0.0
protected-mode no <span class="token comment"># 默认yes，开启保护模式，限制为本地访问</span>
daemonize no 默认no，改为yes意为以守护进程方式启动，yes会使配置文件方式启动redis失败（一开启就退出）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>启动容器</p></blockquote><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">6379</span>:6379 <span class="token parameter variable">--name</span> redis <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /mydata/redis/redis.conf:/etc/redis/redis.conf <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /mydata/redis/data:/data <span class="token punctuation">\\</span>
<span class="token parameter variable">-d</span> redis:6.2.6 redis-server /etc/redis/redis.conf <span class="token parameter variable">--appendonly</span> <span class="token function">yes</span> <span class="token parameter variable">--requirepass</span> <span class="token string">&quot;Baidu12#$&quot;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="安装nginx" tabindex="-1"><a class="header-anchor" href="#安装nginx" aria-hidden="true">#</a> 安装Nginx</h3><ul><li>先运行一次容器（为了拷贝配置文件）：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 <span class="token parameter variable">--name</span> nginx <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /mydata/nginx/html:/usr/share/nginx/html <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /mydata/nginx/logs:/var/log/nginx  <span class="token punctuation">\\</span>
<span class="token parameter variable">-d</span> nginx:1.22
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>将容器内的配置文件拷贝到指定目录：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> container <span class="token function">cp</span> nginx:/etc/nginx /mydata/nginx/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>修改文件名称：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token builtin class-name">cd</span> /mydata/nginx/ <span class="token operator">&amp;&amp;</span> <span class="token function">mv</span> nginx conf
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>终止并删除容器：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> stop nginx <span class="token operator">&amp;&amp;</span> <span class="token function">docker</span> <span class="token function">rm</span> nginx
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><ul><li>使用如下命令启动Nginx服务：</li></ul><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code><span class="token function">docker</span> run <span class="token parameter variable">-p</span> <span class="token number">80</span>:80 <span class="token parameter variable">--name</span> nginx <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /mydata/nginx/html:/usr/share/nginx/html <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /mydata/nginx/logs:/var/log/nginx  <span class="token punctuation">\\</span>
<span class="token parameter variable">-v</span> /mydata/nginx/conf:/etc/nginx <span class="token punctuation">\\</span>
<span class="token parameter variable">-d</span> nginx:1.22
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="容器开机启动" tabindex="-1"><a class="header-anchor" href="#容器开机启动" aria-hidden="true">#</a> 容器开机启动</h3><p>docker update --restart=always xxx</p><h3 id="阿里云镜像加速" tabindex="-1"><a class="header-anchor" href="#阿里云镜像加速" aria-hidden="true">#</a> 阿里云镜像加速</h3>`,17),v={href:"https://tptpe526.mirror.aliyuncs.com",target:"_blank",rel:"noopener noreferrer"},g=a("h2",{id:"mac上java相关操作",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#mac上java相关操作","aria-hidden":"true"},"#"),e(" Mac上Java相关操作")],-1),k=a("h3",{id:"nacos启动",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#nacos启动","aria-hidden":"true"},"#"),e(" nacos启动")],-1),f={href:"http://startup.sh",target:"_blank",rel:"noopener noreferrer"},x=i('<h3 id="idea自动导包" tabindex="-1"><a class="header-anchor" href="#idea自动导包" aria-hidden="true">#</a> idea自动导包</h3><figure><img src="https://raw.githubusercontent.com/YuyanCai/imagebed/main/image-20221102223226355.png" alt="image-20221102223226355" tabindex="0" loading="lazy"><figcaption>image-20221102223226355</figcaption></figure><ul><li>勾选标注第1个选项，IDEA 自动帮我们导入需要用到的包。但是对于那些同名的包，还是需要手动 Alt + Enter 进行导入的</li><li>勾选标注第2个选项，IDEA自动帮我们优化导入的包，比如自动去掉一些没有用到的包。</li></ul><h3 id="vim撤销-恢复" tabindex="-1"><a class="header-anchor" href="#vim撤销-恢复" aria-hidden="true">#</a> vim撤销,恢复</h3><p>按u</p><p>恢复是ctrl+R</p><h2 id="jmeter使用" tabindex="-1"><a class="header-anchor" href="#jmeter使用" aria-hidden="true">#</a> JMETER使用</h2>',7),_={href:"https://blog.csdn.net/zuojunyuan/article/details/94152368",target:"_blank",rel:"noopener noreferrer"},y=i('<h2 id="前端返回状态码错误" tabindex="-1"><a class="header-anchor" href="#前端返回状态码错误" aria-hidden="true">#</a> 前端返回状态码错误</h2><h3 id="_401" tabindex="-1"><a class="header-anchor" href="#_401" aria-hidden="true">#</a> 401</h3><p>在网页能访问,在测试软件里不能访问.只需要把拦截器路径中设置一下就可以</p><h2 id="mac上使用idea小技巧" tabindex="-1"><a class="header-anchor" href="#mac上使用idea小技巧" aria-hidden="true">#</a> Mac上使用idea小技巧</h2><h3 id="提取方法" tabindex="-1"><a class="header-anchor" href="#提取方法" aria-hidden="true">#</a> 提取方法</h3><p>commadn+alt+m</p><h3 id="模拟微服务集群环境" tabindex="-1"><a class="header-anchor" href="#模拟微服务集群环境" aria-hidden="true">#</a> 模拟微服务集群环境</h3><p>在services里面点击服务按command+d</p><h3 id="快速try-catch" tabindex="-1"><a class="header-anchor" href="#快速try-catch" aria-hidden="true">#</a> 快速try catch</h3><p>ctrl + alt + t</p><h3 id="让字母大写" tabindex="-1"><a class="header-anchor" href="#让字母大写" aria-hidden="true">#</a> 让字母大写</h3><p>command + shift + u</p><h3 id="选中多行" tabindex="-1"><a class="header-anchor" href="#选中多行" aria-hidden="true">#</a> 选中多行</h3><p>按住opetion(alt)键之后可以做到</p><h3 id="撤销回退" tabindex="-1"><a class="header-anchor" href="#撤销回退" aria-hidden="true">#</a> 撤销回退</h3><p>ctrl + shift + z</p><h2 id="mac上使用webstrom小技巧" tabindex="-1"><a class="header-anchor" href="#mac上使用webstrom小技巧" aria-hidden="true">#</a> Mac上使用WebStrom小技巧</h2><p>关闭eslint检查</p>',18);function q(w,M){const s=r("ExternalLinkIcon"),t=r("Vssue");return c(),l("div",null,[p,a("p",null,[a("a",h,[e("https://qiujunya.com/article/2022/9/12/248.html"),n(s)])]),u,a("p",null,[e("redis.conf的配置文件可以在 "),a("a",m,[e("http://download.redis.io/redis-stable/redis.conf"),n(s)]),e(" 上下载")]),b,a("p",null,[e('"registry-mirrors": ["'),a("a",v,[e("https://tptpe526.mirror.aliyuncs.com"),n(s)]),e('"]')]),g,k,a("p",null,[e("sh "),a("a",f,[e("startup.sh"),n(s)]),e(" -m standalone")]),x,a("p",null,[a("a",_,[e("https://blog.csdn.net/zuojunyuan/article/details/94152368"),n(s)])]),y,n(t)])}const A=d(o,[["render",q],["__file","idea.html.vue"]]);export{A as default};
