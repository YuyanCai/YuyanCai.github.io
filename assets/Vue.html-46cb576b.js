import{ac as l,F as i,G as c,D as n,R as s,M as e,H as o,ad as a,V as u}from"./framework-f12b30cc.js";const r={},d=n("h1",{id:"vue核心",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#vue核心","aria-hidden":"true"},"#"),s(" Vue核心")],-1),k=n("h2",{id:"_1-1-简介",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#_1-1-简介","aria-hidden":"true"},"#"),s(" 1.1 简介")],-1),v={href:"https://vuejs.org/",target:"_blank",rel:"noopener noreferrer"},m={href:"https://cn.vuejs.org/",target:"_blank",rel:"noopener noreferrer"},g=a('<p><strong>动态构建用户界面的渐进式JavaScript框架</strong></p><h3 id="_1-1-1-vue的特点" tabindex="-1"><a class="header-anchor" href="#_1-1-1-vue的特点" aria-hidden="true">#</a> 1.1.1 Vue的特点</h3><ol><li>遵循MVVM模式</li><li>编码简洁，体积小，运行效率高，适合移动/PC端开发</li><li>它本身只关注UI，可以引入其它第三方库开发项目</li><li>借鉴 Angular 的模板和数据绑定技术</li><li>借鉴 React 的组件化和虚拟DOM技术</li></ol><h3 id="vue周边库" tabindex="-1"><a class="header-anchor" href="#vue周边库" aria-hidden="true">#</a> Vue周边库</h3><ul><li>vue-cli：vue脚手架</li><li>vue-resource</li><li>axios</li><li>vue-router：路由</li><li>vuex：状态管理</li><li>element-ui：基于vue的UI组件库（PC端）</li></ul><h2 id="_1-2-初识vue" tabindex="-1"><a class="header-anchor" href="#_1-2-初识vue" aria-hidden="true">#</a> 1.2 初识Vue</h2><h3 id="开发环境部署" tabindex="-1"><a class="header-anchor" href="#开发环境部署" aria-hidden="true">#</a> 开发环境部署</h3><blockquote><p>下载vue开发者工具</p></blockquote><p><mark>Vue.js和Vue.js.min</mark></p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220415190927926.png" alt="image-20220415190927926" tabindex="0" loading="lazy"><figcaption>image-20220415190927926</figcaption></figure><p><mark>关闭生产提示</mark></p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220415192249965.png" alt="image-20220415192249965" tabindex="0" loading="lazy"><figcaption>image-20220415192249965</figcaption></figure><h3 id="设置图标" tabindex="-1"><a class="header-anchor" href="#设置图标" aria-hidden="true">#</a> 设置图标</h3><p><mark>强制刷新</mark></p><p>shift+浏览器的刷新</p><p><strong>正常请求，如果没有就不在请求了。所以可能看不到一些找不到图标的报错</strong></p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220415193216281.png" alt="image-20220415193216281" tabindex="0" loading="lazy"><figcaption>image-20220415193216281</figcaption></figure><h3 id="hello-world" tabindex="-1"><a class="header-anchor" href="#hello-world" aria-hidden="true">#</a> Hello World</h3>',18),b=n("li",null,"想让Vue工作，就必须创建一个Vue实例，且要传入一个配置对象；",-1),h=n("li",null,[n("strong",null,"root容器里的代码依然符合html规范，只不过混入了一些特殊的Vue语法；")],-1),y=n("li",null,[n("mark",null,"root容器里的代码被称为【Vue模板】"),s("；")],-1),f=n("li",null,[n("strong",null,"Vue实例和容器是一一对应的(不能一对多，也不能多对一)；")],-1),q=n("li",null,"真实开发中只有一个Vue实例，并且会配合着组件一起使用；",-1),x=n("li",null,"一旦data中的数据发生改变，那么页面中用到该数据的地方也会自动更新（MVVM）",-1),w=a('<figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220415200000276.png" alt="image-20220415200000276" tabindex="0" loading="lazy"><figcaption>image-20220415200000276</figcaption></figure><p><strong>注意区分：JS表达式和JS代码（语句）：</strong></p><ol><li>表达式：一个表达式会产生一个值，可以放在任何一个需要值的地方 （1）a （2）a+b （3）demo(1) （4）x === y ‘a’ : ‘b’</li><li>js代码（语句） （1）if(){} （2）for(){}</li></ol><blockquote><p>表达式就是特殊的JS语句，能控制代码能否执行的就是JS语句</p></blockquote><h2 id="_1-3-模板语法" tabindex="-1"><a class="header-anchor" href="#_1-3-模板语法" aria-hidden="true">#</a> 1.3 模板语法</h2><p>概念： 容器里面的代码就是模板语法</p><p>模板语法分为两大类：</p><p><strong>差值语法：</strong></p><p>功能：用于解析标签体内容。</p>',9),j=a(`<p><strong>指令语法：</strong></p><p>功能：用于解析标签（包括：标签属性、标签体内容、绑定事件...）</p><p>备注：Vue中有很多的指令，且形式都是：v-</p><p>举例：v-bind:hred=&quot;xxx&quot; 或 简写为 :href=&quot;xxx&quot;，xxx同样要写js表达式，且可以直接读取到data中的所有属性。</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;a href=&quot;url&quot;&gt;&lt;/a&gt;   &lt;!-- 此时的url只是一个字符串 --&gt;
&lt;a href={{url}}&gt;&lt;/a&gt; &lt;!-- 差值写在属性的写法已经被Vue弃用 --&gt;

&lt;a v-bind:href=&quot;url&quot;&gt;&lt;/a&gt;  &lt;!-- 正确用法 --&gt;
&lt;a :href=&quot;url&quot;&gt;&lt;/a&gt;  &lt;!-- 简写 --&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220415214101999.png" alt="image-20220415214101999" tabindex="0" loading="lazy"><figcaption>image-20220415214101999</figcaption></figure><h2 id="_1-4-数据绑定" tabindex="-1"><a class="header-anchor" href="#_1-4-数据绑定" aria-hidden="true">#</a> 1.4 数据绑定</h2><p>Vue中有2种数据绑定的方式：</p><p>单向绑定（v-bind）：<strong>数据只能从data流向页面。</strong></p><p>双向绑定（v-model）：<strong>数据不仅能从data流向页面，还可以从页面流向data。</strong></p><p>备注：</p><p><strong>1.双向绑定一般都应用在表单元素上（如：input、select等）</strong></p><p><strong>2.v-model:value 可以简写为 v-model，因为v-model默认收集的就是value值。</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 单向数据绑定 !--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">:value</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 双向数据绑定 !--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>错误示例：</strong> 以下代码是错误的，因为v-model只能应用在表单类元素（输入类元素）上</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name"><span class="token namespace">v-model:</span>x</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>hello<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span> 
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220415220349306.png" alt="image-20220415220349306" tabindex="0" loading="lazy"><figcaption>image-20220415220349306</figcaption></figure><h3 id="el和data的两种写法" tabindex="-1"><a class="header-anchor" href="#el和data的两种写法" aria-hidden="true">#</a> el和data的两种写法</h3><p>el有2种写法：</p><p>（1）new Vue时候el属性； （2）先创建Vue实例，随后再通过vm.$mount(’#root’)指定el的值</p><p>data有2种写法：</p><p>（1）对象式 （2）函数式 如何选择？目前哪种写法都可以，以后学到组件时，data必须使用函数式，否则会报错</p><p>一个重要的原则：</p><p>只要是Vue所管理的函数，一定不要写箭头函数，一旦写了箭头函数，this就不再是Vue实例了，而是window</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220415221031629.png" alt="image-20220415221031629" tabindex="0" loading="lazy"><figcaption>image-20220415221031629</figcaption></figure><h3 id="mvvm" tabindex="-1"><a class="header-anchor" href="#mvvm" aria-hidden="true">#</a> MVVM</h3><blockquote><p><strong><mark>vm就是vue的实例对象</mark></strong></p></blockquote><p><strong>MVVM模型：</strong></p><p>M：模型(Model)：data中的数据</p><p>V：视图(View)：Vue模板</p><p>VM：视图模型(ViewModel)：Vue实例对象（绑定数据，dom监听）</p><p><strong>观察发现：</strong></p><p>data中所有的属性，最后都出现在了vm身上</p><p>vm身上所有的属性 及 Vue原型上所有属性，在Vue模板中都可以直接访问</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220415225307787.png" alt="image-20220415225307787" tabindex="0" loading="lazy"><figcaption>image-20220415225307787</figcaption></figure><p><strong>我们来重点理解中间的视图模型（VM）</strong></p><p>中间的vm帮我们干了很多事，前端的框架都是这个套路</p><p><mark>把一堆乱七八糟的数据和一堆dom结构，vue呢在中间做了个连接，它就是中间一个桥梁一个纽带</mark></p><p>你把数据放在我要求放好的位置，然后你写出这种模板代码。模板里具体怎么插入值那你就要学习我的语法，像vue的插值语法啊，指令啊之类的。然后框架开始工作就可以将左边和右边的相互连接起来，并且还能给你承诺数据怎么变页面就怎么变</p><p><strong>代码理解</strong></p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220415224437900.png" alt="image-20220415224437900" tabindex="0" loading="lazy"><figcaption>image-20220415224437900</figcaption></figure><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220415230556981.png" alt="image-20220415230556981" tabindex="0" loading="lazy"><figcaption>image-20220415230556981</figcaption></figure><p>我们也可以打印vm自带的变量或方法</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220415230714129.png" alt="image-20220415230714129" tabindex="0" loading="lazy"><figcaption>image-20220415230714129</figcaption></figure><h2 id="_1-5-事件" tabindex="-1"><a class="header-anchor" href="#_1-5-事件" aria-hidden="true">#</a> 1.5 事件</h2><h3 id="事件处理" tabindex="-1"><a class="header-anchor" href="#事件处理" aria-hidden="true">#</a> 事件处理</h3>`,46),V=n("ol",null,[n("li",null,[n("p",null,"使用 v-on:xxx 或 @xxx 绑定事件，其中xxx是事件名；")]),n("li",null,[n("p",null,"事件的回调需要配置在methods对象中,最终会再vm上；")]),n("li",null,[n("p",null,"methods中配置的函数，不要用箭头函数！否则this就不是vm了而是window；")]),n("li",null,[n("p",null,"methods中配置的函数，都是被Vue所管理的函数，this的指向是vm 或 组件实例对象；")]),n("li",null,[n("p",null,[s('@click="demo" 和 @click="demo('),n("span",{class:"katex"},[n("span",{class:"katex-mathml"},[n("math",{xmlns:"http://www.w3.org/1998/Math/MathML"},[n("semantics",null,[n("mrow",null,[n("mi",null,"e"),n("mi",null,"v"),n("mi",null,"e"),n("mi",null,"n"),n("mi",null,"t"),n("mo",{stretchy:"false"},")"),n("mi",{mathvariant:"normal"},'"'),n("mtext",null,"效果一致，前者默认参数就是事件对象，后者要用")]),n("annotation",{encoding:"application/x-tex"},'event)" 效果一致，前者默认参数就是事件对象，后者要用')])])]),n("span",{class:"katex-html","aria-hidden":"true"},[n("span",{class:"base"},[n("span",{class:"strut",style:{height:"1em","vertical-align":"-0.25em"}}),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord mathnormal",style:{"margin-right":"0.03588em"}},"v"),n("span",{class:"mord mathnormal"},"e"),n("span",{class:"mord mathnormal"},"n"),n("span",{class:"mord mathnormal"},"t"),n("span",{class:"mclose"},")"),n("span",{class:"mord"},'"'),n("span",{class:"mord cjk_fallback"},"效果一致，前者默认参数就是事件对象，后者要用")])])]),s("event才能生成事件对象，并且可以传多个参数；")])])],-1),_=a(`<p>备注：<mark>method上面的方法最终也会出现在vm上面</mark>，但它并没有作数据代理，因为没有必要，函数一旦定义好就直接拿来用。</p><p>测试给函数传参</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220415232447168.png" alt="image-20220415232447168" tabindex="0" loading="lazy"><figcaption>image-20220415232447168</figcaption></figure><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220415234027874.png" alt="image-20220415234027874" tabindex="0" loading="lazy"><figcaption>image-20220415234027874</figcaption></figure><h3 id="事件修饰符" tabindex="-1"><a class="header-anchor" href="#事件修饰符" aria-hidden="true">#</a> 事件修饰符</h3><blockquote><p>事件冒泡就是事件一个接一个的发生</p></blockquote><p><mark>prevent</mark></p><p>阻止默认事件（常用）</p><p><strong>本来弹窗完会跳转到百度（跳转到百度就属于默认事件），但是加上事件修饰符prevent的话弹完窗就不会跳到百度了</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;a href=&quot;http://www.baidu.com&quot; @click.prevent=&quot;showInfo&quot;&gt;点我跳转到百度&lt;/a&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><mark>stop</mark></p><p>阻止事件冒泡（常用）</p><p><strong>触发完按钮的事件，又会触发div的事件。事件一个接一个的发生了这就叫事件冒泡</strong></p><p><strong>在单机事件后加上stop即可阻止事件冒泡</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;div class=&quot;demo1&quot; @click=&quot;showInfo&quot;&gt;
	&lt;button @click.stop=&quot;showInfo&quot;&gt;点我提示信息&lt;/button&gt; &lt;!-- 没加会触发外层事件，加了则不会 --&gt;
&lt;/div&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><mark>once</mark></p><p>事件只触发一次（常用）</p><p><strong>本来是点一次弹一次，加上once后只会弹一次</strong></p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;button @click.once=&quot;showInfo&quot;&gt;点我弹窗&lt;/a&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>captur</p><p>使用事件的捕获模式</p><p><strong>事件流</strong> 分为 <strong>捕获</strong> 和 <strong>冒泡</strong></p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/6c2cdec259794b0e901565e447f67986.png" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><ol><li>当点击div2的时候先经过两个阶段：事件捕获=&gt;事件冒泡，默认是事件冒泡处理事件；</li><li>捕获阶段由外往内，冒泡阶段由内往外；</li></ol><p>self</p><p>只有event.target是当前操作的元素时才触发事件</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box1<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@click.capture</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>showMsg(1)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    div1
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>box2<span class="token punctuation">&quot;</span></span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>showMsg(2)<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>  <span class="token comment">&lt;!-- 没加输出1,2，加了输出2,1 --&gt;</span>
        div2
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>passive</p><p>先执行默认行为，后执行回调函数</p><h3 id="键盘事件" tabindex="-1"><a class="header-anchor" href="#键盘事件" aria-hidden="true">#</a> 键盘事件</h3><p><strong>1.Vue中常用的按键别名：</strong></p><p>回车 =&gt; enter 删除 =&gt; delete（捕获“删除(delete)”和“退格(BackSpace)”键） 退出 =&gt; esc 空格 =&gt; space 换行 =&gt; tab（特殊，必须配合 keydown 去使用） 上 =&gt; up 下 =&gt; down 左 =&gt; left 右 =&gt; right</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220416090552186.png" alt="image-20220416090552186" tabindex="0" loading="lazy"><figcaption>image-20220416090552186</figcaption></figure><p>其他的键盘事件类似</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220416090828285.png" alt="image-20220416090828285" tabindex="0" loading="lazy"><figcaption>image-20220416090828285</figcaption></figure><p><strong>2.Vue未提供别名的案件，可以使用按键原始的key值去绑定，但注意要转为kebab-case（短横线命名）</strong></p><p><strong>3.系统修饰键（用法特殊）：ctrl、alt、shift、meta</strong> （1）配合keyup使用：按下修饰键的同时，再按下其他键，随后释放其它键，事件才被触发。(此时的e.key值是其它键，而不是系统修饰键) （2）配合keydown使用：正常触发事件。</p><h3 id="事件总结" tabindex="-1"><a class="header-anchor" href="#事件总结" aria-hidden="true">#</a> 事件总结</h3><p>修饰符小技巧：事件修饰符可以连着写</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;!-- 阻止默认事件和冒泡 --&gt;
&lt;div class=&quot;demo1&quot; @click=&quot;showInfo&quot;&gt;
	&lt;a href=&quot;http://www.atguigu.com&quot; @click.stop.prevent=&quot;showInfo&quot;&gt;点我提示信息&lt;/a&gt;
&lt;/div&gt;


&lt;!-- 按 ctrl + y 才触发（系统修饰符 + 键名） --&gt;
&lt;input type=&quot;text&quot; placeholder=&quot;按下回车提示输入&quot; @keyup.ctrl.y=&quot;showInfo&quot;&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-6-计算属性" tabindex="-1"><a class="header-anchor" href="#_1-6-计算属性" aria-hidden="true">#</a> 1.6 计算属性</h2><h3 id="姓名案例" tabindex="-1"><a class="header-anchor" href="#姓名案例" aria-hidden="true">#</a> 姓名案例</h3><blockquote><p>将数据展示到页面时要清楚，你模板里写的是指令还是插值</p><p>Vue官方建议组件模板应该质包含简单的表达式，<strong>复杂的表达式则应该重构为计算属性或方法</strong></p></blockquote><p><strong>差值语法实现：</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	姓：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>firstName<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>lastName<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{firstName.slice(0,3)}}-{{lastName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&#39;#root&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">&#39;张&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">&#39;三&#39;</span> <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>methods实现：</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    姓：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>firstName<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>lastName<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> 
    姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{fullName()}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>fullName<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>点我<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&#39;#root&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">&#39;张&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">&#39;三&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token function">fullName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">&#39;-&#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token punctuation">}</span> <span class="token comment">// this指向vm</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>注意methods方法在绑定事件的时候才可以省略小括号，在差值里不能</strong></li><li>只要data中的数据发生改变，Vue就会重新解析模板，只有重新解析模板才会拿到最新的值</li></ul><p><strong>computed实现：</strong></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    姓：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>firstName<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>  
    名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>lastName<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> 
    姓名：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{fullName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&#39;#root&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span> <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">&#39;张&#39;</span><span class="token punctuation">,</span> <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">&#39;三&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">fullName</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                    <span class="token comment">// 此处的this是vm</span>
                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">&#39;-&#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220416091736494.png" alt="image-20220416091736494" tabindex="0" loading="lazy"><figcaption>image-20220416091736494</figcaption></figure><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220416092857906.png" alt="image-20220416092857906" tabindex="0" loading="lazy"><figcaption>image-20220416092857906</figcaption></figure><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220416095552629.png" alt="image-20220416095552629" tabindex="0" loading="lazy"><figcaption>image-20220416095552629</figcaption></figure><h3 id="计算属性" tabindex="-1"><a class="header-anchor" href="#计算属性" aria-hidden="true">#</a> 计算属性</h3><p>对于Vue来说，<strong>data里的配置项就是属性 。</strong></p><p>而<strong>计算属性，就是拿着写完的属性去加工计算，生成一个全新的属性。</strong></p><p><strong>计算属性直接被挂载到vm上，直接读取使用即可（_data里面没有计算属性）。</strong></p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>const vm = new Vue({
    el: &#39;#root&#39;,
    data: {
        firstName: &#39;张&#39;,
        lastName: &#39;三&#39;
    },
    computed: {
        fullName: {
            get() {
             	// 此处的this是vm
                return this.firstName + &#39;-&#39; + this.lastName;
            }
        }
    }
})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><mark>get什么作用？</mark> 当有人读取fullName时，get就会被调用，且返回值就作为fullName的值。 （底层就是用Object.defineProperty的getter/setter实现的）</p><p><mark>get什么时候被调用？</mark></p><p>1.初次读取时会执行一次（往后就会取缓存里的数据） 2.<strong>所依赖的数据发生变化时会被再次调用</strong>（所以不用担心修改了值还会从缓存里获取）</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- Vue模板里有4个fullName，为什么get只被调用了一次？ 
	 因为Vue底层为computed做了一个缓存机制，重复的计算属性会到缓存里面获取 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{fullName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{fullName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{fullName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">&gt;</span></span>{{fullName}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&#39;#root&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">&#39;张&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">&#39;三&#39;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">fullName</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;get被调用了&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 只输出了一次 “get被调用了”</span>
                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">&#39;-&#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName
                <span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>set什么时候被调用？</strong> 当fullName被修改时。</p><p>如果计算属性要被修改，那必须写set函数去响应修改，且set中要引起计算时依赖的数据发生变化。</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220416111434073.png" alt="image-20220416111434073" tabindex="0" loading="lazy"><figcaption>image-20220416111434073</figcaption></figure><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 当fullName被修改时页面并没有发生变化，原因是set并没有改到firstName和lastName，它只做了输出。
	 所以要想页面也发生变化，那就得给set做一个加工，让它修改到firstName和lastName。 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&#39;#root&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">firstName</span><span class="token operator">:</span> <span class="token string">&#39;张&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">lastName</span><span class="token operator">:</span> <span class="token string">&#39;三&#39;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">fullName</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                	console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;get被调用了&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 只输出了一次 “get被调用了”</span>
                    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">+</span> <span class="token string">&#39;-&#39;</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>lastName
                <span class="token punctuation">}</span><span class="token punctuation">,</span>
                <span class="token function">set</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>
					console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;set&#39;</span><span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token comment">// 格式：张-三</span>
					<span class="token keyword">const</span> arr <span class="token operator">=</span> value<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;-&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
					<span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
					<span class="token keyword">this</span><span class="token punctuation">.</span>lastName <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
				<span class="token punctuation">}</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>computed对比methods：</strong></p><p>computed有缓存机制（复用），效率更高、调试方便（devtools上会有一个computed的分类）。</p><p>methods函数出现几次就调用几次，效率比较低。</p><h3 id="计算属性简写" tabindex="-1"><a class="header-anchor" href="#计算属性简写" aria-hidden="true">#</a> 计算属性简写</h3><blockquote><p>一般来说计算属性是不修改的，更多是读取出来展示。</p><p>并不是什么时候都能用简写，<strong>只有考虑读取，不考虑修改</strong>的时候才能用简写形式。</p></blockquote><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220416112041192.png" alt="image-20220416112041192" tabindex="0" loading="lazy"><figcaption>image-20220416112041192</figcaption></figure><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220416111815272.png" alt="image-20220416111815272" tabindex="0" loading="lazy"><figcaption>image-20220416111815272</figcaption></figure><h3 id="天气案例" tabindex="-1"><a class="header-anchor" href="#天气案例" aria-hidden="true">#</a> 天气案例</h3><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220416113336974.png" alt="image-20220416113336974" tabindex="0" loading="lazy"><figcaption>image-20220416113336974</figcaption></figure><h2 id="_1-7-监视" tabindex="-1"><a class="header-anchor" href="#_1-7-监视" aria-hidden="true">#</a> 1.7 监视</h2><p><strong>监视属性watch：</strong></p><p>1.当被监视的属性变化时，回调函数自动调用，进行相关操作；</p><p>2.监视的属性必须存在，才能进行监视！！（除了data属性，computed属性也能监视）</p><p>3.监视的两种写法：</p><p>（1）new Vue时传入watch配置； （2）通过vm.$watch监视；</p><p>（明确要监视哪些属性的时候用第一个。创建实例的时候不知道要监视谁，后续根据用户的一些行为然后才知道要监视哪个属性就用第二个）</p><p><strong>watch配置属性：</strong></p><blockquote><p>immediate如果为true 代表如果在 wacth 里声明了之后，就会立即先去执行里面的handler方法</p></blockquote><p><mark>immediate (立即的) 初始化时让handlder调用一下</mark></p><p>handler(newVal, oldVal) 当监视的属性发生改变的时候调用，参数可以拿到改变前后的值</p><p>deep 深度监听,可以监测多层级数据的改变</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220416114015488.png" alt="image-20220416114015488" tabindex="0" loading="lazy"><figcaption>image-20220416114015488</figcaption></figure><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220416114637534.png" alt="image-20220416114637534" tabindex="0" loading="lazy"><figcaption>image-20220416114637534</figcaption></figure><blockquote><p>为什么配置项里的isHot不用加引号呢？</p></blockquote><blockquote><p>因为对象里的引号不用自己写，如果要用对象里的属性要加引号</p></blockquote><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220416115735324.png" alt="image-20220416115735324" tabindex="0" loading="lazy"><figcaption>image-20220416115735324</figcaption></figure><h3 id="_1-7-1-深度监视" tabindex="-1"><a class="header-anchor" href="#_1-7-1-深度监视" aria-hidden="true">#</a> 1.7.1 深度监视</h3><p>1.Vue中的watch默认不监测对象内部值的变化（监测一层)</p><p>2.配置deep:true可以监测对象内部值变化（监测多层）</p><p>备注： （1）Vue默认是可以监视到多层级数据的改变的（修改number.a页面发生改变可以看出）。但是watch属性默认是不可以的，要想可以就得打开深度监视（为了效率）。 （2）使用watch时根据数据的具体结果，决定是否采用深度监视。</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220416120633590.png" alt="image-20220416120633590" tabindex="0" loading="lazy"><figcaption>image-20220416120633590</figcaption></figure><p>那么怎么才能监视上呢？</p><p><strong>在handler方法上面加上deep:true即可</strong></p><h3 id="_1-7-2-监视属性的简写" tabindex="-1"><a class="header-anchor" href="#_1-7-2-监视属性的简写" aria-hidden="true">#</a> 1.7.2 监视属性的简写</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
    <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&#39;#root&#39;</span><span class="token punctuation">,</span>
    <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">isHot</span><span class="token operator">:</span> <span class="token boolean">true</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">computed</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function">info</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>isHot <span class="token operator">?</span> <span class="token string">&#39;炎热&#39;</span> <span class="token operator">:</span> <span class="token string">&#39;凉爽&#39;</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function">changeWeather</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">this</span><span class="token punctuation">.</span>isHot <span class="token operator">=</span> <span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>isHot
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">watch</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token comment">// 正常写法:</span>
        <span class="token comment">/* isHot: {
            // immediate: true,
            // deep:true,
            handler(newValue, oldValue) {
                console.log(&#39;isHot被修改了&#39;, newValue, oldValue);
            }
        }, */</span>
        <span class="token comment">// 简写:</span>
        <span class="token function">isHot</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;isHot被修改了&#39;</span><span class="token punctuation">,</span> newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 正常写法：</span>
vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">&#39;isHot&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
    <span class="token comment">// immediate: true,</span>
    <span class="token comment">// deep:true,</span>
    <span class="token function">handler</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;isHot被修改了&#39;</span><span class="token punctuation">,</span> newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 简写：</span>
vm<span class="token punctuation">.</span><span class="token function">$watch</span><span class="token punctuation">(</span><span class="token string">&#39;isHot&#39;</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">newValue<span class="token punctuation">,</span> oldValue</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;isHot被修改了&#39;</span><span class="token punctuation">,</span> newValue<span class="token punctuation">,</span> oldValue<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_1-7-3-watch对比computed" tabindex="-1"><a class="header-anchor" href="#_1-7-3-watch对比computed" aria-hidden="true">#</a> 1.7.3 watch对比computed</h3><p>1.computed能完成的功能，watch都能完成。</p><p>2.watch能完成的功能，computed不一定能完成，例如：watch可以进行异步操作。（点击按钮让a过一秒+1,）</p><p>两个重要的小原则： 1.所有被Vue管理的函数，最好写成普通函数，这样this的指向才是vm 或 组件实例对象。</p><p>2.所有不被Vue所管理的函数（定时器的回调函数、ajax的回调函数、Promise的回调函数等），最好写成箭头函数，这样this的指向才是vm 或 组件实例对象。</p><h2 id="_1-8-class与style绑定" tabindex="-1"><a class="header-anchor" href="#_1-8-class与style绑定" aria-hidden="true">#</a> 1.8 class与style绑定</h2><p>class样式：</p><p>写法==:class=&quot;xxx&quot;== xxx可以是字符串、对象、数组。</p><p>字符串写法适用于：类名不确定，要动态获取。</p><p>对象写法适用于：要绑定多个样式，个数不确定，名字也不确定。</p><p>数组写法适用于：要绑定多个样式，个数确定，名字也确定，但不确定用不用。</p><p>style样式：</p><p>:style=&quot;{fontSize: xxx}&quot;其中xxx是动态值。（注意样式名得是小驼峰）</p><p>:style=&quot;[a,b]&quot;其中a、b是样式对象。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;root&quot;</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 绑定<span class="token keyword">class</span>样式<span class="token operator">--</span>字符串写法，适用于：样式的类名不确定，需要动态指定 <span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;basic&quot;</span> <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;mood&quot;</span> @click<span class="token operator">=</span><span class="token string">&quot;changeMood&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 绑定<span class="token keyword">class</span>样式<span class="token operator">--</span>数组写法，适用于：要绑定的样式个数不确定、名字也不确定 <span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;basic&quot;</span> <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;classArr&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 绑定<span class="token keyword">class</span>样式<span class="token operator">--</span>对象写法，适用于：要绑定的样式个数确定、名字也确定，但要动态决定用不用 <span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;basic&quot;</span> <span class="token operator">:</span><span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;classObj&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
    
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 绑定style样式<span class="token operator">--</span>对象写法 <span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;basic&quot;</span> <span class="token operator">:</span>style<span class="token operator">=</span><span class="token string">&quot;styleObj&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span> <span class="token operator">&lt;</span>br<span class="token operator">/</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 绑定style样式<span class="token operator">--</span>数组写法 <span class="token operator">--</span><span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>div <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">&quot;basic&quot;</span> <span class="token operator">:</span>style<span class="token operator">=</span><span class="token string">&quot;styleArr&quot;</span><span class="token operator">&gt;</span><span class="token punctuation">{</span><span class="token punctuation">{</span>name<span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
    <span class="token keyword">const</span> vm <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&#39;#root&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">&#39;尚硅谷&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">mood</span><span class="token operator">:</span> <span class="token string">&#39;normal&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">classArr</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token string">&#39;atguigu1&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;atguigu2&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;atguigu3&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>
            <span class="token literal-property property">classObj</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">atguigu1</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>
                <span class="token literal-property property">atguigu2</span><span class="token operator">:</span> <span class="token boolean">false</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token literal-property property">styleObj</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token string">&#39;40px&#39;</span><span class="token punctuation">,</span>
                <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;red&#39;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token literal-property property">styleObj2</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">&#39;orange&#39;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span>
            <span class="token literal-property property">styleArr</span><span class="token operator">:</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>
                <span class="token literal-property property">fontSize</span><span class="token operator">:</span> <span class="token string">&#39;40px&#39;</span><span class="token punctuation">,</span>
                <span class="token literal-property property">color</span><span class="token operator">:</span> <span class="token string">&#39;red&#39;</span>
            <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">backgroundColor</span><span class="token operator">:</span> <span class="token string">&#39;gray&#39;</span>
            <span class="token punctuation">}</span><span class="token punctuation">]</span>

        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token function">changeMood</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
                <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;normal&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;happy&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;sad&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
                <span class="token keyword">const</span> index <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">random</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
                <span class="token keyword">this</span><span class="token punctuation">.</span>mood <span class="token operator">=</span> arr<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>

            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_1-9-渲染" tabindex="-1"><a class="header-anchor" href="#_1-9-渲染" aria-hidden="true">#</a> 1.9 渲染</h2><h3 id="条件渲染" tabindex="-1"><a class="header-anchor" href="#条件渲染" aria-hidden="true">#</a> 条件渲染</h3><blockquote><p>=== 等值等类型</p></blockquote><p><mark>v-if</mark></p><p>用来控制页面元素是否展示</p><p>写法：</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>v-if=&quot;表达式&quot;

v-else-if=&quot;表达式&quot;

v-else=&quot;表达式&quot;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>适用于：<strong>切换频率较低的场景。</strong></p><p>特点：<strong>不展示的DOM元素直接被移除。</strong></p><p>注意：<strong>v-if可以和:v-else-if、v-else一起使用，但要求结构不能被“打断”。</strong></p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220416161333184.png" alt="image-20220416161333184" tabindex="0" loading="lazy"><figcaption>image-20220416161333184</figcaption></figure><p><mark>v-show</mark></p><p>写法：v-show=“表达式”</p><p>适用于：<strong>切换频率较高的场景。</strong></p><p>特点：不展示的DOM元素未被移除，仅仅是使用样式隐藏掉</p><p><mark>v-show底层指令其实就是调整display:none</mark></p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220416155725949.png" alt="image-20220416155725949" tabindex="0" loading="lazy"><figcaption>image-20220416155725949</figcaption></figure><p><mark>v-if和template</mark></p><ol><li>如果需要频繁切换 v-show 较好</li><li>当条件不成立时, v-if 的所有子节点不会解析(项目中使用)<strong>1.10. 列表渲染</strong></li></ol><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220416161855040.png" alt="image-20220416161855040" tabindex="0" loading="lazy"><figcaption>image-20220416161855040</figcaption></figure><h3 id="列表渲染" tabindex="-1"><a class="header-anchor" href="#列表渲染" aria-hidden="true">#</a> 列表渲染</h3><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220420114134158.png" alt="image-20220420114134158" tabindex="0" loading="lazy"><figcaption>image-20220420114134158</figcaption></figure><p><mark>面试题：react、vue中的key有什么作用？（key的内部原理）</mark></p><pre><code>1. 虚拟DOM中key的作用：
key是虚拟DOM对象的标识，当数据发生变化时，Vue会根据【新数据】生成【新的虚拟DOM】, 
随后Vue进行【新虚拟DOM】与【旧虚拟DOM】的差异比较，比较规则如下：

2.对比规则：
(1).旧虚拟DOM中找到了与新虚拟DOM相同的key：
①.若虚拟DOM中内容没变, 直接使用之前的真实DOM！
②.若虚拟DOM中内容变了, 则生成新的真实DOM，随后替换掉页面中之前的真实DOM。

(2).旧虚拟DOM中未找到与新虚拟DOM相同的key
创建新的真实DOM，随后渲染到到页面。

3. 用index作为key可能会引发的问题：
1. 若对数据进行：逆序添加、逆序删除等破坏顺序操作:
会产生没有必要的真实DOM更新 ==&gt; 界面效果没问题, 但效率低。

2. 如果结构中还包含输入类的DOM：
会产生错误DOM更新 ==&gt; 界面有问题。

4. 开发中如何选择key?:
1.最好使用每条数据的唯一标识作为key, 比如id、手机号、身份证号、学号等唯一值。
2.如果不存在对数据的逆序添加、逆序删除等破坏顺序操作，仅用于渲染列表用于展示，
使用index作为key是没有问题的。
</code></pre><h2 id="_1-10-过滤器" tabindex="-1"><a class="header-anchor" href="#_1-10-过滤器" aria-hidden="true">#</a> 1.10 过滤器</h2><blockquote><p><mark>immediate (立即的) 初始化时让handlder调用一下</mark></p></blockquote><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220420152945645.png" alt="image-20220420152945645" tabindex="0" loading="lazy"><figcaption>image-20220420152945645</figcaption></figure><h2 id="_1-11-收集表单数据" tabindex="-1"><a class="header-anchor" href="#_1-11-收集表单数据" aria-hidden="true">#</a> 1.11 收集表单数据</h2><blockquote><p>简单来说，JSON.stringify () 就是将值转换为相应的 JSON 格式字符串。</p><p><mark>v-model.trim用于去掉输入框内首尾空格</mark></p></blockquote><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- 绑定一个提交事件，并阻止默认行为。表单的默认行为就是把表单提交。不提交，只执行方法
方法就是在控制台打印我们表单的数据，并以json的形式在后台打印 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span> <span class="token attr-name">@submit.prevent</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>demo<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
账号：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model.trim</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userInfo.account<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
密码：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>password<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userInfo.password<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
年龄：<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>number<span class="token punctuation">&quot;</span></span> <span class="token attr-name">v-model.number</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>userInfo.age<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>br</span><span class="token punctuation">/&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">&gt;</span></span>提交<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span>

<span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
<span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">&#39;#root&#39;</span><span class="token punctuation">,</span>
<span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>
<span class="token literal-property property">userInfo</span><span class="token operator">:</span><span class="token punctuation">{</span>
<span class="token literal-property property">account</span><span class="token operator">:</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
<span class="token literal-property property">password</span><span class="token operator">:</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span>
<span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">18</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
<span class="token function">demo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>userInfo<span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220420163254761.png" alt="image-20220420163254761" tabindex="0" loading="lazy"><figcaption>image-20220420163254761</figcaption></figure><blockquote><p><mark>v-model收集的是value值，且要给标签配置value值。</mark></p></blockquote><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220420171306857.png" alt="image-20220420171306857" tabindex="0" loading="lazy"><figcaption>image-20220420171306857</figcaption></figure><p><mark>总结</mark></p><p><strong>v-model的三个修饰符：</strong></p><p>lazy：失去焦点再收集数据</p><p>number：输入字符串转为有效的数字</p><p>trim：输入首尾空格过滤</p><h2 id="_1-12-内置指令" tabindex="-1"><a class="header-anchor" href="#_1-12-内置指令" aria-hidden="true">#</a> 1.12 内置指令</h2><h3 id="v-text指令" tabindex="-1"><a class="header-anchor" href="#v-text指令" aria-hidden="true">#</a> v-text指令</h3><p>1.作用：向其所在的节点中渲染文本内容。</p><p>2.与插值语法的区别：v-text会替换掉节点中的内容，{undefined{xx}}则不会。</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 准备好一个容器--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>你好，{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>name<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>str<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">//阻止 vue 在启动时生成生产提示。</span>

    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">&#39;#root&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>
            <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">str</span><span class="token operator">:</span><span class="token string">&#39;&lt;h3&gt;你好啊！&lt;/h3&gt;&#39;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220420171855727.png" alt="image-20220420171855727" tabindex="0" loading="lazy"><figcaption>image-20220420171855727</figcaption></figure><h3 id="v-html指令" tabindex="-1"><a class="header-anchor" href="#v-html指令" aria-hidden="true">#</a> v-html指令</h3><p><strong>1.作用：向指定节点中渲染包含html结构的内容。</strong></p><p>2.与插值语法的区别：</p>`,163),S=a(`<p><mark>v-html可以识别html结构。</mark></p><p>3.严重注意：v-html有安全性问题！！！！</p><p>在网站上动态渲染任意HTML是非常危险的，容易导致XSS攻击。</p><p>一定要在可信的内容上使用v-html，永不要用在用户提交的内容上！</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 准备好一个容器--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>你好，{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>str<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">v-html</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>str2<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">//阻止 vue 在启动时生成生产提示。</span>

    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">&#39;#root&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>
            <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">str</span><span class="token operator">:</span><span class="token string">&#39;&lt;h3&gt;你好啊！&lt;/h3&gt;&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">str2</span><span class="token operator">:</span><span class="token string">&#39;&lt;a href=javascript:location.href=&quot;http://www.baidu.com?&quot;+document.cookie&gt;兄弟我找到你想要的资源了，快来！&lt;/a&gt;&#39;</span><span class="token punctuation">,</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="v-once指令" tabindex="-1"><a class="header-anchor" href="#v-once指令" aria-hidden="true">#</a> v-once指令</h3><ul><li>v-once所在节点在初次动态渲染后，就视为静态内容了。</li><li>以后数据的改变不会引起v-once所在结构的更新，可以用于优化性能。</li></ul><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 准备好一个容器--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">v-once</span><span class="token punctuation">&gt;</span></span>初始化的n值是:{{ n }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>当前的n值是:{{ n }}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>n++<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>点我n+1<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
    Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">//阻止 vue 在启动时生成生产提示。</span>

    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">&#39;#root&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">data</span><span class="token operator">:</span><span class="token punctuation">{</span>
            <span class="token literal-property property">n</span><span class="token operator">:</span><span class="token number">1</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220420172717406.png" alt="image-20220420172717406" tabindex="0" loading="lazy"><figcaption>image-20220420172717406</figcaption></figure><h2 id="_1-13-生命周期" tabindex="-1"><a class="header-anchor" href="#_1-13-生命周期" aria-hidden="true">#</a> 1.13 生命周期</h2><p>Vue 实例有⼀个完整的⽣命周期，也就是从new Vue()、初始化事件(.once事件)和生命周期、编译模版、挂载Dom -&gt; 渲染、更新 -&gt; 渲染、卸载 等⼀系列过程，称这是Vue的⽣命周期。</p><p><strong>回调函数</strong>是你留个处理方法给事件，事件发生了以后会自动执行你留下调处理方法</p><p><strong>钩子函数</strong>是好比找了个代理，监视事件是否发生，如果发生了这个代理就执行你的事件处理方法；在这个过程中，代理就是钩子函数</p><p>在某种意义上，回调函数做的处理过程跟钩子函数中要调用调方法一样 但是有一点： 钩子函数一般是由事件发生者提供的。直白了说，它留下一个钩子，这个钩子的作用就是钩住你的回调方法</p><blockquote><p>==钩子函数是在一个事件触发的时候，在系统级捕获到了他，然后做一些操作。==一段用以处理系统消息的程序，用以处理系统消息的程序，是说钩子函数是用于处理系统消息的</p></blockquote><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/11370083-f279314aef6741db.jpg" alt="img" tabindex="0" loading="lazy"><figcaption>img</figcaption></figure><h1 id="二、组件化编程" tabindex="-1"><a class="header-anchor" href="#二、组件化编程" aria-hidden="true">#</a> 二、组件化编程</h1><h2 id="_2-1-编写应用对比" tabindex="-1"><a class="header-anchor" href="#_2-1-编写应用对比" aria-hidden="true">#</a> 2.1 编写应用对比</h2><h3 id="传统方式编写应用" tabindex="-1"><a class="header-anchor" href="#传统方式编写应用" aria-hidden="true">#</a> 传统方式编写应用</h3><blockquote><p>建议自行观看，讲的很清晰</p></blockquote><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220420182214465.png" alt="image-20220420182214465" tabindex="0" loading="lazy"><figcaption>image-20220420182214465</figcaption></figure><h3 id="组件化方式编写应用" tabindex="-1"><a class="header-anchor" href="#组件化方式编写应用" aria-hidden="true">#</a> 组件化方式编写应用</h3><p>组件的思想，其实就封装。能很好的实现代码复用技术</p><p>代码复用是写一次处处用（<strong>通过引用的方式</strong>），代码复制是写一次复制一次</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220420182727635.png" alt="image-20220420182727635" tabindex="0" loading="lazy"><figcaption>image-20220420182727635</figcaption></figure><h3 id="组件的定义" tabindex="-1"><a class="header-anchor" href="#组件的定义" aria-hidden="true">#</a> 组件的定义</h3><p><strong>组件就是对UI结构的复用!</strong></p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220420195552167.png" alt="image-20220420195552167" tabindex="0" loading="lazy"><figcaption>image-20220420195552167</figcaption></figure><h2 id="_2-2-非单文件组件" tabindex="-1"><a class="header-anchor" href="#_2-2-非单文件组件" aria-hidden="true">#</a> 2.2 非单文件组件</h2><blockquote><p>非单文件组件就是一个html页面里有多个组件</p></blockquote><p><strong>先来补充下template的功能</strong></p><h3 id="_2-2-1-template" tabindex="-1"><a class="header-anchor" href="#_2-2-1-template" aria-hidden="true">#</a> 2.2.1 template</h3><blockquote><p>template用来定义html结构，其实\`\`为模板字符串。它可以随意的换行</p></blockquote><p>第一种情况，有 template：</p><p>如果 el 绑定的容器没有任何内容，就一个空壳子，但在 Vue 实例中写了 template，就会编译解析这个 template 里的内容，生成虚拟 DOM，最后将 虚拟 DOM 转为 真实 DOM 插入页面（<strong>其实就可以理解为 template 替代了 el 绑定的容器的内容</strong>）。</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>    <span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;app&quot;</span><span class="token operator">&gt;</span>

    <span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>
    <span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
        <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
            <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&#39;#app&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
            &lt;div&gt;
                &lt;h2&gt;当前的n值是:{{n}}&lt;/h2&gt;
                &lt;button @click=&quot;n++&quot;&gt;点我n+1&lt;/button&gt;
            &lt;/div&gt;
            </span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
            <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">n</span><span class="token operator">:</span><span class="token string">&#39;1&#39;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">)</span>
    <span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220420180011506.png" alt="image-20220420180011506" tabindex="0" loading="lazy"><figcaption>image-20220420180011506</figcaption></figure><p><strong>第二种情况，没有 template：</strong></p><p>没有 template，就编译解析 el 绑定的容器，生成虚拟 DOM，后面就顺着生命周期执行下去</p><h3 id="_2-2-2-基本使用" tabindex="-1"><a class="header-anchor" href="#_2-2-2-基本使用" aria-hidden="true">#</a> 2.2.2 基本使用</h3><p>Vue中使用组件的三大步骤：</p><ul><li>定义组件(创建组件)</li><li>注册组件</li><li>使用组件(写组件标签)</li></ul><p><mark>定义组件</mark></p><p>使用Vue.extend(options)创建，其中options和new Vue(options)时传入的那个options几乎一样，但也有点区别；</p><p>区别如下：</p><p>el不要写，为什么？ ——— 最终所有的组件都要经过一个vm的管理，由vm中的el决定服务哪个容器。</p><p><strong>组件中定义的data必须写成函数，为什么？</strong> ———— <strong>避免组件被复用时，数据存在引用关系。</strong> 讲解一下面试小问题：data必须写成函数：</p><p>这是 js 底层设计的原因：举个例子</p><blockquote><p>对象形式</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">let</span> data <span class="token operator">=</span> <span class="token punctuation">{</span>
    <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">99</span><span class="token punctuation">,</span>
    <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">100</span>
<span class="token punctuation">}</span>

<span class="token keyword">let</span> x <span class="token operator">=</span> data<span class="token punctuation">;</span>
<span class="token keyword">let</span> y <span class="token operator">=</span> data<span class="token punctuation">;</span>
<span class="token comment">// x 和 y 引用的都是同一个对象，修改 x 的值， y 的值也会改变</span>
x<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">66</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">loh</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a:66 b:100</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// a:66 b:100</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>函数形式</p><p>其中data可省略</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token punctuation">{</span>
        <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">99</span><span class="token punctuation">,</span>
        <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">100</span>
    <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
<span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token keyword">let</span> y <span class="token operator">=</span> <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">===</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>
<span class="token comment">//函数每调用一次就创建一个新的对象返回给他们</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>备注：使用template可以配置组件结构。</p></blockquote><p>创建一个组件案例：Vue.extend() 创建</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">&quot;text/javascript&quot;</span><span class="token operator">&gt;</span>
    Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span>

    <span class="token comment">//第一步：创建school组件</span>
    <span class="token keyword">const</span> school <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
				&lt;div class=&quot;demo&quot;&gt;
					&lt;h2&gt;学校名称：{{schoolName}}&lt;/h2&gt;
					&lt;h2&gt;学校地址：{{address}}&lt;/h2&gt;
					&lt;button @click=&quot;showName&quot;&gt;点我提示学校名&lt;/button&gt;	
    &lt;/div&gt;
			</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
        <span class="token comment">// el:&#39;#root&#39;, //组件定义时，一定不要写el配置项，因为最终所有的组件都要被一个vm管理，由vm决定服务于哪个容器。</span>
        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">schoolName</span><span class="token operator">:</span><span class="token string">&#39;尚硅谷&#39;</span><span class="token punctuation">,</span>
                <span class="token literal-property property">address</span><span class="token operator">:</span><span class="token string">&#39;北京昌平&#39;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
                <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>schoolName<span class="token punctuation">)</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token comment">//第一步：创建student组件</span>
    <span class="token keyword">const</span> student <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
				&lt;div&gt;
					&lt;h2&gt;学生姓名：{{studentName}}&lt;/h2&gt;
					&lt;h2&gt;学生年龄：{{age}}&lt;/h2&gt;
    &lt;/div&gt;
			</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">studentName</span><span class="token operator">:</span><span class="token string">&#39;张三&#39;</span><span class="token punctuation">,</span>
                <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">18</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token comment">//第一步：创建hello组件</span>
    <span class="token keyword">const</span> hello <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
				&lt;div&gt;	
					&lt;h2&gt;你好啊！{{name}}&lt;/h2&gt;
    &lt;/div&gt;
			</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;Tom&#39;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><mark>注册组件</mark></p><ul><li>局部注册：靠new Vue的时候传入components选项</li><li>全局注册：靠Vue.component(‘组件名’,组件)</li></ul><blockquote><p>局部注册</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
	<span class="token comment">//创建vm</span>
    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">el</span><span class="token operator">:</span> <span class="token string">&#39;#root&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">msg</span><span class="token operator">:</span><span class="token string">&#39;你好啊！&#39;</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token comment">//第二步：注册组件（局部注册）</span>
        <span class="token literal-property property">components</span><span class="token operator">:</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">school</span><span class="token operator">:</span> school<span class="token punctuation">,</span>
            <span class="token literal-property property">student</span><span class="token operator">:</span> student
            <span class="token comment">// ES6简写形式</span>
            <span class="token comment">// school,</span>
            <span class="token comment">// student</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><blockquote><p>全局注册</p></blockquote><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span>script<span class="token operator">&gt;</span>
	<span class="token comment">//第二步：全局注册组件</span>
	Vue<span class="token punctuation">.</span><span class="token function">component</span><span class="token punctuation">(</span><span class="token string">&#39;hello&#39;</span><span class="token punctuation">,</span> hello<span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><mark>写组件标签</mark></p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token comment">&lt;!-- 准备好一个容器--&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hello</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>hello</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">&gt;</span></span>{{msg}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 第三步：编写组件标签 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>school</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>school</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>hr</span><span class="token punctuation">&gt;</span></span>
    <span class="token comment">&lt;!-- 第三步：编写组件标签 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>student</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>student</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-3-几个注意点" tabindex="-1"><a class="header-anchor" href="#_2-2-3-几个注意点" aria-hidden="true">#</a> 2.2.3 几个注意点</h3><p><mark>关于组件名：</mark></p><p>一个单词组成：</p><ul><li>第一种写法(首字母小写)：school</li><li>第二种写法(首字母大写)：School</li></ul><p><mark>多个单词组成：</mark></p><ul><li>第一种写法(kebab-case命名)：my-school</li><li>第二种写法(CamelCase命名)：MySchool (需要Vue脚手架支持)</li></ul><blockquote><p>备注：</p><p>(1).组件名尽可能回避HTML中已有的元素名称，例如：h2、H2都不行。</p><p>(2).可以使用name配置项指定组件在开发者工具中呈现的名字。</p></blockquote><p><mark>关于组件标签</mark></p><p>第一种写法：</p><p>第二种写法：</p><blockquote><p>备注：不用使用脚手架时，会导致后续组件不能渲染。</p></blockquote><p>一个简写方式：</p><p><strong>const school = Vue.extend(options) 可简写为：const school = options</strong></p><h3 id="_2-2-4-组件的嵌套" tabindex="-1"><a class="header-anchor" href="#_2-2-4-组件的嵌套" aria-hidden="true">#</a> 2.2.4 组件的嵌套</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 准备好一个容器<span class="token operator">--</span><span class="token operator">&gt;</span>
<span class="token operator">&lt;</span>div id<span class="token operator">=</span><span class="token string">&quot;root&quot;</span><span class="token operator">&gt;</span>

<span class="token operator">&lt;</span><span class="token operator">/</span>div<span class="token operator">&gt;</span>

<span class="token operator">&lt;</span>script type<span class="token operator">=</span><span class="token string">&quot;text/javascript&quot;</span><span class="token operator">&gt;</span>
    Vue<span class="token punctuation">.</span>config<span class="token punctuation">.</span>productionTip <span class="token operator">=</span> <span class="token boolean">false</span> <span class="token comment">//阻止 vue 在启动时生成生产提示。</span>

    <span class="token comment">//定义student组件</span>
    <span class="token keyword">const</span> student <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;student&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
				&lt;div&gt;
					&lt;h2&gt;学生姓名：{{name}}&lt;/h2&gt;	
					&lt;h2&gt;学生年龄：{{age}}&lt;/h2&gt;	
    &lt;/div&gt;
			</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;尚硅谷&#39;</span><span class="token punctuation">,</span>
                <span class="token literal-property property">age</span><span class="token operator">:</span><span class="token number">18</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token comment">//定义school组件</span>
    <span class="token keyword">const</span> school <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;school&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
				&lt;div&gt;
					&lt;h2&gt;学校名称：{{name}}&lt;/h2&gt;	
					&lt;h2&gt;学校地址：{{address}}&lt;/h2&gt;	
					&lt;student&gt;&lt;/student&gt;
    &lt;/div&gt;
			</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;尚硅谷&#39;</span><span class="token punctuation">,</span>
                <span class="token literal-property property">address</span><span class="token operator">:</span><span class="token string">&#39;北京&#39;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span><span class="token punctuation">,</span>
        <span class="token comment">// 注册组件（局部）</span>
        <span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">{</span>
            student
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token comment">//定义hello组件</span>
    <span class="token keyword">const</span> hello <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">&lt;h1&gt;{{msg}}&lt;/h1&gt;</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
        <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token keyword">return</span> <span class="token punctuation">{</span>
                <span class="token literal-property property">msg</span><span class="token operator">:</span><span class="token string">&#39;欢迎来到尚硅谷学习！&#39;</span>
            <span class="token punctuation">}</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token comment">//定义app组件</span>
    <span class="token keyword">const</span> app <span class="token operator">=</span> Vue<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">
				&lt;div&gt;	
					&lt;hello&gt;&lt;/hello&gt;
					&lt;school&gt;&lt;/school&gt;
    &lt;/div&gt;
			</span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">,</span>
        <span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">{</span>
            school<span class="token punctuation">,</span>
            hello
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>

    <span class="token comment">//创建vm</span>
    <span class="token keyword">new</span> <span class="token class-name">Vue</span><span class="token punctuation">(</span><span class="token punctuation">{</span>
        <span class="token literal-property property">template</span><span class="token operator">:</span><span class="token string">&#39;&lt;app&gt;&lt;/app&gt;&#39;</span><span class="token punctuation">,</span>
        <span class="token literal-property property">el</span><span class="token operator">:</span><span class="token string">&#39;#root&#39;</span><span class="token punctuation">,</span>
        <span class="token comment">//注册组件（局部）</span>
        <span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">{</span>app<span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-2-5-vuecomponent" tabindex="-1"><a class="header-anchor" href="#_2-2-5-vuecomponent" aria-hidden="true">#</a> 2.2.5 VueComponent</h3><p>school组件本质是一个名为VueComponent的构造函数，且不是程序员定义的，是Vue.extend生成的。</p><p>我们只需要写<code>&lt;school/&gt;</code>或<code>&lt;school&gt;&lt;school/&gt;</code>，解析时会帮我们创建school组件的实例对象，即Vue帮我们执行的：new VueComponent(options)。</p><p>特别注意：每次调用Vue.extend，返回的都是一个全新的VueComponent！！！！(这个VueComponent可不是实例对象)</p><p>关于this指向：</p><p><strong>组件配置中：data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【VueComponent实例对象】。</strong></p><p><strong>new Vue(options)配置中：data函数、methods中的函数、watch中的函数、computed中的函数 它们的this均是【Vue实例对象】。</strong></p><p>VueComponent的实例对象，以后简称vc（也可称之为：组件实例对象）。</p><p>Vue的实例对象，以后简称vm。</p><p>Vue 在哪管理 VueComponent?</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220420212743331.png" alt="image-20220420212743331" tabindex="0" loading="lazy"><figcaption>image-20220420212743331</figcaption></figure><h3 id="_2-2-6-一个重要的内置关系" tabindex="-1"><a class="header-anchor" href="#_2-2-6-一个重要的内置关系" aria-hidden="true">#</a> 2.2.6 一个重要的内置关系</h3><ul><li>一个重要的内置关系：VueComponent.prototype.<strong>proto</strong> === Vue.prototype</li><li>为什么要有这个关系：让组件实例对象（vc）可以访问到 Vue原型上的属性、方法。</li></ul><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220420213310666.png" alt="image-20220420213310666" tabindex="0" loading="lazy"><figcaption>image-20220420213310666</figcaption></figure><h2 id="_2-3-单文件组件" tabindex="-1"><a class="header-anchor" href="#_2-3-单文件组件" aria-hidden="true">#</a> 2.3 单文件组件</h2><p>单文件组件就是将一个组件的代码写在 .vue 这种格式的文件中，webpack 会将 .vue 文件解析成 html,css,js这些形式。</p><p>单文件组件写法介绍</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220420220951986.png" alt="image-20220420220951986" tabindex="0" loading="lazy"><figcaption>image-20220420220951986</figcaption></figure><h3 id="_2-3-1-定义组件" tabindex="-1"><a class="header-anchor" href="#_2-3-1-定义组件" aria-hidden="true">#</a> 2.3.1 定义组件</h3><p><strong>School.vue</strong></p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>demo<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>学校名称：{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>学校地址：{{address}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>showName<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>点我提示学校名<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>	
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
	 <span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;School&#39;</span><span class="token punctuation">,</span>
		<span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
			<span class="token keyword">return</span> <span class="token punctuation">{</span>
				<span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;尚硅谷&#39;</span><span class="token punctuation">,</span>
				<span class="token literal-property property">address</span><span class="token operator">:</span><span class="token string">&#39;北京昌平&#39;</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
		<span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
			<span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
				<span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
			<span class="token punctuation">}</span>
		<span class="token punctuation">}</span><span class="token punctuation">,</span>
	<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
	<span class="token selector">.demo</span><span class="token punctuation">{</span>
		<span class="token property">background-color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>
	<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>Student.vue</strong></p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
<span class="token comment">&lt;!-- template里写组件的结构
    template不参与编译，最后结构就只剩&lt;div&gt;&lt;/div&gt;里面的东西
 --&gt;</span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>demo<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>学生名称：{{name}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span><span class="token punctuation">&gt;</span></span>学生地址：{{address}}<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">@click</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>showName<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>点我提示学生地址<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">&gt;</span></span>
    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">




<span class="token doc-comment comment">/**
 * script写交互相关的代码（数据方法等）
 * 只有暴露组件，才能引入
 * 关键字export能让组件暴露，可以被重用
 * export default是默认暴露
 *  */</span> 
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
    <span class="token comment">//name为组件名</span>
    <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;student&#39;</span><span class="token punctuation">,</span>
    <span class="token comment">//以下为配置项</span>
    <span class="token function">data</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">return</span> <span class="token punctuation">{</span>
            <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;库里&#39;</span><span class="token punctuation">,</span>
            <span class="token literal-property property">address</span><span class="token operator">:</span><span class="token string">&#39;JinZhou&#39;</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
    <span class="token literal-property property">methods</span><span class="token operator">:</span> <span class="token punctuation">{</span>
        <span class="token function">showName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>
            <span class="token function">alert</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span>
<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>






<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">&gt;</span></span><span class="token style"><span class="token language-css">
<span class="token comment">/* style写组件的样式 */</span>
    <span class="token selector">.demo</span><span class="token punctuation">{</span>
        <span class="token property">background-color</span><span class="token punctuation">:</span> orange<span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-2-注册组件" tabindex="-1"><a class="header-anchor" href="#_2-3-2-注册组件" aria-hidden="true">#</a> 2.3.2 注册组件</h3><blockquote><p>把组件写到App汇总组件里</p></blockquote><p><strong>App.vue</strong></p><p>用来汇总所有的组件(大总管)</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>template</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>School</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>School</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Student</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Student</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>template</span><span class="token punctuation">&gt;</span></span>

<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">&gt;</span></span><span class="token script"><span class="token language-javascript">
	<span class="token comment">//引入组件</span>
	<span class="token keyword">import</span> School <span class="token keyword">from</span> <span class="token string">&#39;./School.vue&#39;</span>
	<span class="token keyword">import</span> Student <span class="token keyword">from</span> <span class="token string">&#39;./Student.vue&#39;</span>

	<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token punctuation">{</span>
		<span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;App&#39;</span><span class="token punctuation">,</span>
		<span class="token literal-property property">components</span><span class="token operator">:</span><span class="token punctuation">{</span>
			School<span class="token punctuation">,</span>
			Student
		<span class="token punctuation">}</span>
	<span class="token punctuation">}</span>
</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-3-3-写组件标签" tabindex="-1"><a class="header-anchor" href="#_2-3-3-写组件标签" aria-hidden="true">#</a> 2.3.3 写组件标签</h3><blockquote><p>在入口文件main.js，通过template写组件标签</p></blockquote><p><strong>main.js</strong></p><p>在这个文件里面创建 vue 实例</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>import App from &#39;./App.vue&#39;

new Vue({
	el:&#39;#root&#39;,
	template:\`<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>App</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>App</span><span class="token punctuation">&gt;</span></span>\`,
	components:{App},
})

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><mark>最后通过index.html页面来显示</mark></p><blockquote><p>引入vue.js文件和main.js文件即可</p></blockquote><p><strong>index.html</strong></p><p>在这写 vue 要绑定的容器</p><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code><span class="token doctype"><span class="token punctuation">&lt;!</span><span class="token doctype-tag">DOCTYPE</span> <span class="token name">html</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>UTF-8<span class="token punctuation">&quot;</span></span> <span class="token punctuation">/&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">&gt;</span></span>练习一下单文件组件的语法<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">&gt;</span></span>
		<span class="token comment">&lt;!-- 准备一个容器 --&gt;</span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>root<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">&gt;</span></span>
        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>../js/vue.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
		<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>text/javascript<span class="token punctuation">&quot;</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>./main.js<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">&gt;</span></span>
	<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">&gt;</span></span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">&gt;</span></span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><mark>打开index.html看下</mark></p><blockquote><p>es6不支持模块化语法，所以不显示。</p><p>我们下面用脚手架即可</p></blockquote><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220420221659162.png" alt="image-20220420221659162" tabindex="0" loading="lazy"><figcaption>image-20220420221659162</figcaption></figure><h1 id="三、使用vue脚手架" tabindex="-1"><a class="header-anchor" href="#三、使用vue脚手架" aria-hidden="true">#</a> 三、使用Vue脚手架</h1><blockquote><p>安装node.js会自动安装npm命令</p></blockquote><h2 id="_3-1-安装" tabindex="-1"><a class="header-anchor" href="#_3-1-安装" aria-hidden="true">#</a> 3.1 安装</h2>`,122),N={href:"https://registry.npm.taobao.org",target:"_blank",rel:"noopener noreferrer"},z=a(`<p>使用前置：</p><p>第一步(没有安装过的执行)：全局安装 @vue/cli</p><p>npm install -g @vue/cli</p><p>第二步：切换到要创建项目的目录，然后使用命令创建项目</p><p>vue create xxxxx</p><p>第三步：启动项目</p><p>npm run serve</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220420222502357.png" alt="image-20220420222502357" tabindex="0" loading="lazy"><figcaption>image-20220420222502357</figcaption></figure><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220420223439018.png" alt="image-20220420223439018" tabindex="0" loading="lazy"><figcaption>image-20220420223439018</figcaption></figure><p>脚手架创建成功</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220420223710772.png" alt="image-20220420223710772" tabindex="0" loading="lazy"><figcaption>image-20220420223710772</figcaption></figure><h2 id="_3-2-访问测试" tabindex="-1"><a class="header-anchor" href="#_3-2-访问测试" aria-hidden="true">#</a> 3.2 访问测试</h2><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220420224008950.png" alt="image-20220420224008950" tabindex="0" loading="lazy"><figcaption>image-20220420224008950</figcaption></figure><h2 id="_3-3-脚手架文件结构" tabindex="-1"><a class="header-anchor" href="#_3-3-脚手架文件结构" aria-hidden="true">#</a> 3.3 脚手架文件结构</h2><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>├── node_modules 
├── public
│   ├── favicon.ico: 页签图标
│   └── index.html: 主页面
├── src
│   ├── assets: 存放静态资源
│   │   └── logo.png
│   │── component: 存放组件
│   │   └── HelloWorld.vue
│   │── App.vue: 汇总所有组件
│   │── main.js: 入口文件
├── .gitignore: git版本管制忽略的配置
├── babel.config.js: babel的配置文件
├── package.json: 应用包配置文件 
├── README.md.md: 应用描述文件
├── package-lock.json：包版本控制文件
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vue项目的运行流程" tabindex="-1"><a class="header-anchor" href="#vue项目的运行流程" aria-hidden="true">#</a> Vue项目的运行流程</h2><p>在工程化的项目中，vue 要做的事情很单纯：<strong>通过 main.js 把 App.vue 渲染到 index.html 的指定区域中。</strong></p><blockquote><p><strong>render: h =&gt; h(App) 它的作用就是将App汇总组件放入容器中</strong></p></blockquote><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>new Vue({

 // 将App组件放入容器中

 render: h =&gt; h(App)

})
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220422144804071.png" alt="image-20220422144804071" tabindex="0" loading="lazy"><figcaption>image-20220422144804071</figcaption></figure><p><strong>更换我们前面写的组件看看能不能生效</strong></p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220421100246642.png" alt="image-20220421100246642" tabindex="0" loading="lazy"><figcaption>image-20220421100246642</figcaption></figure><h2 id="_3-4-render函数" tabindex="-1"><a class="header-anchor" href="#_3-4-render函数" aria-hidden="true">#</a> 3.4 render函数</h2><p>使用 import 导入第三方库的时候不需要 加 ‘./’</p><p>导入我们自己写的：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>import App from &#39;./App.vue&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>导入第三方的</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>import Vue from &#39;vue&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>不需要在 from ‘vue’ 加 &#39;./&#39; 的原因是第三方库 node_modules 人家帮我们配置好了。</p><p>我们通过 import 导入第三方库，在第三方库的 package.json 文件中确定了我们引入的是哪个文件</p><p>vue.js与vue.runtime.xxx.js的区别：</p><p>vue.js是完整版的Vue，包含：核心功能+模板解析器。</p><p>vue.runtime.xxx.js是运行版的Vue，只包含：核心功能；没有模板解析器。</p><p>因为vue.runtime.xxx.js没有模板解析器，所以不能使用template配置项，需要使用render函数接</p><p>收到的createElement函数去指定具体内容。</p><h2 id="_3-5-组件化编程流程" tabindex="-1"><a class="header-anchor" href="#_3-5-组件化编程流程" aria-hidden="true">#</a> 3.5 组件化编程流程</h2><ol><li>拆分静态组件：组件要按照功能点拆分，命名不要与html元素冲突。</li><li>实现动态组件：考虑好数据的存放位置，数据是一个组件在用，还是一些组件在用：</li><li>一个组件在用：放在组件自身即可。</li><li>一些组件在用：放在他们共同的父组件上（状态提升）。</li><li>实现交互：从绑定事件开始。</li></ol><ul><li>使用v-model时要切记：v-model绑定的值不能是props传过来的值，因为props是不可以修改的！</li><li>props传过来的若是对象类型的值，修改对象中的属性时Vue不会报错，但不推荐这样做。</li></ul><h2 id="_3-6-浏览器本地存储" tabindex="-1"><a class="header-anchor" href="#_3-6-浏览器本地存储" aria-hidden="true">#</a> 3.6 浏览器本地存储</h2><h3 id="cookie" tabindex="-1"><a class="header-anchor" href="#cookie" aria-hidden="true">#</a> Cookie</h3><p>Cookie是最早被提出来的本地存储方式，在此之前，服务端是无法判断网络中的两个请求是否是同一用户发起的，为解决这个问题，Cookie就出现了。Cookie 是存储在用户浏览器中的一段不超过 4 KB 的字符串。它由一个名称（Name）、一个值（Value）和其它几个用 于控制 Cookie 有效期、安全性、使用范围的可选属性组成。不同域名下的 Cookie 各自独立，每当客户端发起请求时，会自动把当前域名下所有未过期的 Cookie 一同发送到服务器。</p><p><strong>Cookie的特性：</strong></p><p>Cookie一旦创建成功，名称就无法修改 Cookie是无法跨域名的，也就是说a域名和b域名下的cookie是无法共享的，这也是由Cookie的隐私安全性决定的，这样就能够阻止非法获取其他网站的Cookie 每个域名下Cookie的数量不能超过20个，每个Cookie的大小不能超过4kb 有安全问题，如果Cookie被拦截了，那就可获得session的所有信息，即使加密也于事无补，无需知道cookie的意义，只要转发cookie就能达到目的 Cookie在请求一个新的页面的时候都会被发送过去</p><p><strong>Cookie 在身份认证中的作用</strong></p><p>客户端第一次请求服务器的时候，服务器通过响应头的形式，向客户端发送一个身份认证的 Cookie，客户端会自动 将 Cookie 保存在浏览器中。</p><p>随后，当客户端浏览器每次请求服务器的时候，浏览器会自动将身份认证相关的 Cookie保存，通过请求头的形式发送给 服务器，服务器即可验明客户端的身份。</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/e29b7e0bef784bc5b6b8ed50b0d8a509.png" alt="在这里插入图片描述" tabindex="0" loading="lazy"><figcaption>在这里插入图片描述</figcaption></figure><p><strong>Cookie 不具有安全性</strong></p><p>由于 Cookie 是存储在浏览器中的，而且浏览器也提供了读写 Cookie 的 API，因此 Cookie 很容易被伪造，不具有安全 性。因此不建议服务器将重要的隐私数据，通过 Cookie 的形式发送给浏览器。</p><p>注意：千万不要使用 Cookie 存储重要且隐私的数据！比如用户的身份信息、密码等。</p><h3 id="session" tabindex="-1"><a class="header-anchor" href="#session" aria-hidden="true">#</a> Session</h3><p>Session是另一种记录客户状态的机制，不同的是Cookie保存在客户端浏览器中，而Session保存在服务器上。客户端访问服务器的时候，服务器把客户端信息以某种形式记录在服务器上。这就是Session。客户端再次访问时只需要从该Session中查找该客户的状态就可以了。session是一种特殊的cookie。cookie是保存在客户端的，而session是保存在服务端。</p><p><strong>为什么要用session</strong> 由于cookie 是存在用户端，而且它本身存储的尺寸大小也有限，最关键是用户可以是可见的，并可以随意的修改，很不安全。那如何又要安全，又可以方便的全局读取信息呢？于是，这个时候，一种新的存储会话机制：session 诞生了</p><p><strong>session原理</strong></p><p>当客户端第一次请求服务器的时候，服务器生成一份session保存在服务端，并将该数据(session)的id以cookie的形式传递给客户端；以后的每次请求，浏览器都会自动的携带cookie来访问服务器(session数据id)。</p><p><mark>图示：</mark></p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220421101020927.png" alt="image-20220421101020927" tabindex="0" loading="lazy"><figcaption>image-20220421101020927</figcaption></figure><p><strong>session 标准工作流程</strong></p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220421101052224.png" alt="image-20220421101052224" tabindex="0" loading="lazy"><figcaption>image-20220421101052224</figcaption></figure><h3 id="localstorage" tabindex="-1"><a class="header-anchor" href="#localstorage" aria-hidden="true">#</a> LocalStorage</h3><p>LocalStorage是HTML5新引入的特性，由于有的时候我们存储的信息较大，Cookie就不能满足我们的需求，这时候LocalStorage就派上用场了。</p><p><strong>LocalStorage的优点：</strong></p><ul><li>在大小方面，LocalStorage的大小一般为5MB，可以储存更多的信息</li><li>LocalStorage是持久储存，并不会随着页面的关闭而消失，除非主动清理，不然会永久存在</li><li>仅储存在本地，不像Cookie那样每次HTTP请求都会被携带</li></ul><p><strong>LocalStorage的缺点：</strong></p><ul><li>存在浏览器兼容问题，IE8以下版本的浏览器不支持</li><li>如果浏览器设置为隐私模式，那我们将无法读取到LocalStorage</li><li>LocalStorage受到同源策略的限制，即端口、协议、主机地址有任何一个不相同，都不会访问</li></ul><p><strong>LocalStorage的常用API：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 保存数据到 localStorage</span>
localStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 从 localStorage 获取数据</span>
<span class="token keyword">let</span> data <span class="token operator">=</span> localStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 从 localStorage 删除保存的数据</span>
localStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 从 localStorage 删除所有保存的数据</span>
localStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取某个索引的Key</span>
localStorage<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>LocalStorage的使用场景:</p><p>有些网站有换肤的功能，这时候就可以将换肤的信息存储在本地的LocalStorage中，当需要换肤的时候，直接操作LocalStorage即可</p><p>在网站中的用户浏览信息也会存储在LocalStorage中，还有网站的一些不常变动的个人信息等也可以存储在本地的LocalStorage中</p><h3 id="sessionstorage" tabindex="-1"><a class="header-anchor" href="#sessionstorage" aria-hidden="true">#</a> SessionStorage</h3><p>SessionStorage和LocalStorage都是在HTML5才提出来的存储方案，SessionStorage 主要用于临时保存同一窗口(或标签页)的数据，刷新页面时不会删除，关闭窗口或标签页之后将会删除这些数据。</p><p><strong>SessionStorage与LocalStorage对比：</strong></p><ul><li>SessionStorage和LocalStorage都在本地进行数据存储；</li><li>SessionStorage也有同源策略的限制，但是SessionStorage有一条更加严格的限制，</li><li>SessionStorage只有在同一浏览器的同一窗口下才能够共享；</li><li>LocalStorage和SessionStorage都不能被爬虫爬取；</li></ul><p><strong>SessionStorage的常用API：</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token comment">// 保存数据到 sessionStorage</span>
sessionStorage<span class="token punctuation">.</span><span class="token function">setItem</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;value&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 从 sessionStorage 获取数据</span>
<span class="token keyword">let</span> data <span class="token operator">=</span> sessionStorage<span class="token punctuation">.</span><span class="token function">getItem</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 从 sessionStorage 删除保存的数据</span>
sessionStorage<span class="token punctuation">.</span><span class="token function">removeItem</span><span class="token punctuation">(</span><span class="token string">&#39;key&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 从 sessionStorage 删除所有保存的数据</span>
sessionStorage<span class="token punctuation">.</span><span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token comment">// 获取某个索引的Key</span>
sessionStorage<span class="token punctuation">.</span><span class="token function">key</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>SessionStorage的使用场景</strong></p><p>由于SessionStorage具有时效性，所以可以用来存储一些网站的游客登录的信息，还有临时的浏览记录的信息。当关闭网站之后，这些信息也就随之消除了。</p><h1 id="四、vue中的ajax" tabindex="-1"><a class="header-anchor" href="#四、vue中的ajax" aria-hidden="true">#</a> 四、Vue中的ajax</h1><p><strong>通用的 Ajax 请求库, 官方推荐，使用广泛</strong></p><h2 id="_4-1-axios简介" tabindex="-1"><a class="header-anchor" href="#_4-1-axios简介" aria-hidden="true">#</a> 4.1 axios简介</h2><p>就是在vue发送ajax请求</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220411113114605.png" alt="image-20220411113114605" tabindex="0" loading="lazy"><figcaption>image-20220411113114605</figcaption></figure><p>vscode中使用node.js</p><p>如果遇见问题可以重启vscode即可</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220411133538293.png" alt="image-20220411133538293" tabindex="0" loading="lazy"><figcaption>image-20220411133538293</figcaption></figure><h1 id="五、vuex" tabindex="-1"><a class="header-anchor" href="#五、vuex" aria-hidden="true">#</a> 五、Vuex</h1><h2 id="_5-1-概念" tabindex="-1"><a class="header-anchor" href="#_5-1-概念" aria-hidden="true">#</a> 5.1 概念</h2><p>在Vue中实现集中式状态（数据）管理的一个Vue插件，对vue应用中多个组件的共享状态进行集中式的管理（读/写），也是一种组件间通信的方式，且适用于任意组件间通信。</p><h2 id="_5-2-何时使用" tabindex="-1"><a class="header-anchor" href="#_5-2-何时使用" aria-hidden="true">#</a> 5.2 何时使用？</h2><p>多个组件需要共享数据时</p><h1 id="六、vue-router" tabindex="-1"><a class="header-anchor" href="#六、vue-router" aria-hidden="true">#</a> 六、Vue-router</h1><h2 id="_6-1-简介" tabindex="-1"><a class="header-anchor" href="#_6-1-简介" aria-hidden="true">#</a> 6.1 简介</h2><p>理解： 一个路由（route）就是一组映射关系（key - value），多个路由需要路由器（router）进行管理。</p><p>前端路由：key是路径，value是组件。</p><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220421113243866.png" alt="image-20220421113243866" tabindex="0" loading="lazy"><figcaption>image-20220421113243866</figcaption></figure><figure><img src="https://typora-1259403628.cos.ap-nanjing.myqcloud.com/image-20220421113546776.png" alt="image-20220421113546776" tabindex="0" loading="lazy"><figcaption>image-20220421113546776</figcaption></figure><ul><li>路由就是一组key-value对应关系</li><li>多个路由，需要经过路由器的管理</li></ul><h2 id="_6-2-基本使用" tabindex="-1"><a class="header-anchor" href="#_6-2-基本使用" aria-hidden="true">#</a> 6.2 基本使用</h2><ol><li>安装vue-router，命令：<code>npm i vue-router</code></li><li>应用插件：<code>Vue.use(VueRouter)</code></li><li>编写router配置项:</li></ol><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>//引入VueRouter
import VueRouter from &#39;vue-router&#39;
//引入Luyou 组件
import About from &#39;../components/About&#39;
import Home from &#39;../components/Home&#39;

//创建router实例对象，去管理一组一组的路由规则
const router = new VueRouter({
	routes:[
		{
			path:&#39;/about&#39;,
			component:About
		},
		{
			path:&#39;/home&#39;,
			component:Home
		}
	]
})

//暴露router
export default router
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>4.实现切换（active-class可配置高亮样式）</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">active-class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>active<span class="token punctuation">&quot;</span></span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/about<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>About<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>5.指定展示位置</p><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-view</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-view</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_6-3-几个注意点" tabindex="-1"><a class="header-anchor" href="#_6-3-几个注意点" aria-hidden="true">#</a> 6.3 几个注意点</h2><ol><li>路由组件通常存放在pages文件夹，一般组件通常存放在components文件夹。</li><li>通过切换，“隐藏”了的路由组件，默认是被销毁掉的，需要的时候再去挂载。</li><li>每个组件都有自己的$route属性，里面存储着自己的路由信息。</li><li>整个应用只有一个router，可以通过组件的$router属性获取到。</li></ol><h2 id="_6-4-多级路由-多级路由" tabindex="-1"><a class="header-anchor" href="#_6-4-多级路由-多级路由" aria-hidden="true">#</a> 6.4 多级路由（多级路由）</h2><ol><li>配置路由规则，使用children配置项：</li></ol><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code>routes:[
	{
		path:&#39;/about&#39;,
		component:About,
	},
	{
		path:&#39;/home&#39;,
		component:Home,
		children:[ //通过children配置子级路由
			{
				path:&#39;news&#39;, //此处一定不要写：/news
				component:News
			},
			{
				path:&#39;message&#39;,//此处一定不要写：/message
				component:Message
			}
		]
	}
]
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>2.跳转（要写完整路径）：</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;router-link to=&quot;/home/news&quot;&gt;News&lt;/router-link&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>3.指定展示位置</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>&lt;router-view&gt;&lt;/router-view&gt;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h2 id="_6-5-命名路由" tabindex="-1"><a class="header-anchor" href="#_6-5-命名路由" aria-hidden="true">#</a> 6.5 命名路由</h2><ol><li>作用：可以简化路由的跳转。</li><li>如何使用 <ol><li>给路由命名：</li></ol></li></ol><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token punctuation">{</span>
	<span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">&#39;/demo&#39;</span><span class="token punctuation">,</span>
	<span class="token literal-property property">component</span><span class="token operator">:</span>Demo<span class="token punctuation">,</span>
	<span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span>
		<span class="token punctuation">{</span>
			<span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">,</span>
			<span class="token literal-property property">component</span><span class="token operator">:</span>Test<span class="token punctuation">,</span>
			<span class="token literal-property property">children</span><span class="token operator">:</span><span class="token punctuation">[</span>
				<span class="token punctuation">{</span>
                      <span class="token literal-property property">name</span><span class="token operator">:</span><span class="token string">&#39;hello&#39;</span> <span class="token comment">//给路由命名</span>
					<span class="token literal-property property">path</span><span class="token operator">:</span><span class="token string">&#39;welcome&#39;</span><span class="token punctuation">,</span>
					<span class="token literal-property property">component</span><span class="token operator">:</span>Hello<span class="token punctuation">,</span>
				<span class="token punctuation">}</span>
			<span class="token punctuation">]</span>
		<span class="token punctuation">}</span>
	<span class="token punctuation">]</span>
<span class="token punctuation">}</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li>简化跳转：</li></ol><div class="language-vue line-numbers-mode" data-ext="vue"><pre class="language-vue"><code><span class="token comment">&lt;!--简化前，需要写完整的路径 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>/demo/test/welcome<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>跳转<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!--简化后，直接通过名字跳转 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> <span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{name:&#39;hello&#39;}<span class="token punctuation">&quot;</span></span><span class="token punctuation">&gt;</span></span>跳转<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>

<span class="token comment">&lt;!--简化写法配合传递参数 --&gt;</span>
<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>router-link</span> 
	<span class="token attr-name">:to</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">&quot;</span>{
		name:&#39;hello&#39;,
		query:{
		   id:666,
            title:&#39;你好&#39;
		}
	}<span class="token punctuation">&quot;</span></span>
<span class="token punctuation">&gt;</span></span>跳转<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>router-link</span><span class="token punctuation">&gt;</span></span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,119);function M(t,C){const p=u("ExternalLinkIcon");return i(),c("div",null,[d,k,n("ul",null,[n("li",null,[n("a",v,[s("英文官网"),e(p)])]),n("li",null,[n("a",m,[s("中文官网"),e(p)])])]),g,n("ol",null,[b,h,y,f,q,n("li",null,[n("strong",null,o(t.xxx)+"中的xxx要写js表达式，且xxx可以自动读取到data中的所有属性",1)]),x]),w,n("p",null,"写法："+o(t.xxx)+"，xxx是js表达式，且可以直接读取到data中的所有属性。",1),j,V,_,n("p",null,"v-html会替换掉节点中所有的内容，"+o(t.xx)+"则不会。",1),S,n("p",null,[s("配置 npm 淘宝镜像：npm config set registry "),n("a",N,[s("https://registry.npm.taobao.org"),e(p)])]),z])}const A=l(r,[["render",M],["__file","Vue.html.vue"]]);export{A as default};
